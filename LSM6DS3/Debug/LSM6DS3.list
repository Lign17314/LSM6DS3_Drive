
LSM6DS3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b58  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  08009c14  08009c14  00019c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a29c  0800a29c  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  0800a29c  0800a29c  0001a29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2a4  0800a2a4  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a8  0800a2a8  0001a2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800a2ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000194  0800a440  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  0800a440  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171c9  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000214a  00000000  00000000  00037385  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001890  00000000  00000000  000394d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001778  00000000  00000000  0003ad60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019486  00000000  00000000  0003c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e54b  00000000  00000000  0005595e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009fc0e  00000000  00000000  00063ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103ab7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006084  00000000  00000000  00103b34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000194 	.word	0x20000194
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009bfc 	.word	0x08009bfc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000198 	.word	0x20000198
 8000100:	08009bfc 	.word	0x08009bfc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cfrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	1c08      	adds	r0, r1, #0
 8000404:	4661      	mov	r1, ip
 8000406:	e7ff      	b.n	8000408 <__aeabi_cfcmpeq>

08000408 <__aeabi_cfcmpeq>:
 8000408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040a:	f000 f98b 	bl	8000724 <__lesf2>
 800040e:	2800      	cmp	r0, #0
 8000410:	d401      	bmi.n	8000416 <__aeabi_cfcmpeq+0xe>
 8000412:	2100      	movs	r1, #0
 8000414:	42c8      	cmn	r0, r1
 8000416:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000418 <__aeabi_fcmpeq>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f90d 	bl	8000638 <__eqsf2>
 800041e:	4240      	negs	r0, r0
 8000420:	3001      	adds	r0, #1
 8000422:	bd10      	pop	{r4, pc}

08000424 <__aeabi_fcmplt>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 f97d 	bl	8000724 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	db01      	blt.n	8000432 <__aeabi_fcmplt+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fcmple>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 f973 	bl	8000724 <__lesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dd01      	ble.n	8000446 <__aeabi_fcmple+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmpgt>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 f91b 	bl	8000688 <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	dc01      	bgt.n	800045a <__aeabi_fcmpgt+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_fcmpge>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 f911 	bl	8000688 <__gesf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	da01      	bge.n	800046e <__aeabi_fcmpge+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_uldivmod>:
 8000474:	2b00      	cmp	r3, #0
 8000476:	d111      	bne.n	800049c <__aeabi_uldivmod+0x28>
 8000478:	2a00      	cmp	r2, #0
 800047a:	d10f      	bne.n	800049c <__aeabi_uldivmod+0x28>
 800047c:	2900      	cmp	r1, #0
 800047e:	d100      	bne.n	8000482 <__aeabi_uldivmod+0xe>
 8000480:	2800      	cmp	r0, #0
 8000482:	d002      	beq.n	800048a <__aeabi_uldivmod+0x16>
 8000484:	2100      	movs	r1, #0
 8000486:	43c9      	mvns	r1, r1
 8000488:	1c08      	adds	r0, r1, #0
 800048a:	b407      	push	{r0, r1, r2}
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <__aeabi_uldivmod+0x24>)
 800048e:	a102      	add	r1, pc, #8	; (adr r1, 8000498 <__aeabi_uldivmod+0x24>)
 8000490:	1840      	adds	r0, r0, r1
 8000492:	9002      	str	r0, [sp, #8]
 8000494:	bd03      	pop	{r0, r1, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	ffffff65 	.word	0xffffff65
 800049c:	b403      	push	{r0, r1}
 800049e:	4668      	mov	r0, sp
 80004a0:	b501      	push	{r0, lr}
 80004a2:	9802      	ldr	r0, [sp, #8]
 80004a4:	f000 f806 	bl	80004b4 <__udivmoddi4>
 80004a8:	9b01      	ldr	r3, [sp, #4]
 80004aa:	469e      	mov	lr, r3
 80004ac:	b002      	add	sp, #8
 80004ae:	bc0c      	pop	{r2, r3}
 80004b0:	4770      	bx	lr
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	464f      	mov	r7, r9
 80004b8:	4646      	mov	r6, r8
 80004ba:	46d6      	mov	lr, sl
 80004bc:	b5c0      	push	{r6, r7, lr}
 80004be:	0004      	movs	r4, r0
 80004c0:	b082      	sub	sp, #8
 80004c2:	000d      	movs	r5, r1
 80004c4:	4691      	mov	r9, r2
 80004c6:	4698      	mov	r8, r3
 80004c8:	428b      	cmp	r3, r1
 80004ca:	d82f      	bhi.n	800052c <__udivmoddi4+0x78>
 80004cc:	d02c      	beq.n	8000528 <__udivmoddi4+0x74>
 80004ce:	4641      	mov	r1, r8
 80004d0:	4648      	mov	r0, r9
 80004d2:	f000 fb31 	bl	8000b38 <__clzdi2>
 80004d6:	0029      	movs	r1, r5
 80004d8:	0006      	movs	r6, r0
 80004da:	0020      	movs	r0, r4
 80004dc:	f000 fb2c 	bl	8000b38 <__clzdi2>
 80004e0:	1a33      	subs	r3, r6, r0
 80004e2:	469c      	mov	ip, r3
 80004e4:	3b20      	subs	r3, #32
 80004e6:	469a      	mov	sl, r3
 80004e8:	d500      	bpl.n	80004ec <__udivmoddi4+0x38>
 80004ea:	e076      	b.n	80005da <__udivmoddi4+0x126>
 80004ec:	464b      	mov	r3, r9
 80004ee:	4652      	mov	r2, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001f      	movs	r7, r3
 80004f4:	464b      	mov	r3, r9
 80004f6:	4662      	mov	r2, ip
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d828      	bhi.n	8000552 <__udivmoddi4+0x9e>
 8000500:	d025      	beq.n	800054e <__udivmoddi4+0x9a>
 8000502:	4653      	mov	r3, sl
 8000504:	1ba4      	subs	r4, r4, r6
 8000506:	41bd      	sbcs	r5, r7
 8000508:	2b00      	cmp	r3, #0
 800050a:	da00      	bge.n	800050e <__udivmoddi4+0x5a>
 800050c:	e07b      	b.n	8000606 <__udivmoddi4+0x152>
 800050e:	2200      	movs	r2, #0
 8000510:	2300      	movs	r3, #0
 8000512:	9200      	str	r2, [sp, #0]
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4652      	mov	r2, sl
 800051a:	4093      	lsls	r3, r2
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2301      	movs	r3, #1
 8000520:	4662      	mov	r2, ip
 8000522:	4093      	lsls	r3, r2
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	e018      	b.n	800055a <__udivmoddi4+0xa6>
 8000528:	4282      	cmp	r2, r0
 800052a:	d9d0      	bls.n	80004ce <__udivmoddi4+0x1a>
 800052c:	2200      	movs	r2, #0
 800052e:	2300      	movs	r3, #0
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <__udivmoddi4+0x8a>
 800053a:	601c      	str	r4, [r3, #0]
 800053c:	605d      	str	r5, [r3, #4]
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	b002      	add	sp, #8
 8000544:	bc1c      	pop	{r2, r3, r4}
 8000546:	4690      	mov	r8, r2
 8000548:	4699      	mov	r9, r3
 800054a:	46a2      	mov	sl, r4
 800054c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054e:	42a3      	cmp	r3, r4
 8000550:	d9d7      	bls.n	8000502 <__udivmoddi4+0x4e>
 8000552:	2200      	movs	r2, #0
 8000554:	2300      	movs	r3, #0
 8000556:	9200      	str	r2, [sp, #0]
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	4663      	mov	r3, ip
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0e9      	beq.n	8000534 <__udivmoddi4+0x80>
 8000560:	07fb      	lsls	r3, r7, #31
 8000562:	4698      	mov	r8, r3
 8000564:	4641      	mov	r1, r8
 8000566:	0872      	lsrs	r2, r6, #1
 8000568:	430a      	orrs	r2, r1
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	4666      	mov	r6, ip
 800056e:	e00e      	b.n	800058e <__udivmoddi4+0xda>
 8000570:	42ab      	cmp	r3, r5
 8000572:	d101      	bne.n	8000578 <__udivmoddi4+0xc4>
 8000574:	42a2      	cmp	r2, r4
 8000576:	d80c      	bhi.n	8000592 <__udivmoddi4+0xde>
 8000578:	1aa4      	subs	r4, r4, r2
 800057a:	419d      	sbcs	r5, r3
 800057c:	2001      	movs	r0, #1
 800057e:	1924      	adds	r4, r4, r4
 8000580:	416d      	adcs	r5, r5
 8000582:	2100      	movs	r1, #0
 8000584:	3e01      	subs	r6, #1
 8000586:	1824      	adds	r4, r4, r0
 8000588:	414d      	adcs	r5, r1
 800058a:	2e00      	cmp	r6, #0
 800058c:	d006      	beq.n	800059c <__udivmoddi4+0xe8>
 800058e:	42ab      	cmp	r3, r5
 8000590:	d9ee      	bls.n	8000570 <__udivmoddi4+0xbc>
 8000592:	3e01      	subs	r6, #1
 8000594:	1924      	adds	r4, r4, r4
 8000596:	416d      	adcs	r5, r5
 8000598:	2e00      	cmp	r6, #0
 800059a:	d1f8      	bne.n	800058e <__udivmoddi4+0xda>
 800059c:	9800      	ldr	r0, [sp, #0]
 800059e:	9901      	ldr	r1, [sp, #4]
 80005a0:	4653      	mov	r3, sl
 80005a2:	1900      	adds	r0, r0, r4
 80005a4:	4169      	adcs	r1, r5
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	db23      	blt.n	80005f2 <__udivmoddi4+0x13e>
 80005aa:	002b      	movs	r3, r5
 80005ac:	4652      	mov	r2, sl
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	4664      	mov	r4, ip
 80005b4:	40e2      	lsrs	r2, r4
 80005b6:	001c      	movs	r4, r3
 80005b8:	4653      	mov	r3, sl
 80005ba:	0015      	movs	r5, r2
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db2d      	blt.n	800061c <__udivmoddi4+0x168>
 80005c0:	0026      	movs	r6, r4
 80005c2:	4657      	mov	r7, sl
 80005c4:	40be      	lsls	r6, r7
 80005c6:	0033      	movs	r3, r6
 80005c8:	0026      	movs	r6, r4
 80005ca:	4667      	mov	r7, ip
 80005cc:	40be      	lsls	r6, r7
 80005ce:	0032      	movs	r2, r6
 80005d0:	1a80      	subs	r0, r0, r2
 80005d2:	4199      	sbcs	r1, r3
 80005d4:	9000      	str	r0, [sp, #0]
 80005d6:	9101      	str	r1, [sp, #4]
 80005d8:	e7ac      	b.n	8000534 <__udivmoddi4+0x80>
 80005da:	4662      	mov	r2, ip
 80005dc:	2320      	movs	r3, #32
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	464a      	mov	r2, r9
 80005e2:	40da      	lsrs	r2, r3
 80005e4:	4661      	mov	r1, ip
 80005e6:	0013      	movs	r3, r2
 80005e8:	4642      	mov	r2, r8
 80005ea:	408a      	lsls	r2, r1
 80005ec:	0017      	movs	r7, r2
 80005ee:	431f      	orrs	r7, r3
 80005f0:	e780      	b.n	80004f4 <__udivmoddi4+0x40>
 80005f2:	4662      	mov	r2, ip
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4666      	mov	r6, ip
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4313      	orrs	r3, r2
 8000604:	e7d4      	b.n	80005b0 <__udivmoddi4+0xfc>
 8000606:	4662      	mov	r2, ip
 8000608:	2320      	movs	r3, #32
 800060a:	2100      	movs	r1, #0
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	2200      	movs	r2, #0
 8000610:	9100      	str	r1, [sp, #0]
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	2201      	movs	r2, #1
 8000616:	40da      	lsrs	r2, r3
 8000618:	9201      	str	r2, [sp, #4]
 800061a:	e780      	b.n	800051e <__udivmoddi4+0x6a>
 800061c:	2320      	movs	r3, #32
 800061e:	4662      	mov	r2, ip
 8000620:	0026      	movs	r6, r4
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	40de      	lsrs	r6, r3
 8000626:	002f      	movs	r7, r5
 8000628:	46b0      	mov	r8, r6
 800062a:	4666      	mov	r6, ip
 800062c:	40b7      	lsls	r7, r6
 800062e:	4646      	mov	r6, r8
 8000630:	003b      	movs	r3, r7
 8000632:	4333      	orrs	r3, r6
 8000634:	e7c8      	b.n	80005c8 <__udivmoddi4+0x114>
 8000636:	46c0      	nop			; (mov r8, r8)

08000638 <__eqsf2>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	0042      	lsls	r2, r0, #1
 800063c:	024e      	lsls	r6, r1, #9
 800063e:	004c      	lsls	r4, r1, #1
 8000640:	0245      	lsls	r5, r0, #9
 8000642:	0a6d      	lsrs	r5, r5, #9
 8000644:	0e12      	lsrs	r2, r2, #24
 8000646:	0fc3      	lsrs	r3, r0, #31
 8000648:	0a76      	lsrs	r6, r6, #9
 800064a:	0e24      	lsrs	r4, r4, #24
 800064c:	0fc9      	lsrs	r1, r1, #31
 800064e:	2aff      	cmp	r2, #255	; 0xff
 8000650:	d00f      	beq.n	8000672 <__eqsf2+0x3a>
 8000652:	2cff      	cmp	r4, #255	; 0xff
 8000654:	d011      	beq.n	800067a <__eqsf2+0x42>
 8000656:	2001      	movs	r0, #1
 8000658:	42a2      	cmp	r2, r4
 800065a:	d000      	beq.n	800065e <__eqsf2+0x26>
 800065c:	bd70      	pop	{r4, r5, r6, pc}
 800065e:	42b5      	cmp	r5, r6
 8000660:	d1fc      	bne.n	800065c <__eqsf2+0x24>
 8000662:	428b      	cmp	r3, r1
 8000664:	d00d      	beq.n	8000682 <__eqsf2+0x4a>
 8000666:	2a00      	cmp	r2, #0
 8000668:	d1f8      	bne.n	800065c <__eqsf2+0x24>
 800066a:	0028      	movs	r0, r5
 800066c:	1e45      	subs	r5, r0, #1
 800066e:	41a8      	sbcs	r0, r5
 8000670:	e7f4      	b.n	800065c <__eqsf2+0x24>
 8000672:	2001      	movs	r0, #1
 8000674:	2d00      	cmp	r5, #0
 8000676:	d1f1      	bne.n	800065c <__eqsf2+0x24>
 8000678:	e7eb      	b.n	8000652 <__eqsf2+0x1a>
 800067a:	2001      	movs	r0, #1
 800067c:	2e00      	cmp	r6, #0
 800067e:	d1ed      	bne.n	800065c <__eqsf2+0x24>
 8000680:	e7e9      	b.n	8000656 <__eqsf2+0x1e>
 8000682:	2000      	movs	r0, #0
 8000684:	e7ea      	b.n	800065c <__eqsf2+0x24>
 8000686:	46c0      	nop			; (mov r8, r8)

08000688 <__gesf2>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	004a      	lsls	r2, r1, #1
 800068c:	024e      	lsls	r6, r1, #9
 800068e:	0245      	lsls	r5, r0, #9
 8000690:	0044      	lsls	r4, r0, #1
 8000692:	0a6d      	lsrs	r5, r5, #9
 8000694:	0e24      	lsrs	r4, r4, #24
 8000696:	0fc3      	lsrs	r3, r0, #31
 8000698:	0a76      	lsrs	r6, r6, #9
 800069a:	0e12      	lsrs	r2, r2, #24
 800069c:	0fc9      	lsrs	r1, r1, #31
 800069e:	2cff      	cmp	r4, #255	; 0xff
 80006a0:	d015      	beq.n	80006ce <__gesf2+0x46>
 80006a2:	2aff      	cmp	r2, #255	; 0xff
 80006a4:	d00e      	beq.n	80006c4 <__gesf2+0x3c>
 80006a6:	2c00      	cmp	r4, #0
 80006a8:	d115      	bne.n	80006d6 <__gesf2+0x4e>
 80006aa:	2a00      	cmp	r2, #0
 80006ac:	d101      	bne.n	80006b2 <__gesf2+0x2a>
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d01c      	beq.n	80006ec <__gesf2+0x64>
 80006b2:	2d00      	cmp	r5, #0
 80006b4:	d014      	beq.n	80006e0 <__gesf2+0x58>
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d027      	beq.n	800070a <__gesf2+0x82>
 80006ba:	2002      	movs	r0, #2
 80006bc:	3b01      	subs	r3, #1
 80006be:	4018      	ands	r0, r3
 80006c0:	3801      	subs	r0, #1
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	2e00      	cmp	r6, #0
 80006c6:	d0ee      	beq.n	80006a6 <__gesf2+0x1e>
 80006c8:	2002      	movs	r0, #2
 80006ca:	4240      	negs	r0, r0
 80006cc:	e7f9      	b.n	80006c2 <__gesf2+0x3a>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d1fa      	bne.n	80006c8 <__gesf2+0x40>
 80006d2:	2aff      	cmp	r2, #255	; 0xff
 80006d4:	d00e      	beq.n	80006f4 <__gesf2+0x6c>
 80006d6:	2a00      	cmp	r2, #0
 80006d8:	d10e      	bne.n	80006f8 <__gesf2+0x70>
 80006da:	2e00      	cmp	r6, #0
 80006dc:	d0ed      	beq.n	80006ba <__gesf2+0x32>
 80006de:	e00b      	b.n	80006f8 <__gesf2+0x70>
 80006e0:	2301      	movs	r3, #1
 80006e2:	3901      	subs	r1, #1
 80006e4:	4399      	bics	r1, r3
 80006e6:	0008      	movs	r0, r1
 80006e8:	3001      	adds	r0, #1
 80006ea:	e7ea      	b.n	80006c2 <__gesf2+0x3a>
 80006ec:	2000      	movs	r0, #0
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d0e7      	beq.n	80006c2 <__gesf2+0x3a>
 80006f2:	e7e2      	b.n	80006ba <__gesf2+0x32>
 80006f4:	2e00      	cmp	r6, #0
 80006f6:	d1e7      	bne.n	80006c8 <__gesf2+0x40>
 80006f8:	428b      	cmp	r3, r1
 80006fa:	d1de      	bne.n	80006ba <__gesf2+0x32>
 80006fc:	4294      	cmp	r4, r2
 80006fe:	dd05      	ble.n	800070c <__gesf2+0x84>
 8000700:	2102      	movs	r1, #2
 8000702:	1e58      	subs	r0, r3, #1
 8000704:	4008      	ands	r0, r1
 8000706:	3801      	subs	r0, #1
 8000708:	e7db      	b.n	80006c2 <__gesf2+0x3a>
 800070a:	2400      	movs	r4, #0
 800070c:	42a2      	cmp	r2, r4
 800070e:	dc04      	bgt.n	800071a <__gesf2+0x92>
 8000710:	42b5      	cmp	r5, r6
 8000712:	d8d2      	bhi.n	80006ba <__gesf2+0x32>
 8000714:	2000      	movs	r0, #0
 8000716:	42b5      	cmp	r5, r6
 8000718:	d2d3      	bcs.n	80006c2 <__gesf2+0x3a>
 800071a:	1e58      	subs	r0, r3, #1
 800071c:	2301      	movs	r3, #1
 800071e:	4398      	bics	r0, r3
 8000720:	3001      	adds	r0, #1
 8000722:	e7ce      	b.n	80006c2 <__gesf2+0x3a>

08000724 <__lesf2>:
 8000724:	b530      	push	{r4, r5, lr}
 8000726:	0042      	lsls	r2, r0, #1
 8000728:	0244      	lsls	r4, r0, #9
 800072a:	024d      	lsls	r5, r1, #9
 800072c:	0fc3      	lsrs	r3, r0, #31
 800072e:	0048      	lsls	r0, r1, #1
 8000730:	0a64      	lsrs	r4, r4, #9
 8000732:	0e12      	lsrs	r2, r2, #24
 8000734:	0a6d      	lsrs	r5, r5, #9
 8000736:	0e00      	lsrs	r0, r0, #24
 8000738:	0fc9      	lsrs	r1, r1, #31
 800073a:	2aff      	cmp	r2, #255	; 0xff
 800073c:	d012      	beq.n	8000764 <__lesf2+0x40>
 800073e:	28ff      	cmp	r0, #255	; 0xff
 8000740:	d00c      	beq.n	800075c <__lesf2+0x38>
 8000742:	2a00      	cmp	r2, #0
 8000744:	d112      	bne.n	800076c <__lesf2+0x48>
 8000746:	2800      	cmp	r0, #0
 8000748:	d119      	bne.n	800077e <__lesf2+0x5a>
 800074a:	2d00      	cmp	r5, #0
 800074c:	d117      	bne.n	800077e <__lesf2+0x5a>
 800074e:	2c00      	cmp	r4, #0
 8000750:	d02b      	beq.n	80007aa <__lesf2+0x86>
 8000752:	2002      	movs	r0, #2
 8000754:	3b01      	subs	r3, #1
 8000756:	4018      	ands	r0, r3
 8000758:	3801      	subs	r0, #1
 800075a:	e026      	b.n	80007aa <__lesf2+0x86>
 800075c:	2d00      	cmp	r5, #0
 800075e:	d0f0      	beq.n	8000742 <__lesf2+0x1e>
 8000760:	2002      	movs	r0, #2
 8000762:	e022      	b.n	80007aa <__lesf2+0x86>
 8000764:	2c00      	cmp	r4, #0
 8000766:	d1fb      	bne.n	8000760 <__lesf2+0x3c>
 8000768:	28ff      	cmp	r0, #255	; 0xff
 800076a:	d01f      	beq.n	80007ac <__lesf2+0x88>
 800076c:	2800      	cmp	r0, #0
 800076e:	d11f      	bne.n	80007b0 <__lesf2+0x8c>
 8000770:	2d00      	cmp	r5, #0
 8000772:	d11d      	bne.n	80007b0 <__lesf2+0x8c>
 8000774:	2002      	movs	r0, #2
 8000776:	3b01      	subs	r3, #1
 8000778:	4018      	ands	r0, r3
 800077a:	3801      	subs	r0, #1
 800077c:	e015      	b.n	80007aa <__lesf2+0x86>
 800077e:	2c00      	cmp	r4, #0
 8000780:	d00e      	beq.n	80007a0 <__lesf2+0x7c>
 8000782:	428b      	cmp	r3, r1
 8000784:	d1e5      	bne.n	8000752 <__lesf2+0x2e>
 8000786:	2200      	movs	r2, #0
 8000788:	4290      	cmp	r0, r2
 800078a:	dc04      	bgt.n	8000796 <__lesf2+0x72>
 800078c:	42ac      	cmp	r4, r5
 800078e:	d8e0      	bhi.n	8000752 <__lesf2+0x2e>
 8000790:	2000      	movs	r0, #0
 8000792:	42ac      	cmp	r4, r5
 8000794:	d209      	bcs.n	80007aa <__lesf2+0x86>
 8000796:	1e58      	subs	r0, r3, #1
 8000798:	2301      	movs	r3, #1
 800079a:	4398      	bics	r0, r3
 800079c:	3001      	adds	r0, #1
 800079e:	e004      	b.n	80007aa <__lesf2+0x86>
 80007a0:	2301      	movs	r3, #1
 80007a2:	3901      	subs	r1, #1
 80007a4:	4399      	bics	r1, r3
 80007a6:	0008      	movs	r0, r1
 80007a8:	3001      	adds	r0, #1
 80007aa:	bd30      	pop	{r4, r5, pc}
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d1d7      	bne.n	8000760 <__lesf2+0x3c>
 80007b0:	428b      	cmp	r3, r1
 80007b2:	d1ce      	bne.n	8000752 <__lesf2+0x2e>
 80007b4:	4282      	cmp	r2, r0
 80007b6:	dde7      	ble.n	8000788 <__lesf2+0x64>
 80007b8:	2102      	movs	r1, #2
 80007ba:	1e58      	subs	r0, r3, #1
 80007bc:	4008      	ands	r0, r1
 80007be:	3801      	subs	r0, #1
 80007c0:	e7f3      	b.n	80007aa <__lesf2+0x86>
 80007c2:	46c0      	nop			; (mov r8, r8)

080007c4 <__aeabi_fmul>:
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	464e      	mov	r6, r9
 80007c8:	4657      	mov	r7, sl
 80007ca:	4645      	mov	r5, r8
 80007cc:	46de      	mov	lr, fp
 80007ce:	b5e0      	push	{r5, r6, r7, lr}
 80007d0:	0243      	lsls	r3, r0, #9
 80007d2:	0a5b      	lsrs	r3, r3, #9
 80007d4:	0045      	lsls	r5, r0, #1
 80007d6:	b083      	sub	sp, #12
 80007d8:	1c0f      	adds	r7, r1, #0
 80007da:	4699      	mov	r9, r3
 80007dc:	0e2d      	lsrs	r5, r5, #24
 80007de:	0fc6      	lsrs	r6, r0, #31
 80007e0:	2d00      	cmp	r5, #0
 80007e2:	d057      	beq.n	8000894 <__aeabi_fmul+0xd0>
 80007e4:	2dff      	cmp	r5, #255	; 0xff
 80007e6:	d024      	beq.n	8000832 <__aeabi_fmul+0x6e>
 80007e8:	2080      	movs	r0, #128	; 0x80
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	04c0      	lsls	r0, r0, #19
 80007ee:	4318      	orrs	r0, r3
 80007f0:	2300      	movs	r3, #0
 80007f2:	4681      	mov	r9, r0
 80007f4:	469a      	mov	sl, r3
 80007f6:	469b      	mov	fp, r3
 80007f8:	3d7f      	subs	r5, #127	; 0x7f
 80007fa:	027c      	lsls	r4, r7, #9
 80007fc:	007a      	lsls	r2, r7, #1
 80007fe:	0ffb      	lsrs	r3, r7, #31
 8000800:	0a64      	lsrs	r4, r4, #9
 8000802:	0e12      	lsrs	r2, r2, #24
 8000804:	4698      	mov	r8, r3
 8000806:	d023      	beq.n	8000850 <__aeabi_fmul+0x8c>
 8000808:	2aff      	cmp	r2, #255	; 0xff
 800080a:	d04b      	beq.n	80008a4 <__aeabi_fmul+0xe0>
 800080c:	00e3      	lsls	r3, r4, #3
 800080e:	2480      	movs	r4, #128	; 0x80
 8000810:	2000      	movs	r0, #0
 8000812:	04e4      	lsls	r4, r4, #19
 8000814:	3a7f      	subs	r2, #127	; 0x7f
 8000816:	431c      	orrs	r4, r3
 8000818:	18ad      	adds	r5, r5, r2
 800081a:	1c6b      	adds	r3, r5, #1
 800081c:	4647      	mov	r7, r8
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	4653      	mov	r3, sl
 8000822:	4077      	eors	r7, r6
 8000824:	003a      	movs	r2, r7
 8000826:	2b0f      	cmp	r3, #15
 8000828:	d848      	bhi.n	80008bc <__aeabi_fmul+0xf8>
 800082a:	497d      	ldr	r1, [pc, #500]	; (8000a20 <__aeabi_fmul+0x25c>)
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	58cb      	ldr	r3, [r1, r3]
 8000830:	469f      	mov	pc, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d000      	beq.n	8000838 <__aeabi_fmul+0x74>
 8000836:	e085      	b.n	8000944 <__aeabi_fmul+0x180>
 8000838:	3308      	adds	r3, #8
 800083a:	469a      	mov	sl, r3
 800083c:	3b06      	subs	r3, #6
 800083e:	469b      	mov	fp, r3
 8000840:	027c      	lsls	r4, r7, #9
 8000842:	007a      	lsls	r2, r7, #1
 8000844:	0ffb      	lsrs	r3, r7, #31
 8000846:	25ff      	movs	r5, #255	; 0xff
 8000848:	0a64      	lsrs	r4, r4, #9
 800084a:	0e12      	lsrs	r2, r2, #24
 800084c:	4698      	mov	r8, r3
 800084e:	d1db      	bne.n	8000808 <__aeabi_fmul+0x44>
 8000850:	2c00      	cmp	r4, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_fmul+0x92>
 8000854:	e090      	b.n	8000978 <__aeabi_fmul+0x1b4>
 8000856:	4652      	mov	r2, sl
 8000858:	2301      	movs	r3, #1
 800085a:	431a      	orrs	r2, r3
 800085c:	4692      	mov	sl, r2
 800085e:	2001      	movs	r0, #1
 8000860:	e7db      	b.n	800081a <__aeabi_fmul+0x56>
 8000862:	464c      	mov	r4, r9
 8000864:	4658      	mov	r0, fp
 8000866:	0017      	movs	r7, r2
 8000868:	2802      	cmp	r0, #2
 800086a:	d024      	beq.n	80008b6 <__aeabi_fmul+0xf2>
 800086c:	2803      	cmp	r0, #3
 800086e:	d100      	bne.n	8000872 <__aeabi_fmul+0xae>
 8000870:	e0cf      	b.n	8000a12 <__aeabi_fmul+0x24e>
 8000872:	2200      	movs	r2, #0
 8000874:	2300      	movs	r3, #0
 8000876:	2801      	cmp	r0, #1
 8000878:	d14d      	bne.n	8000916 <__aeabi_fmul+0x152>
 800087a:	0258      	lsls	r0, r3, #9
 800087c:	05d2      	lsls	r2, r2, #23
 800087e:	0a40      	lsrs	r0, r0, #9
 8000880:	07ff      	lsls	r7, r7, #31
 8000882:	4310      	orrs	r0, r2
 8000884:	4338      	orrs	r0, r7
 8000886:	b003      	add	sp, #12
 8000888:	bc3c      	pop	{r2, r3, r4, r5}
 800088a:	4690      	mov	r8, r2
 800088c:	4699      	mov	r9, r3
 800088e:	46a2      	mov	sl, r4
 8000890:	46ab      	mov	fp, r5
 8000892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000894:	2b00      	cmp	r3, #0
 8000896:	d15b      	bne.n	8000950 <__aeabi_fmul+0x18c>
 8000898:	2304      	movs	r3, #4
 800089a:	469a      	mov	sl, r3
 800089c:	3b03      	subs	r3, #3
 800089e:	2500      	movs	r5, #0
 80008a0:	469b      	mov	fp, r3
 80008a2:	e7aa      	b.n	80007fa <__aeabi_fmul+0x36>
 80008a4:	35ff      	adds	r5, #255	; 0xff
 80008a6:	2c00      	cmp	r4, #0
 80008a8:	d160      	bne.n	800096c <__aeabi_fmul+0x1a8>
 80008aa:	4652      	mov	r2, sl
 80008ac:	2302      	movs	r3, #2
 80008ae:	431a      	orrs	r2, r3
 80008b0:	4692      	mov	sl, r2
 80008b2:	2002      	movs	r0, #2
 80008b4:	e7b1      	b.n	800081a <__aeabi_fmul+0x56>
 80008b6:	22ff      	movs	r2, #255	; 0xff
 80008b8:	2300      	movs	r3, #0
 80008ba:	e7de      	b.n	800087a <__aeabi_fmul+0xb6>
 80008bc:	464b      	mov	r3, r9
 80008be:	0c1b      	lsrs	r3, r3, #16
 80008c0:	469c      	mov	ip, r3
 80008c2:	464b      	mov	r3, r9
 80008c4:	0426      	lsls	r6, r4, #16
 80008c6:	0c36      	lsrs	r6, r6, #16
 80008c8:	0418      	lsls	r0, r3, #16
 80008ca:	4661      	mov	r1, ip
 80008cc:	0033      	movs	r3, r6
 80008ce:	0c22      	lsrs	r2, r4, #16
 80008d0:	4664      	mov	r4, ip
 80008d2:	0c00      	lsrs	r0, r0, #16
 80008d4:	4343      	muls	r3, r0
 80008d6:	434e      	muls	r6, r1
 80008d8:	4350      	muls	r0, r2
 80008da:	4354      	muls	r4, r2
 80008dc:	1980      	adds	r0, r0, r6
 80008de:	0c1a      	lsrs	r2, r3, #16
 80008e0:	1812      	adds	r2, r2, r0
 80008e2:	4296      	cmp	r6, r2
 80008e4:	d903      	bls.n	80008ee <__aeabi_fmul+0x12a>
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	0249      	lsls	r1, r1, #9
 80008ea:	468c      	mov	ip, r1
 80008ec:	4464      	add	r4, ip
 80008ee:	041b      	lsls	r3, r3, #16
 80008f0:	0c1b      	lsrs	r3, r3, #16
 80008f2:	0410      	lsls	r0, r2, #16
 80008f4:	18c0      	adds	r0, r0, r3
 80008f6:	0183      	lsls	r3, r0, #6
 80008f8:	1e5e      	subs	r6, r3, #1
 80008fa:	41b3      	sbcs	r3, r6
 80008fc:	0e80      	lsrs	r0, r0, #26
 80008fe:	4318      	orrs	r0, r3
 8000900:	0c13      	lsrs	r3, r2, #16
 8000902:	191b      	adds	r3, r3, r4
 8000904:	019b      	lsls	r3, r3, #6
 8000906:	4303      	orrs	r3, r0
 8000908:	001c      	movs	r4, r3
 800090a:	0123      	lsls	r3, r4, #4
 800090c:	d579      	bpl.n	8000a02 <__aeabi_fmul+0x23e>
 800090e:	2301      	movs	r3, #1
 8000910:	0862      	lsrs	r2, r4, #1
 8000912:	401c      	ands	r4, r3
 8000914:	4314      	orrs	r4, r2
 8000916:	9a01      	ldr	r2, [sp, #4]
 8000918:	327f      	adds	r2, #127	; 0x7f
 800091a:	2a00      	cmp	r2, #0
 800091c:	dd4d      	ble.n	80009ba <__aeabi_fmul+0x1f6>
 800091e:	0763      	lsls	r3, r4, #29
 8000920:	d004      	beq.n	800092c <__aeabi_fmul+0x168>
 8000922:	230f      	movs	r3, #15
 8000924:	4023      	ands	r3, r4
 8000926:	2b04      	cmp	r3, #4
 8000928:	d000      	beq.n	800092c <__aeabi_fmul+0x168>
 800092a:	3404      	adds	r4, #4
 800092c:	0123      	lsls	r3, r4, #4
 800092e:	d503      	bpl.n	8000938 <__aeabi_fmul+0x174>
 8000930:	4b3c      	ldr	r3, [pc, #240]	; (8000a24 <__aeabi_fmul+0x260>)
 8000932:	9a01      	ldr	r2, [sp, #4]
 8000934:	401c      	ands	r4, r3
 8000936:	3280      	adds	r2, #128	; 0x80
 8000938:	2afe      	cmp	r2, #254	; 0xfe
 800093a:	dcbc      	bgt.n	80008b6 <__aeabi_fmul+0xf2>
 800093c:	01a3      	lsls	r3, r4, #6
 800093e:	0a5b      	lsrs	r3, r3, #9
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	e79a      	b.n	800087a <__aeabi_fmul+0xb6>
 8000944:	230c      	movs	r3, #12
 8000946:	469a      	mov	sl, r3
 8000948:	3b09      	subs	r3, #9
 800094a:	25ff      	movs	r5, #255	; 0xff
 800094c:	469b      	mov	fp, r3
 800094e:	e754      	b.n	80007fa <__aeabi_fmul+0x36>
 8000950:	0018      	movs	r0, r3
 8000952:	f000 f8d3 	bl	8000afc <__clzsi2>
 8000956:	464a      	mov	r2, r9
 8000958:	1f43      	subs	r3, r0, #5
 800095a:	2576      	movs	r5, #118	; 0x76
 800095c:	409a      	lsls	r2, r3
 800095e:	2300      	movs	r3, #0
 8000960:	426d      	negs	r5, r5
 8000962:	4691      	mov	r9, r2
 8000964:	1a2d      	subs	r5, r5, r0
 8000966:	469a      	mov	sl, r3
 8000968:	469b      	mov	fp, r3
 800096a:	e746      	b.n	80007fa <__aeabi_fmul+0x36>
 800096c:	4652      	mov	r2, sl
 800096e:	2303      	movs	r3, #3
 8000970:	431a      	orrs	r2, r3
 8000972:	4692      	mov	sl, r2
 8000974:	2003      	movs	r0, #3
 8000976:	e750      	b.n	800081a <__aeabi_fmul+0x56>
 8000978:	0020      	movs	r0, r4
 800097a:	f000 f8bf 	bl	8000afc <__clzsi2>
 800097e:	1f43      	subs	r3, r0, #5
 8000980:	1a2d      	subs	r5, r5, r0
 8000982:	409c      	lsls	r4, r3
 8000984:	3d76      	subs	r5, #118	; 0x76
 8000986:	2000      	movs	r0, #0
 8000988:	e747      	b.n	800081a <__aeabi_fmul+0x56>
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	2700      	movs	r7, #0
 800098e:	03db      	lsls	r3, r3, #15
 8000990:	22ff      	movs	r2, #255	; 0xff
 8000992:	e772      	b.n	800087a <__aeabi_fmul+0xb6>
 8000994:	4642      	mov	r2, r8
 8000996:	e766      	b.n	8000866 <__aeabi_fmul+0xa2>
 8000998:	464c      	mov	r4, r9
 800099a:	0032      	movs	r2, r6
 800099c:	4658      	mov	r0, fp
 800099e:	e762      	b.n	8000866 <__aeabi_fmul+0xa2>
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	464a      	mov	r2, r9
 80009a4:	03db      	lsls	r3, r3, #15
 80009a6:	421a      	tst	r2, r3
 80009a8:	d022      	beq.n	80009f0 <__aeabi_fmul+0x22c>
 80009aa:	421c      	tst	r4, r3
 80009ac:	d120      	bne.n	80009f0 <__aeabi_fmul+0x22c>
 80009ae:	4323      	orrs	r3, r4
 80009b0:	025b      	lsls	r3, r3, #9
 80009b2:	0a5b      	lsrs	r3, r3, #9
 80009b4:	4647      	mov	r7, r8
 80009b6:	22ff      	movs	r2, #255	; 0xff
 80009b8:	e75f      	b.n	800087a <__aeabi_fmul+0xb6>
 80009ba:	2301      	movs	r3, #1
 80009bc:	1a9a      	subs	r2, r3, r2
 80009be:	2a1b      	cmp	r2, #27
 80009c0:	dc21      	bgt.n	8000a06 <__aeabi_fmul+0x242>
 80009c2:	0023      	movs	r3, r4
 80009c4:	9901      	ldr	r1, [sp, #4]
 80009c6:	40d3      	lsrs	r3, r2
 80009c8:	319e      	adds	r1, #158	; 0x9e
 80009ca:	408c      	lsls	r4, r1
 80009cc:	001a      	movs	r2, r3
 80009ce:	0023      	movs	r3, r4
 80009d0:	1e5c      	subs	r4, r3, #1
 80009d2:	41a3      	sbcs	r3, r4
 80009d4:	4313      	orrs	r3, r2
 80009d6:	075a      	lsls	r2, r3, #29
 80009d8:	d004      	beq.n	80009e4 <__aeabi_fmul+0x220>
 80009da:	220f      	movs	r2, #15
 80009dc:	401a      	ands	r2, r3
 80009de:	2a04      	cmp	r2, #4
 80009e0:	d000      	beq.n	80009e4 <__aeabi_fmul+0x220>
 80009e2:	3304      	adds	r3, #4
 80009e4:	015a      	lsls	r2, r3, #5
 80009e6:	d411      	bmi.n	8000a0c <__aeabi_fmul+0x248>
 80009e8:	019b      	lsls	r3, r3, #6
 80009ea:	0a5b      	lsrs	r3, r3, #9
 80009ec:	2200      	movs	r2, #0
 80009ee:	e744      	b.n	800087a <__aeabi_fmul+0xb6>
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	464a      	mov	r2, r9
 80009f4:	03db      	lsls	r3, r3, #15
 80009f6:	4313      	orrs	r3, r2
 80009f8:	025b      	lsls	r3, r3, #9
 80009fa:	0a5b      	lsrs	r3, r3, #9
 80009fc:	0037      	movs	r7, r6
 80009fe:	22ff      	movs	r2, #255	; 0xff
 8000a00:	e73b      	b.n	800087a <__aeabi_fmul+0xb6>
 8000a02:	9501      	str	r5, [sp, #4]
 8000a04:	e787      	b.n	8000916 <__aeabi_fmul+0x152>
 8000a06:	2200      	movs	r2, #0
 8000a08:	2300      	movs	r3, #0
 8000a0a:	e736      	b.n	800087a <__aeabi_fmul+0xb6>
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e733      	b.n	800087a <__aeabi_fmul+0xb6>
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	03db      	lsls	r3, r3, #15
 8000a16:	4323      	orrs	r3, r4
 8000a18:	025b      	lsls	r3, r3, #9
 8000a1a:	0a5b      	lsrs	r3, r3, #9
 8000a1c:	22ff      	movs	r2, #255	; 0xff
 8000a1e:	e72c      	b.n	800087a <__aeabi_fmul+0xb6>
 8000a20:	0800a184 	.word	0x0800a184
 8000a24:	f7ffffff 	.word	0xf7ffffff

08000a28 <__aeabi_f2iz>:
 8000a28:	0241      	lsls	r1, r0, #9
 8000a2a:	0042      	lsls	r2, r0, #1
 8000a2c:	0fc3      	lsrs	r3, r0, #31
 8000a2e:	0a49      	lsrs	r1, r1, #9
 8000a30:	0e12      	lsrs	r2, r2, #24
 8000a32:	2000      	movs	r0, #0
 8000a34:	2a7e      	cmp	r2, #126	; 0x7e
 8000a36:	d90d      	bls.n	8000a54 <__aeabi_f2iz+0x2c>
 8000a38:	2a9d      	cmp	r2, #157	; 0x9d
 8000a3a:	d80c      	bhi.n	8000a56 <__aeabi_f2iz+0x2e>
 8000a3c:	2080      	movs	r0, #128	; 0x80
 8000a3e:	0400      	lsls	r0, r0, #16
 8000a40:	4301      	orrs	r1, r0
 8000a42:	2a95      	cmp	r2, #149	; 0x95
 8000a44:	dc0a      	bgt.n	8000a5c <__aeabi_f2iz+0x34>
 8000a46:	2096      	movs	r0, #150	; 0x96
 8000a48:	1a82      	subs	r2, r0, r2
 8000a4a:	40d1      	lsrs	r1, r2
 8000a4c:	4248      	negs	r0, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d100      	bne.n	8000a54 <__aeabi_f2iz+0x2c>
 8000a52:	0008      	movs	r0, r1
 8000a54:	4770      	bx	lr
 8000a56:	4a03      	ldr	r2, [pc, #12]	; (8000a64 <__aeabi_f2iz+0x3c>)
 8000a58:	1898      	adds	r0, r3, r2
 8000a5a:	e7fb      	b.n	8000a54 <__aeabi_f2iz+0x2c>
 8000a5c:	3a96      	subs	r2, #150	; 0x96
 8000a5e:	4091      	lsls	r1, r2
 8000a60:	e7f4      	b.n	8000a4c <__aeabi_f2iz+0x24>
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	7fffffff 	.word	0x7fffffff

08000a68 <__aeabi_i2f>:
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d03d      	beq.n	8000aea <__aeabi_i2f+0x82>
 8000a6e:	17c3      	asrs	r3, r0, #31
 8000a70:	18c5      	adds	r5, r0, r3
 8000a72:	405d      	eors	r5, r3
 8000a74:	0fc4      	lsrs	r4, r0, #31
 8000a76:	0028      	movs	r0, r5
 8000a78:	f000 f840 	bl	8000afc <__clzsi2>
 8000a7c:	229e      	movs	r2, #158	; 0x9e
 8000a7e:	1a12      	subs	r2, r2, r0
 8000a80:	2a96      	cmp	r2, #150	; 0x96
 8000a82:	dc07      	bgt.n	8000a94 <__aeabi_i2f+0x2c>
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	2808      	cmp	r0, #8
 8000a88:	dd33      	ble.n	8000af2 <__aeabi_i2f+0x8a>
 8000a8a:	3808      	subs	r0, #8
 8000a8c:	4085      	lsls	r5, r0
 8000a8e:	0268      	lsls	r0, r5, #9
 8000a90:	0a40      	lsrs	r0, r0, #9
 8000a92:	e023      	b.n	8000adc <__aeabi_i2f+0x74>
 8000a94:	2a99      	cmp	r2, #153	; 0x99
 8000a96:	dd0b      	ble.n	8000ab0 <__aeabi_i2f+0x48>
 8000a98:	2305      	movs	r3, #5
 8000a9a:	0029      	movs	r1, r5
 8000a9c:	1a1b      	subs	r3, r3, r0
 8000a9e:	40d9      	lsrs	r1, r3
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	331b      	adds	r3, #27
 8000aa4:	409d      	lsls	r5, r3
 8000aa6:	002b      	movs	r3, r5
 8000aa8:	1e5d      	subs	r5, r3, #1
 8000aaa:	41ab      	sbcs	r3, r5
 8000aac:	4319      	orrs	r1, r3
 8000aae:	000d      	movs	r5, r1
 8000ab0:	2805      	cmp	r0, #5
 8000ab2:	dd01      	ble.n	8000ab8 <__aeabi_i2f+0x50>
 8000ab4:	1f43      	subs	r3, r0, #5
 8000ab6:	409d      	lsls	r5, r3
 8000ab8:	002b      	movs	r3, r5
 8000aba:	490f      	ldr	r1, [pc, #60]	; (8000af8 <__aeabi_i2f+0x90>)
 8000abc:	400b      	ands	r3, r1
 8000abe:	076e      	lsls	r6, r5, #29
 8000ac0:	d009      	beq.n	8000ad6 <__aeabi_i2f+0x6e>
 8000ac2:	260f      	movs	r6, #15
 8000ac4:	4035      	ands	r5, r6
 8000ac6:	2d04      	cmp	r5, #4
 8000ac8:	d005      	beq.n	8000ad6 <__aeabi_i2f+0x6e>
 8000aca:	3304      	adds	r3, #4
 8000acc:	015d      	lsls	r5, r3, #5
 8000ace:	d502      	bpl.n	8000ad6 <__aeabi_i2f+0x6e>
 8000ad0:	229f      	movs	r2, #159	; 0x9f
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	1a12      	subs	r2, r2, r0
 8000ad6:	019b      	lsls	r3, r3, #6
 8000ad8:	0a58      	lsrs	r0, r3, #9
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	0240      	lsls	r0, r0, #9
 8000ade:	05d2      	lsls	r2, r2, #23
 8000ae0:	0a40      	lsrs	r0, r0, #9
 8000ae2:	07e4      	lsls	r4, r4, #31
 8000ae4:	4310      	orrs	r0, r2
 8000ae6:	4320      	orrs	r0, r4
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	2400      	movs	r4, #0
 8000aec:	2200      	movs	r2, #0
 8000aee:	2000      	movs	r0, #0
 8000af0:	e7f4      	b.n	8000adc <__aeabi_i2f+0x74>
 8000af2:	0268      	lsls	r0, r5, #9
 8000af4:	0a40      	lsrs	r0, r0, #9
 8000af6:	e7f1      	b.n	8000adc <__aeabi_i2f+0x74>
 8000af8:	fbffffff 	.word	0xfbffffff

08000afc <__clzsi2>:
 8000afc:	211c      	movs	r1, #28
 8000afe:	2301      	movs	r3, #1
 8000b00:	041b      	lsls	r3, r3, #16
 8000b02:	4298      	cmp	r0, r3
 8000b04:	d301      	bcc.n	8000b0a <__clzsi2+0xe>
 8000b06:	0c00      	lsrs	r0, r0, #16
 8000b08:	3910      	subs	r1, #16
 8000b0a:	0a1b      	lsrs	r3, r3, #8
 8000b0c:	4298      	cmp	r0, r3
 8000b0e:	d301      	bcc.n	8000b14 <__clzsi2+0x18>
 8000b10:	0a00      	lsrs	r0, r0, #8
 8000b12:	3908      	subs	r1, #8
 8000b14:	091b      	lsrs	r3, r3, #4
 8000b16:	4298      	cmp	r0, r3
 8000b18:	d301      	bcc.n	8000b1e <__clzsi2+0x22>
 8000b1a:	0900      	lsrs	r0, r0, #4
 8000b1c:	3904      	subs	r1, #4
 8000b1e:	a202      	add	r2, pc, #8	; (adr r2, 8000b28 <__clzsi2+0x2c>)
 8000b20:	5c10      	ldrb	r0, [r2, r0]
 8000b22:	1840      	adds	r0, r0, r1
 8000b24:	4770      	bx	lr
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	02020304 	.word	0x02020304
 8000b2c:	01010101 	.word	0x01010101
	...

08000b38 <__clzdi2>:
 8000b38:	b510      	push	{r4, lr}
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d103      	bne.n	8000b46 <__clzdi2+0xe>
 8000b3e:	f7ff ffdd 	bl	8000afc <__clzsi2>
 8000b42:	3020      	adds	r0, #32
 8000b44:	e002      	b.n	8000b4c <__clzdi2+0x14>
 8000b46:	1c08      	adds	r0, r1, #0
 8000b48:	f7ff ffd8 	bl	8000afc <__clzsi2>
 8000b4c:	bd10      	pop	{r4, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)

08000b50 <LSM6DS3_ACC_GYRO_WriteReg>:
*                                 length of buffer
* Output      : None
* Return      : None
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_WriteReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	0008      	movs	r0, r1
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	250b      	movs	r5, #11
 8000b60:	197b      	adds	r3, r7, r5
 8000b62:	1c02      	adds	r2, r0, #0
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	2008      	movs	r0, #8
 8000b68:	183b      	adds	r3, r7, r0
 8000b6a:	1c0a      	adds	r2, r1, #0
 8000b6c:	801a      	strh	r2, [r3, #0]

  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8000b6e:	183b      	adds	r3, r7, r0
 8000b70:	881c      	ldrh	r4, [r3, #0]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	197b      	adds	r3, r7, r5
 8000b76:	7819      	ldrb	r1, [r3, #0]
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	0023      	movs	r3, r4
 8000b7c:	f003 ff28 	bl	80049d0 <Sensor_IO_Write>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <LSM6DS3_ACC_GYRO_WriteReg+0x38>
  {
    return MEMS_ERROR;
 8000b84:	2300      	movs	r3, #0
 8000b86:	e000      	b.n	8000b8a <LSM6DS3_ACC_GYRO_WriteReg+0x3a>
  }
  else
  {
    return MEMS_SUCCESS;
 8000b88:	2301      	movs	r3, #1
  }
}
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b004      	add	sp, #16
 8000b90:	bdb0      	pop	{r4, r5, r7, pc}

08000b92 <LSM6DS3_ACC_GYRO_ReadReg>:
*                                 length of buffer
* Output      : None
* Return      : None
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_ReadReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 8000b92:	b5b0      	push	{r4, r5, r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	0008      	movs	r0, r1
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	250b      	movs	r5, #11
 8000ba2:	197b      	adds	r3, r7, r5
 8000ba4:	1c02      	adds	r2, r0, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	2008      	movs	r0, #8
 8000baa:	183b      	adds	r3, r7, r0
 8000bac:	1c0a      	adds	r2, r1, #0
 8000bae:	801a      	strh	r2, [r3, #0]

  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8000bb0:	183b      	adds	r3, r7, r0
 8000bb2:	881c      	ldrh	r4, [r3, #0]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	197b      	adds	r3, r7, r5
 8000bb8:	7819      	ldrb	r1, [r3, #0]
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	0023      	movs	r3, r4
 8000bbe:	f003 ff2d 	bl	8004a1c <Sensor_IO_Read>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d001      	beq.n	8000bca <LSM6DS3_ACC_GYRO_ReadReg+0x38>
  {
    return MEMS_ERROR;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <LSM6DS3_ACC_GYRO_ReadReg+0x3a>
  }
  else
  {
    return MEMS_SUCCESS;
 8000bca:	2301      	movs	r3, #1
  }
}
 8000bcc:	0018      	movs	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b004      	add	sp, #16
 8000bd2:	bdb0      	pop	{r4, r5, r7, pc}

08000bd4 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>:
* Input          : Pointer to u8_t
* Output         : Status of WHO_AM_I_BIT
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_WHO_AM_I(void *handle, u8_t *value)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WHO_AM_I_REG, (u8_t *)value, 1))
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	2301      	movs	r3, #1
 8000be4:	210f      	movs	r1, #15
 8000be6:	f7ff ffd4 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d101      	bne.n	8000bf2 <LSM6DS3_ACC_GYRO_R_WHO_AM_I+0x1e>
  {
    return MEMS_ERROR;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e008      	b.n	8000c04 <LSM6DS3_ACC_GYRO_R_WHO_AM_I+0x30>
  }

  *value &= LSM6DS3_ACC_GYRO_WHO_AM_I_BIT_MASK; //coerce
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
  *value = *value >> LSM6DS3_ACC_GYRO_WHO_AM_I_BIT_POSITION; //mask
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b002      	add	sp, #8
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <LSM6DS3_ACC_GYRO_W_BDU>:
* Input          : LSM6DS3_ACC_GYRO_BDU_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_BDU(void *handle, LSM6DS3_ACC_GYRO_BDU_t newValue)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	000a      	movs	r2, r1
 8000c16:	1cfb      	adds	r3, r7, #3
 8000c18:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1))
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	18fa      	adds	r2, r7, r3
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	2301      	movs	r3, #1
 8000c22:	2112      	movs	r1, #18
 8000c24:	f7ff ffb5 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d101      	bne.n	8000c30 <LSM6DS3_ACC_GYRO_W_BDU+0x24>
  {
    return MEMS_ERROR;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e01a      	b.n	8000c66 <LSM6DS3_ACC_GYRO_W_BDU+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_BDU_MASK;
 8000c30:	210f      	movs	r1, #15
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2240      	movs	r2, #64	; 0x40
 8000c38:	4393      	bics	r3, r2
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	1cfb      	adds	r3, r7, #3
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1))
 8000c50:	187a      	adds	r2, r7, r1
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	2301      	movs	r3, #1
 8000c56:	2112      	movs	r1, #18
 8000c58:	f7ff ff7a 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d101      	bne.n	8000c64 <LSM6DS3_ACC_GYRO_W_BDU+0x58>
  {
    return MEMS_ERROR;
 8000c60:	2300      	movs	r3, #0
 8000c62:	e000      	b.n	8000c66 <LSM6DS3_ACC_GYRO_W_BDU+0x5a>
  }

  return MEMS_SUCCESS;
 8000c64:	2301      	movs	r3, #1
}
 8000c66:	0018      	movs	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b004      	add	sp, #16
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <LSM6DS3_ACC_GYRO_W_FS_XL>:
* Input          : LSM6DS3_ACC_GYRO_FS_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FS_XL(void *handle, LSM6DS3_ACC_GYRO_FS_XL_t newValue)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	000a      	movs	r2, r1
 8000c78:	1cfb      	adds	r3, r7, #3
 8000c7a:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1))
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fa      	adds	r2, r7, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	2301      	movs	r3, #1
 8000c84:	2110      	movs	r1, #16
 8000c86:	f7ff ff84 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d101      	bne.n	8000c92 <LSM6DS3_ACC_GYRO_W_FS_XL+0x24>
  {
    return MEMS_ERROR;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e01a      	b.n	8000cc8 <LSM6DS3_ACC_GYRO_W_FS_XL+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_FS_XL_MASK;
 8000c92:	210f      	movs	r1, #15
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	220c      	movs	r2, #12
 8000c9a:	4393      	bics	r3, r2
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	1cfb      	adds	r3, r7, #3
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1))
 8000cb2:	187a      	adds	r2, r7, r1
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	2110      	movs	r1, #16
 8000cba:	f7ff ff49 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d101      	bne.n	8000cc6 <LSM6DS3_ACC_GYRO_W_FS_XL+0x58>
  {
    return MEMS_ERROR;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <LSM6DS3_ACC_GYRO_W_FS_XL+0x5a>
  }

  return MEMS_SUCCESS;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b004      	add	sp, #16
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <LSM6DS3_ACC_GYRO_R_FS_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_XL_t
* Output         : Status of FS_XL see LSM6DS3_ACC_GYRO_FS_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_XL(void *handle, LSM6DS3_ACC_GYRO_FS_XL_t *value)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, (u8_t *)value, 1))
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	2301      	movs	r3, #1
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	f7ff ff56 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d101      	bne.n	8000cee <LSM6DS3_ACC_GYRO_R_FS_XL+0x1e>
  {
    return MEMS_ERROR;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e007      	b.n	8000cfe <LSM6DS3_ACC_GYRO_R_FS_XL+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_FS_XL_MASK; //mask
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <LSM6DS3_ACC_GYRO_GetRawAccData>:
* Input          : pointer to [u8_t]
* Output         : GetAccData buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_GetRawAccData(void *handle, u8_t *buff)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b084      	sub	sp, #16
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
  u8_t i, j, k;
  u8_t numberOfByteForDimension;

  numberOfByteForDimension = 6 / 3;
 8000d10:	230c      	movs	r3, #12
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	2202      	movs	r2, #2
 8000d16:	701a      	strb	r2, [r3, #0]

  k = 0;
 8000d18:	230d      	movs	r3, #13
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 3; i++)
 8000d20:	230f      	movs	r3, #15
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e02f      	b.n	8000d8a <LSM6DS3_ACC_GYRO_GetRawAccData+0x84>
  {
    for (j = 0; j < numberOfByteForDimension; j++)
 8000d2a:	230e      	movs	r3, #14
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	e01c      	b.n	8000d6e <LSM6DS3_ACC_GYRO_GetRawAccData+0x68>
    {
      if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_OUTX_L_XL + k, &buff[k], 1))
 8000d34:	220d      	movs	r2, #13
 8000d36:	18bb      	adds	r3, r7, r2
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	3328      	adds	r3, #40	; 0x28
 8000d3c:	b2d9      	uxtb	r1, r3
 8000d3e:	18bb      	adds	r3, r7, r2
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	18d2      	adds	r2, r2, r3
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	f7ff ff22 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d101      	bne.n	8000d56 <LSM6DS3_ACC_GYRO_GetRawAccData+0x50>
      {
        return MEMS_ERROR;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e01f      	b.n	8000d96 <LSM6DS3_ACC_GYRO_GetRawAccData+0x90>
      }
      k++;
 8000d56:	210d      	movs	r1, #13
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	3201      	adds	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < numberOfByteForDimension; j++)
 8000d62:	210e      	movs	r1, #14
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	781a      	ldrb	r2, [r3, #0]
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	3201      	adds	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	230e      	movs	r3, #14
 8000d70:	18fa      	adds	r2, r7, r3
 8000d72:	230c      	movs	r3, #12
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	7812      	ldrb	r2, [r2, #0]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d3da      	bcc.n	8000d34 <LSM6DS3_ACC_GYRO_GetRawAccData+0x2e>
  for (i = 0; i < 3; i++)
 8000d7e:	210f      	movs	r1, #15
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	3201      	adds	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d9ca      	bls.n	8000d2a <LSM6DS3_ACC_GYRO_GetRawAccData+0x24>
    }
  }

  return MEMS_SUCCESS;
 8000d94:	2301      	movs	r3, #1
}
 8000d96:	0018      	movs	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b004      	add	sp, #16
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <LSM6DS3_ACC_GYRO_W_ODR_XL>:
* Input          : LSM6DS3_ACC_GYRO_ODR_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_XL(void *handle, LSM6DS3_ACC_GYRO_ODR_XL_t newValue)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	000a      	movs	r2, r1
 8000da8:	1cfb      	adds	r3, r7, #3
 8000daa:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1))
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fa      	adds	r2, r7, r3
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	2301      	movs	r3, #1
 8000db4:	2110      	movs	r1, #16
 8000db6:	f7ff feec 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d101      	bne.n	8000dc2 <LSM6DS3_ACC_GYRO_W_ODR_XL+0x24>
  {
    return MEMS_ERROR;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e01a      	b.n	8000df8 <LSM6DS3_ACC_GYRO_W_ODR_XL+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_ODR_XL_MASK;
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	220f      	movs	r2, #15
 8000dca:	4013      	ands	r3, r2
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	1cfb      	adds	r3, r7, #3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1))
 8000de2:	187a      	adds	r2, r7, r1
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	2301      	movs	r3, #1
 8000de8:	2110      	movs	r1, #16
 8000dea:	f7ff feb1 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8000dee:	1e03      	subs	r3, r0, #0
 8000df0:	d101      	bne.n	8000df6 <LSM6DS3_ACC_GYRO_W_ODR_XL+0x58>
  {
    return MEMS_ERROR;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <LSM6DS3_ACC_GYRO_W_ODR_XL+0x5a>
  }

  return MEMS_SUCCESS;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b004      	add	sp, #16
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <LSM6DS3_ACC_GYRO_R_ODR_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_ODR_XL_t
* Output         : Status of ODR_XL see LSM6DS3_ACC_GYRO_ODR_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_ODR_XL(void *handle, LSM6DS3_ACC_GYRO_ODR_XL_t *value)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, (u8_t *)value, 1))
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	2110      	movs	r1, #16
 8000e12:	f7ff febe 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d101      	bne.n	8000e1e <LSM6DS3_ACC_GYRO_R_ODR_XL+0x1e>
  {
    return MEMS_ERROR;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e007      	b.n	8000e2e <LSM6DS3_ACC_GYRO_R_ODR_XL+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_ODR_XL_MASK; //mask
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	220f      	movs	r2, #15
 8000e24:	4393      	bics	r3, r2
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 8000e2c:	2301      	movs	r3, #1
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <LSM6DS3_ACC_GYRO_W_EmbeddedAccess>:
* Input          : LSM6DS3_ACC_GYRO_EMB_ACC_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_EmbeddedAccess(void *handle, LSM6DS3_ACC_GYRO_EMB_ACC_t newValue)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	000a      	movs	r2, r1
 8000e40:	1cfb      	adds	r3, r7, #3
 8000e42:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FUNC_CFG_ACCESS, &value, 1))
 8000e44:	230f      	movs	r3, #15
 8000e46:	18fa      	adds	r2, r7, r3
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	f7ff fea0 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d101      	bne.n	8000e5a <LSM6DS3_ACC_GYRO_W_EmbeddedAccess+0x24>
  {
    return MEMS_ERROR;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e01a      	b.n	8000e90 <LSM6DS3_ACC_GYRO_W_EmbeddedAccess+0x5a>
  }

  value &= ~LSM6DSM_ACC_GYRO_EMB_ACC_MASK;
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	227f      	movs	r2, #127	; 0x7f
 8000e62:	4013      	ands	r3, r2
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	1cfb      	adds	r3, r7, #3
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FUNC_CFG_ACCESS, &value, 1))
 8000e7a:	187a      	adds	r2, r7, r1
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2101      	movs	r1, #1
 8000e82:	f7ff fe65 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d101      	bne.n	8000e8e <LSM6DS3_ACC_GYRO_W_EmbeddedAccess+0x58>
  {
    return MEMS_ERROR;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <LSM6DS3_ACC_GYRO_W_EmbeddedAccess+0x5a>
  }

  return MEMS_SUCCESS;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b004      	add	sp, #16
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark>:
* Input          : u16_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FIFO_Watermark(void *handle, u16_t newValue)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	000a      	movs	r2, r1
 8000ea2:	1cbb      	adds	r3, r7, #2
 8000ea4:	801a      	strh	r2, [r3, #0]
  u8_t valueH, valueL;
  u8_t value;

  valueL = newValue & 0xFF;
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	1cba      	adds	r2, r7, #2
 8000eac:	8812      	ldrh	r2, [r2, #0]
 8000eae:	701a      	strb	r2, [r3, #0]
  valueH = (newValue >> 8) & 0xFF;
 8000eb0:	1cbb      	adds	r3, r7, #2
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	230e      	movs	r3, #14
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	701a      	strb	r2, [r3, #0]

  /* Low part goes in FIFO_CTRL1 */
  valueL = valueL << LSM6DS3_ACC_GYRO_WTM_FIFO_CTRL1_POSITION; //mask
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	187a      	adds	r2, r7, r1
 8000ec2:	7812      	ldrb	r2, [r2, #0]
 8000ec4:	701a      	strb	r2, [r3, #0]
  valueL &= LSM6DS3_ACC_GYRO_WTM_FIFO_CTRL1_MASK; //coerce
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	187a      	adds	r2, r7, r1
 8000eca:	7812      	ldrb	r2, [r2, #0]
 8000ecc:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL1, &value, 1))
 8000ece:	230d      	movs	r3, #13
 8000ed0:	18fa      	adds	r2, r7, r3
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2106      	movs	r1, #6
 8000ed8:	f7ff fe5b 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d101      	bne.n	8000ee4 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark+0x4c>
  {
    return MEMS_ERROR;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	e048      	b.n	8000f76 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark+0xde>
  }

  value &= (u8_t)~LSM6DS3_ACC_GYRO_WTM_FIFO_CTRL1_MASK;
 8000ee4:	210d      	movs	r1, #13
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
  value |= valueL;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL1, &value, 1))
 8000efe:	187a      	adds	r2, r7, r1
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	2301      	movs	r3, #1
 8000f04:	2106      	movs	r1, #6
 8000f06:	f7ff fe23 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d101      	bne.n	8000f12 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark+0x7a>
  {
    return MEMS_ERROR;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e031      	b.n	8000f76 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark+0xde>
  }

  /* High part goes in FIFO_CTRL2 */
  valueH = valueH << LSM6DS3_ACC_GYRO_WTM_FIFO_CTRL2_POSITION; //mask
 8000f12:	210e      	movs	r1, #14
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	187a      	adds	r2, r7, r1
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	701a      	strb	r2, [r3, #0]
  valueH &= LSM6DS3_ACC_GYRO_WTM_FIFO_CTRL2_MASK; //coerce
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	187a      	adds	r2, r7, r1
 8000f20:	7812      	ldrb	r2, [r2, #0]
 8000f22:	210f      	movs	r1, #15
 8000f24:	400a      	ands	r2, r1
 8000f26:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL2, &value, 1))
 8000f28:	230d      	movs	r3, #13
 8000f2a:	18fa      	adds	r2, r7, r3
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	2107      	movs	r1, #7
 8000f32:	f7ff fe2e 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d101      	bne.n	8000f3e <LSM6DS3_ACC_GYRO_W_FIFO_Watermark+0xa6>
  {
    return MEMS_ERROR;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e01b      	b.n	8000f76 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark+0xde>
  }

  value &= ~LSM6DS3_ACC_GYRO_WTM_FIFO_CTRL2_MASK;
 8000f3e:	210d      	movs	r1, #13
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	220f      	movs	r2, #15
 8000f46:	4393      	bics	r3, r2
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	701a      	strb	r2, [r3, #0]
  value |= valueH;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	230e      	movs	r3, #14
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL2, &value, 1))
 8000f60:	187a      	adds	r2, r7, r1
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	2301      	movs	r3, #1
 8000f66:	2107      	movs	r1, #7
 8000f68:	f7ff fdf2 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8000f6c:	1e03      	subs	r3, r0, #0
 8000f6e:	d101      	bne.n	8000f74 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark+0xdc>
  {
    return MEMS_ERROR;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e000      	b.n	8000f76 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark+0xde>
  }

  return MEMS_SUCCESS;
 8000f74:	2301      	movs	r3, #1
}
 8000f76:	0018      	movs	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b004      	add	sp, #16
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL>:
* Input          : LSM6DS3_ACC_GYRO_DEC_FIFO_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL(void *handle, LSM6DS3_ACC_GYRO_DEC_FIFO_XL_t newValue)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	000a      	movs	r2, r1
 8000f88:	1cfb      	adds	r3, r7, #3
 8000f8a:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL3, &value, 1))
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	18fa      	adds	r2, r7, r3
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	2301      	movs	r3, #1
 8000f94:	2108      	movs	r1, #8
 8000f96:	f7ff fdfc 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8000f9a:	1e03      	subs	r3, r0, #0
 8000f9c:	d101      	bne.n	8000fa2 <LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL+0x24>
  {
    return MEMS_ERROR;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e01a      	b.n	8000fd8 <LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_DEC_FIFO_XL_MASK;
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2207      	movs	r2, #7
 8000faa:	4393      	bics	r3, r2
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	781a      	ldrb	r2, [r3, #0]
 8000fb6:	1cfb      	adds	r3, r7, #3
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL3, &value, 1))
 8000fc2:	187a      	adds	r2, r7, r1
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2108      	movs	r1, #8
 8000fca:	f7ff fdc1 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8000fce:	1e03      	subs	r3, r0, #0
 8000fd0:	d101      	bne.n	8000fd6 <LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL+0x58>
  {
    return MEMS_ERROR;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL+0x5a>
  }

  return MEMS_SUCCESS;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>:
* Input          : LSM6DS3_ACC_GYRO_FIFO_MODE_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FIFO_MODE(void *handle, LSM6DS3_ACC_GYRO_FIFO_MODE_t newValue)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	000a      	movs	r2, r1
 8000fea:	1cfb      	adds	r3, r7, #3
 8000fec:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1))
 8000fee:	230f      	movs	r3, #15
 8000ff0:	18fa      	adds	r2, r7, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	210a      	movs	r1, #10
 8000ff8:	f7ff fdcb 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d101      	bne.n	8001004 <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x24>
  {
    return MEMS_ERROR;
 8001000:	2300      	movs	r3, #0
 8001002:	e01a      	b.n	800103a <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_FIFO_MODE_MASK;
 8001004:	210f      	movs	r1, #15
 8001006:	187b      	adds	r3, r7, r1
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2207      	movs	r2, #7
 800100c:	4393      	bics	r3, r2
 800100e:	b2da      	uxtb	r2, r3
 8001010:	187b      	adds	r3, r7, r1
 8001012:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	1cfb      	adds	r3, r7, #3
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4313      	orrs	r3, r2
 800101e:	b2da      	uxtb	r2, r3
 8001020:	187b      	adds	r3, r7, r1
 8001022:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1))
 8001024:	187a      	adds	r2, r7, r1
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	2301      	movs	r3, #1
 800102a:	210a      	movs	r1, #10
 800102c:	f7ff fd90 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001030:	1e03      	subs	r3, r0, #0
 8001032:	d101      	bne.n	8001038 <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x58>
  {
    return MEMS_ERROR;
 8001034:	2300      	movs	r3, #0
 8001036:	e000      	b.n	800103a <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x5a>
  }

  return MEMS_SUCCESS;
 8001038:	2301      	movs	r3, #1
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}

08001042 <LSM6DS3_ACC_GYRO_W_ODR_FIFO>:
* Input          : LSM6DS3_ACC_GYRO_ODR_FIFO_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_FIFO(void *handle, LSM6DS3_ACC_GYRO_ODR_FIFO_t newValue)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	000a      	movs	r2, r1
 800104c:	1cfb      	adds	r3, r7, #3
 800104e:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1))
 8001050:	230f      	movs	r3, #15
 8001052:	18fa      	adds	r2, r7, r3
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	2301      	movs	r3, #1
 8001058:	210a      	movs	r1, #10
 800105a:	f7ff fd9a 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 800105e:	1e03      	subs	r3, r0, #0
 8001060:	d101      	bne.n	8001066 <LSM6DS3_ACC_GYRO_W_ODR_FIFO+0x24>
  {
    return MEMS_ERROR;
 8001062:	2300      	movs	r3, #0
 8001064:	e01a      	b.n	800109c <LSM6DS3_ACC_GYRO_W_ODR_FIFO+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_ODR_FIFO_MASK;
 8001066:	210f      	movs	r1, #15
 8001068:	187b      	adds	r3, r7, r1
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2278      	movs	r2, #120	; 0x78
 800106e:	4393      	bics	r3, r2
 8001070:	b2da      	uxtb	r2, r3
 8001072:	187b      	adds	r3, r7, r1
 8001074:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001076:	187b      	adds	r3, r7, r1
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	1cfb      	adds	r3, r7, #3
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4313      	orrs	r3, r2
 8001080:	b2da      	uxtb	r2, r3
 8001082:	187b      	adds	r3, r7, r1
 8001084:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1))
 8001086:	187a      	adds	r2, r7, r1
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	2301      	movs	r3, #1
 800108c:	210a      	movs	r1, #10
 800108e:	f7ff fd5f 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001092:	1e03      	subs	r3, r0, #0
 8001094:	d101      	bne.n	800109a <LSM6DS3_ACC_GYRO_W_ODR_FIFO+0x58>
  {
    return MEMS_ERROR;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <LSM6DS3_ACC_GYRO_W_ODR_FIFO+0x5a>
  }

  return MEMS_SUCCESS;
 800109a:	2301      	movs	r3, #1
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	b004      	add	sp, #16
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <LSM6DS3_ACC_GYRO_W_FSS5_on_INT1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_FSS5_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FSS5_on_INT1(void *handle, LSM6DS3_ACC_GYRO_INT1_FSS5_t newValue)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	000a      	movs	r2, r1
 80010ae:	1cfb      	adds	r3, r7, #3
 80010b0:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_INT1_CTRL, &value, 1))
 80010b2:	230f      	movs	r3, #15
 80010b4:	18fa      	adds	r2, r7, r3
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	2301      	movs	r3, #1
 80010ba:	210d      	movs	r1, #13
 80010bc:	f7ff fd69 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80010c0:	1e03      	subs	r3, r0, #0
 80010c2:	d101      	bne.n	80010c8 <LSM6DS3_ACC_GYRO_W_FSS5_on_INT1+0x24>
  {
    return MEMS_ERROR;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e01a      	b.n	80010fe <LSM6DS3_ACC_GYRO_W_FSS5_on_INT1+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT1_FSS5_MASK;
 80010c8:	210f      	movs	r1, #15
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2220      	movs	r2, #32
 80010d0:	4393      	bics	r3, r2
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	1cfb      	adds	r3, r7, #3
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_INT1_CTRL, &value, 1))
 80010e8:	187a      	adds	r2, r7, r1
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	2301      	movs	r3, #1
 80010ee:	210d      	movs	r1, #13
 80010f0:	f7ff fd2e 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 80010f4:	1e03      	subs	r3, r0, #0
 80010f6:	d101      	bne.n	80010fc <LSM6DS3_ACC_GYRO_W_FSS5_on_INT1+0x58>
  {
    return MEMS_ERROR;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e000      	b.n	80010fe <LSM6DS3_ACC_GYRO_W_FSS5_on_INT1+0x5a>
  }

  return MEMS_SUCCESS;
 80010fc:	2301      	movs	r3, #1
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b004      	add	sp, #16
 8001104:	bd80      	pop	{r7, pc}

08001106 <LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_PEDO_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1(void *handle, LSM6DS3_ACC_GYRO_INT1_PEDO_t newValue)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	000a      	movs	r2, r1
 8001110:	1cfb      	adds	r3, r7, #3
 8001112:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_INT1_CTRL, &value, 1))
 8001114:	230f      	movs	r3, #15
 8001116:	18fa      	adds	r2, r7, r3
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	2301      	movs	r3, #1
 800111c:	210d      	movs	r1, #13
 800111e:	f7ff fd38 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d101      	bne.n	800112a <LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1+0x24>
  {
    return MEMS_ERROR;
 8001126:	2300      	movs	r3, #0
 8001128:	e01a      	b.n	8001160 <LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT1_PEDO_MASK;
 800112a:	210f      	movs	r1, #15
 800112c:	187b      	adds	r3, r7, r1
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	227f      	movs	r2, #127	; 0x7f
 8001132:	4013      	ands	r3, r2
 8001134:	b2da      	uxtb	r2, r3
 8001136:	187b      	adds	r3, r7, r1
 8001138:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	1cfb      	adds	r3, r7, #3
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4313      	orrs	r3, r2
 8001144:	b2da      	uxtb	r2, r3
 8001146:	187b      	adds	r3, r7, r1
 8001148:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_INT1_CTRL, &value, 1))
 800114a:	187a      	adds	r2, r7, r1
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	2301      	movs	r3, #1
 8001150:	210d      	movs	r1, #13
 8001152:	f7ff fcfd 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001156:	1e03      	subs	r3, r0, #0
 8001158:	d101      	bne.n	800115e <LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1+0x58>
  {
    return MEMS_ERROR;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1+0x5a>
  }

  return MEMS_SUCCESS;
 800115e:	2301      	movs	r3, #1
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b004      	add	sp, #16
 8001166:	bd80      	pop	{r7, pc}

08001168 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>:
* Input          : LSM6DS3_ACC_GYRO_IF_INC_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_IF_Addr_Incr(void *handle, LSM6DS3_ACC_GYRO_IF_INC_t newValue)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	000a      	movs	r2, r1
 8001172:	1cfb      	adds	r3, r7, #3
 8001174:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1))
 8001176:	230f      	movs	r3, #15
 8001178:	18fa      	adds	r2, r7, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	2301      	movs	r3, #1
 800117e:	2112      	movs	r1, #18
 8001180:	f7ff fd07 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001184:	1e03      	subs	r3, r0, #0
 8001186:	d101      	bne.n	800118c <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x24>
  {
    return MEMS_ERROR;
 8001188:	2300      	movs	r3, #0
 800118a:	e01a      	b.n	80011c2 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_IF_INC_MASK;
 800118c:	210f      	movs	r1, #15
 800118e:	187b      	adds	r3, r7, r1
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2204      	movs	r2, #4
 8001194:	4393      	bics	r3, r2
 8001196:	b2da      	uxtb	r2, r3
 8001198:	187b      	adds	r3, r7, r1
 800119a:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 800119c:	187b      	adds	r3, r7, r1
 800119e:	781a      	ldrb	r2, [r3, #0]
 80011a0:	1cfb      	adds	r3, r7, #3
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1))
 80011ac:	187a      	adds	r2, r7, r1
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	2301      	movs	r3, #1
 80011b2:	2112      	movs	r1, #18
 80011b4:	f7ff fccc 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d101      	bne.n	80011c0 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x58>
  {
    return MEMS_ERROR;
 80011bc:	2300      	movs	r3, #0
 80011be:	e000      	b.n	80011c2 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x5a>
  }

  return MEMS_SUCCESS;
 80011c0:	2301      	movs	r3, #1
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b004      	add	sp, #16
 80011c8:	bd80      	pop	{r7, pc}

080011ca <LSM6DS3_ACC_GYRO_W_STOP_ON_FTH>:
* Input          : LSM6DS3_ACC_GYRO_STOP_ON_FTH_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_STOP_ON_FTH(void *handle, LSM6DS3_ACC_GYRO_STOP_ON_FTH_t newValue)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	000a      	movs	r2, r1
 80011d4:	1cfb      	adds	r3, r7, #3
 80011d6:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1))
 80011d8:	230f      	movs	r3, #15
 80011da:	18fa      	adds	r2, r7, r3
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	2301      	movs	r3, #1
 80011e0:	2113      	movs	r1, #19
 80011e2:	f7ff fcd6 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d101      	bne.n	80011ee <LSM6DS3_ACC_GYRO_W_STOP_ON_FTH+0x24>
  {
    return MEMS_ERROR;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e01a      	b.n	8001224 <LSM6DS3_ACC_GYRO_W_STOP_ON_FTH+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_STOP_ON_FTH_MASK;
 80011ee:	210f      	movs	r1, #15
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2201      	movs	r2, #1
 80011f6:	4393      	bics	r3, r2
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	1cfb      	adds	r3, r7, #3
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4313      	orrs	r3, r2
 8001208:	b2da      	uxtb	r2, r3
 800120a:	187b      	adds	r3, r7, r1
 800120c:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1))
 800120e:	187a      	adds	r2, r7, r1
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	2301      	movs	r3, #1
 8001214:	2113      	movs	r1, #19
 8001216:	f7ff fc9b 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d101      	bne.n	8001222 <LSM6DS3_ACC_GYRO_W_STOP_ON_FTH+0x58>
  {
    return MEMS_ERROR;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <LSM6DS3_ACC_GYRO_W_STOP_ON_FTH+0x5a>
  }

  return MEMS_SUCCESS;
 8001222:	2301      	movs	r3, #1
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b004      	add	sp, #16
 800122a:	bd80      	pop	{r7, pc}

0800122c <LSM6DS3_ACC_GYRO_W_SelfTest_XL>:
* Input          : LSM6DS3_ACC_GYRO_ST_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SelfTest_XL(void *handle, LSM6DS3_ACC_GYRO_ST_XL_t newValue)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	000a      	movs	r2, r1
 8001236:	1cfb      	adds	r3, r7, #3
 8001238:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL5_C, &value, 1))
 800123a:	230f      	movs	r3, #15
 800123c:	18fa      	adds	r2, r7, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	2301      	movs	r3, #1
 8001242:	2114      	movs	r1, #20
 8001244:	f7ff fca5 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001248:	1e03      	subs	r3, r0, #0
 800124a:	d101      	bne.n	8001250 <LSM6DS3_ACC_GYRO_W_SelfTest_XL+0x24>
  {
    return MEMS_ERROR;
 800124c:	2300      	movs	r3, #0
 800124e:	e01a      	b.n	8001286 <LSM6DS3_ACC_GYRO_W_SelfTest_XL+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_ST_XL_MASK;
 8001250:	210f      	movs	r1, #15
 8001252:	187b      	adds	r3, r7, r1
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2203      	movs	r2, #3
 8001258:	4393      	bics	r3, r2
 800125a:	b2da      	uxtb	r2, r3
 800125c:	187b      	adds	r3, r7, r1
 800125e:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001260:	187b      	adds	r3, r7, r1
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	1cfb      	adds	r3, r7, #3
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4313      	orrs	r3, r2
 800126a:	b2da      	uxtb	r2, r3
 800126c:	187b      	adds	r3, r7, r1
 800126e:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL5_C, &value, 1))
 8001270:	187a      	adds	r2, r7, r1
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	2301      	movs	r3, #1
 8001276:	2114      	movs	r1, #20
 8001278:	f7ff fc6a 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 800127c:	1e03      	subs	r3, r0, #0
 800127e:	d101      	bne.n	8001284 <LSM6DS3_ACC_GYRO_W_SelfTest_XL+0x58>
  {
    return MEMS_ERROR;
 8001280:	2300      	movs	r3, #0
 8001282:	e000      	b.n	8001286 <LSM6DS3_ACC_GYRO_W_SelfTest_XL+0x5a>
  }

  return MEMS_SUCCESS;
 8001284:	2301      	movs	r3, #1
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b004      	add	sp, #16
 800128c:	bd80      	pop	{r7, pc}

0800128e <LSM6DS3_ACC_GYRO_W_XEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_XEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_XEN_XL(void *handle, LSM6DS3_ACC_GYRO_XEN_XL_t newValue)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	000a      	movs	r2, r1
 8001298:	1cfb      	adds	r3, r7, #3
 800129a:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1))
 800129c:	230f      	movs	r3, #15
 800129e:	18fa      	adds	r2, r7, r3
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	2301      	movs	r3, #1
 80012a4:	2118      	movs	r1, #24
 80012a6:	f7ff fc74 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80012aa:	1e03      	subs	r3, r0, #0
 80012ac:	d101      	bne.n	80012b2 <LSM6DS3_ACC_GYRO_W_XEN_XL+0x24>
  {
    return MEMS_ERROR;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e01a      	b.n	80012e8 <LSM6DS3_ACC_GYRO_W_XEN_XL+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_XEN_XL_MASK;
 80012b2:	210f      	movs	r1, #15
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2208      	movs	r2, #8
 80012ba:	4393      	bics	r3, r2
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	1cfb      	adds	r3, r7, #3
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1))
 80012d2:	187a      	adds	r2, r7, r1
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	2301      	movs	r3, #1
 80012d8:	2118      	movs	r1, #24
 80012da:	f7ff fc39 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 80012de:	1e03      	subs	r3, r0, #0
 80012e0:	d101      	bne.n	80012e6 <LSM6DS3_ACC_GYRO_W_XEN_XL+0x58>
  {
    return MEMS_ERROR;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <LSM6DS3_ACC_GYRO_W_XEN_XL+0x5a>
  }

  return MEMS_SUCCESS;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b004      	add	sp, #16
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <LSM6DS3_ACC_GYRO_R_XEN_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_XEN_XL_t
* Output         : Status of XEN_XL see LSM6DS3_ACC_GYRO_XEN_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_XEN_XL(void *handle, LSM6DS3_ACC_GYRO_XEN_XL_t *value)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, (u8_t *)value, 1))
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	2301      	movs	r3, #1
 8001300:	2118      	movs	r1, #24
 8001302:	f7ff fc46 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d101      	bne.n	800130e <LSM6DS3_ACC_GYRO_R_XEN_XL+0x1e>
  {
    return MEMS_ERROR;
 800130a:	2300      	movs	r3, #0
 800130c:	e007      	b.n	800131e <LSM6DS3_ACC_GYRO_R_XEN_XL+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_XEN_XL_MASK; //mask
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2208      	movs	r2, #8
 8001314:	4013      	ands	r3, r2
 8001316:	b2da      	uxtb	r2, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 800131c:	2301      	movs	r3, #1
}
 800131e:	0018      	movs	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	b002      	add	sp, #8
 8001324:	bd80      	pop	{r7, pc}

08001326 <LSM6DS3_ACC_GYRO_W_YEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_YEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_YEN_XL(void *handle, LSM6DS3_ACC_GYRO_YEN_XL_t newValue)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	000a      	movs	r2, r1
 8001330:	1cfb      	adds	r3, r7, #3
 8001332:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1))
 8001334:	230f      	movs	r3, #15
 8001336:	18fa      	adds	r2, r7, r3
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	2301      	movs	r3, #1
 800133c:	2118      	movs	r1, #24
 800133e:	f7ff fc28 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d101      	bne.n	800134a <LSM6DS3_ACC_GYRO_W_YEN_XL+0x24>
  {
    return MEMS_ERROR;
 8001346:	2300      	movs	r3, #0
 8001348:	e01a      	b.n	8001380 <LSM6DS3_ACC_GYRO_W_YEN_XL+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_YEN_XL_MASK;
 800134a:	210f      	movs	r1, #15
 800134c:	187b      	adds	r3, r7, r1
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2210      	movs	r2, #16
 8001352:	4393      	bics	r3, r2
 8001354:	b2da      	uxtb	r2, r3
 8001356:	187b      	adds	r3, r7, r1
 8001358:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 800135a:	187b      	adds	r3, r7, r1
 800135c:	781a      	ldrb	r2, [r3, #0]
 800135e:	1cfb      	adds	r3, r7, #3
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4313      	orrs	r3, r2
 8001364:	b2da      	uxtb	r2, r3
 8001366:	187b      	adds	r3, r7, r1
 8001368:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1))
 800136a:	187a      	adds	r2, r7, r1
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	2301      	movs	r3, #1
 8001370:	2118      	movs	r1, #24
 8001372:	f7ff fbed 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d101      	bne.n	800137e <LSM6DS3_ACC_GYRO_W_YEN_XL+0x58>
  {
    return MEMS_ERROR;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <LSM6DS3_ACC_GYRO_W_YEN_XL+0x5a>
  }

  return MEMS_SUCCESS;
 800137e:	2301      	movs	r3, #1
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b004      	add	sp, #16
 8001386:	bd80      	pop	{r7, pc}

08001388 <LSM6DS3_ACC_GYRO_R_YEN_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_YEN_XL_t
* Output         : Status of YEN_XL see LSM6DS3_ACC_GYRO_YEN_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_YEN_XL(void *handle, LSM6DS3_ACC_GYRO_YEN_XL_t *value)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, (u8_t *)value, 1))
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	2301      	movs	r3, #1
 8001398:	2118      	movs	r1, #24
 800139a:	f7ff fbfa 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 800139e:	1e03      	subs	r3, r0, #0
 80013a0:	d101      	bne.n	80013a6 <LSM6DS3_ACC_GYRO_R_YEN_XL+0x1e>
  {
    return MEMS_ERROR;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e007      	b.n	80013b6 <LSM6DS3_ACC_GYRO_R_YEN_XL+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_YEN_XL_MASK; //mask
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2210      	movs	r2, #16
 80013ac:	4013      	ands	r3, r2
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}

080013be <LSM6DS3_ACC_GYRO_W_ZEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ZEN_XL(void *handle, LSM6DS3_ACC_GYRO_ZEN_XL_t newValue)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	000a      	movs	r2, r1
 80013c8:	1cfb      	adds	r3, r7, #3
 80013ca:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1))
 80013cc:	230f      	movs	r3, #15
 80013ce:	18fa      	adds	r2, r7, r3
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	2301      	movs	r3, #1
 80013d4:	2118      	movs	r1, #24
 80013d6:	f7ff fbdc 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d101      	bne.n	80013e2 <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x24>
  {
    return MEMS_ERROR;
 80013de:	2300      	movs	r3, #0
 80013e0:	e01a      	b.n	8001418 <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_ZEN_XL_MASK;
 80013e2:	210f      	movs	r1, #15
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2220      	movs	r2, #32
 80013ea:	4393      	bics	r3, r2
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	1cfb      	adds	r3, r7, #3
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1))
 8001402:	187a      	adds	r2, r7, r1
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	2301      	movs	r3, #1
 8001408:	2118      	movs	r1, #24
 800140a:	f7ff fba1 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d101      	bne.n	8001416 <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x58>
  {
    return MEMS_ERROR;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x5a>
  }

  return MEMS_SUCCESS;
 8001416:	2301      	movs	r3, #1
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b004      	add	sp, #16
 800141e:	bd80      	pop	{r7, pc}

08001420 <LSM6DS3_ACC_GYRO_R_ZEN_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_ZEN_XL_t
* Output         : Status of ZEN_XL see LSM6DS3_ACC_GYRO_ZEN_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_ZEN_XL(void *handle, LSM6DS3_ACC_GYRO_ZEN_XL_t *value)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, (u8_t *)value, 1))
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	2301      	movs	r3, #1
 8001430:	2118      	movs	r1, #24
 8001432:	f7ff fbae 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d101      	bne.n	800143e <LSM6DS3_ACC_GYRO_R_ZEN_XL+0x1e>
  {
    return MEMS_ERROR;
 800143a:	2300      	movs	r3, #0
 800143c:	e007      	b.n	800144e <LSM6DS3_ACC_GYRO_R_ZEN_XL+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_ZEN_XL_MASK; //mask
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2220      	movs	r2, #32
 8001444:	4013      	ands	r3, r2
 8001446:	b2da      	uxtb	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 800144c:	2301      	movs	r3, #1
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}

08001456 <LSM6DS3_ACC_GYRO_W_PedoStepReset>:
* Input          : LSM6DS3_ACC_GYRO_PEDO_RST_STEP_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_PedoStepReset(void *handle, LSM6DS3_ACC_GYRO_PEDO_RST_STEP_t newValue)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	000a      	movs	r2, r1
 8001460:	1cfb      	adds	r3, r7, #3
 8001462:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1))
 8001464:	230f      	movs	r3, #15
 8001466:	18fa      	adds	r2, r7, r3
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	2301      	movs	r3, #1
 800146c:	2119      	movs	r1, #25
 800146e:	f7ff fb90 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001472:	1e03      	subs	r3, r0, #0
 8001474:	d101      	bne.n	800147a <LSM6DS3_ACC_GYRO_W_PedoStepReset+0x24>
  {
    return MEMS_ERROR;
 8001476:	2300      	movs	r3, #0
 8001478:	e01a      	b.n	80014b0 <LSM6DS3_ACC_GYRO_W_PedoStepReset+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_PEDO_RST_STEP_MASK;
 800147a:	210f      	movs	r1, #15
 800147c:	187b      	adds	r3, r7, r1
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2202      	movs	r2, #2
 8001482:	4393      	bics	r3, r2
 8001484:	b2da      	uxtb	r2, r3
 8001486:	187b      	adds	r3, r7, r1
 8001488:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 800148a:	187b      	adds	r3, r7, r1
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	1cfb      	adds	r3, r7, #3
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4313      	orrs	r3, r2
 8001494:	b2da      	uxtb	r2, r3
 8001496:	187b      	adds	r3, r7, r1
 8001498:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1))
 800149a:	187a      	adds	r2, r7, r1
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	2301      	movs	r3, #1
 80014a0:	2119      	movs	r1, #25
 80014a2:	f7ff fb55 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d101      	bne.n	80014ae <LSM6DS3_ACC_GYRO_W_PedoStepReset+0x58>
  {
    return MEMS_ERROR;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <LSM6DS3_ACC_GYRO_W_PedoStepReset+0x5a>
  }

  return MEMS_SUCCESS;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	0018      	movs	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b004      	add	sp, #16
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <LSM6DS3_ACC_GYRO_W_FUNC_EN>:
* Input          : LSM6DS3_ACC_GYRO_FUNC_EN_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FUNC_EN(void *handle, LSM6DS3_ACC_GYRO_FUNC_EN_t newValue)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	000a      	movs	r2, r1
 80014c2:	1cfb      	adds	r3, r7, #3
 80014c4:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1))
 80014c6:	230f      	movs	r3, #15
 80014c8:	18fa      	adds	r2, r7, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	2301      	movs	r3, #1
 80014ce:	2119      	movs	r1, #25
 80014d0:	f7ff fb5f 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80014d4:	1e03      	subs	r3, r0, #0
 80014d6:	d101      	bne.n	80014dc <LSM6DS3_ACC_GYRO_W_FUNC_EN+0x24>
  {
    return MEMS_ERROR;
 80014d8:	2300      	movs	r3, #0
 80014da:	e01a      	b.n	8001512 <LSM6DS3_ACC_GYRO_W_FUNC_EN+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_FUNC_EN_MASK;
 80014dc:	210f      	movs	r1, #15
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2204      	movs	r2, #4
 80014e4:	4393      	bics	r3, r2
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	1cfb      	adds	r3, r7, #3
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1))
 80014fc:	187a      	adds	r2, r7, r1
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	2301      	movs	r3, #1
 8001502:	2119      	movs	r1, #25
 8001504:	f7ff fb24 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d101      	bne.n	8001510 <LSM6DS3_ACC_GYRO_W_FUNC_EN+0x58>
  {
    return MEMS_ERROR;
 800150c:	2300      	movs	r3, #0
 800150e:	e000      	b.n	8001512 <LSM6DS3_ACC_GYRO_W_FUNC_EN+0x5a>
  }

  return MEMS_SUCCESS;
 8001510:	2301      	movs	r3, #1
}
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	b004      	add	sp, #16
 8001518:	bd80      	pop	{r7, pc}

0800151a <LSM6DS3_ACC_GYRO_R_WU_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_WU_EV_STATUS_t
* Output         : Status of WU_EV_STATUS see LSM6DS3_ACC_GYRO_WU_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_WU_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_WU_EV_STATUS_t *value)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_SRC, (u8_t *)value, 1))
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	2301      	movs	r3, #1
 800152a:	211b      	movs	r1, #27
 800152c:	f7ff fb31 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001530:	1e03      	subs	r3, r0, #0
 8001532:	d101      	bne.n	8001538 <LSM6DS3_ACC_GYRO_R_WU_EV_STATUS+0x1e>
  {
    return MEMS_ERROR;
 8001534:	2300      	movs	r3, #0
 8001536:	e007      	b.n	8001548 <LSM6DS3_ACC_GYRO_R_WU_EV_STATUS+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_WU_EV_STATUS_MASK; //mask
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2208      	movs	r2, #8
 800153e:	4013      	ands	r3, r2
 8001540:	b2da      	uxtb	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 8001546:	2301      	movs	r3, #1
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b002      	add	sp, #8
 800154e:	bd80      	pop	{r7, pc}

08001550 <LSM6DS3_ACC_GYRO_R_FF_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FF_EV_STATUS_t
* Output         : Status of FF_EV_STATUS see LSM6DS3_ACC_GYRO_FF_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FF_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_FF_EV_STATUS_t *value)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_SRC, (u8_t *)value, 1))
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	2301      	movs	r3, #1
 8001560:	211b      	movs	r1, #27
 8001562:	f7ff fb16 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001566:	1e03      	subs	r3, r0, #0
 8001568:	d101      	bne.n	800156e <LSM6DS3_ACC_GYRO_R_FF_EV_STATUS+0x1e>
  {
    return MEMS_ERROR;
 800156a:	2300      	movs	r3, #0
 800156c:	e007      	b.n	800157e <LSM6DS3_ACC_GYRO_R_FF_EV_STATUS+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_FF_EV_STATUS_MASK; //mask
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2220      	movs	r2, #32
 8001574:	4013      	ands	r3, r2
 8001576:	b2da      	uxtb	r2, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 800157c:	2301      	movs	r3, #1
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}

08001586 <LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_t
* Output         : Status of DOUBLE_TAP_EV_STATUS see LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_t *value)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_SRC, (u8_t *)value, 1))
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	2301      	movs	r3, #1
 8001596:	211c      	movs	r1, #28
 8001598:	f7ff fafb 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 800159c:	1e03      	subs	r3, r0, #0
 800159e:	d101      	bne.n	80015a4 <LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS+0x1e>
  {
    return MEMS_ERROR;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e007      	b.n	80015b4 <LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_MASK; //mask
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2210      	movs	r2, #16
 80015aa:	4013      	ands	r3, r2
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b002      	add	sp, #8
 80015ba:	bd80      	pop	{r7, pc}

080015bc <LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_t
* Output         : Status of SINGLE_TAP_EV_STATUS see LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_t *value)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_SRC, (u8_t *)value, 1))
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	2301      	movs	r3, #1
 80015cc:	211c      	movs	r1, #28
 80015ce:	f7ff fae0 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80015d2:	1e03      	subs	r3, r0, #0
 80015d4:	d101      	bne.n	80015da <LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS+0x1e>
  {
    return MEMS_ERROR;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e007      	b.n	80015ea <LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_MASK; //mask
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2220      	movs	r2, #32
 80015e0:	4013      	ands	r3, r2
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	0018      	movs	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b002      	add	sp, #8
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <LSM6DS3_ACC_GYRO_R_DSD_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DSD_XL_t
* Output         : Status of DSD_XL see LSM6DS3_ACC_GYRO_DSD_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DSD_XL(void *handle, LSM6DS3_ACC_GYRO_DSD_XL_t *value)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1))
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	2301      	movs	r3, #1
 8001602:	211d      	movs	r1, #29
 8001604:	f7ff fac5 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001608:	1e03      	subs	r3, r0, #0
 800160a:	d101      	bne.n	8001610 <LSM6DS3_ACC_GYRO_R_DSD_XL+0x1e>
  {
    return MEMS_ERROR;
 800160c:	2300      	movs	r3, #0
 800160e:	e007      	b.n	8001620 <LSM6DS3_ACC_GYRO_R_DSD_XL+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_DSD_XL_MASK; //mask
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2201      	movs	r2, #1
 8001616:	4013      	ands	r3, r2
 8001618:	b2da      	uxtb	r2, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 800161e:	2301      	movs	r3, #1
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b002      	add	sp, #8
 8001626:	bd80      	pop	{r7, pc}

08001628 <LSM6DS3_ACC_GYRO_R_DSD_XH>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DSD_XH_t
* Output         : Status of DSD_XH see LSM6DS3_ACC_GYRO_DSD_XH_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DSD_XH(void *handle, LSM6DS3_ACC_GYRO_DSD_XH_t *value)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1))
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	2301      	movs	r3, #1
 8001638:	211d      	movs	r1, #29
 800163a:	f7ff faaa 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d101      	bne.n	8001646 <LSM6DS3_ACC_GYRO_R_DSD_XH+0x1e>
  {
    return MEMS_ERROR;
 8001642:	2300      	movs	r3, #0
 8001644:	e007      	b.n	8001656 <LSM6DS3_ACC_GYRO_R_DSD_XH+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_DSD_XH_MASK; //mask
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	b2da      	uxtb	r2, r3
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 8001654:	2301      	movs	r3, #1
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}

0800165e <LSM6DS3_ACC_GYRO_R_DSD_YL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DSD_YL_t
* Output         : Status of DSD_YL see LSM6DS3_ACC_GYRO_DSD_YL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DSD_YL(void *handle, LSM6DS3_ACC_GYRO_DSD_YL_t *value)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1))
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	2301      	movs	r3, #1
 800166e:	211d      	movs	r1, #29
 8001670:	f7ff fa8f 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001674:	1e03      	subs	r3, r0, #0
 8001676:	d101      	bne.n	800167c <LSM6DS3_ACC_GYRO_R_DSD_YL+0x1e>
  {
    return MEMS_ERROR;
 8001678:	2300      	movs	r3, #0
 800167a:	e007      	b.n	800168c <LSM6DS3_ACC_GYRO_R_DSD_YL+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_DSD_YL_MASK; //mask
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2204      	movs	r2, #4
 8001682:	4013      	ands	r3, r2
 8001684:	b2da      	uxtb	r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 800168a:	2301      	movs	r3, #1
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b002      	add	sp, #8
 8001692:	bd80      	pop	{r7, pc}

08001694 <LSM6DS3_ACC_GYRO_R_DSD_YH>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DSD_YH_t
* Output         : Status of DSD_YH see LSM6DS3_ACC_GYRO_DSD_YH_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DSD_YH(void *handle, LSM6DS3_ACC_GYRO_DSD_YH_t *value)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1))
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	2301      	movs	r3, #1
 80016a4:	211d      	movs	r1, #29
 80016a6:	f7ff fa74 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d101      	bne.n	80016b2 <LSM6DS3_ACC_GYRO_R_DSD_YH+0x1e>
  {
    return MEMS_ERROR;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e007      	b.n	80016c2 <LSM6DS3_ACC_GYRO_R_DSD_YH+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_DSD_YH_MASK; //mask
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2208      	movs	r2, #8
 80016b8:	4013      	ands	r3, r2
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}

080016ca <LSM6DS3_ACC_GYRO_R_DSD_ZL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DSD_ZL_t
* Output         : Status of DSD_ZL see LSM6DS3_ACC_GYRO_DSD_ZL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DSD_ZL(void *handle, LSM6DS3_ACC_GYRO_DSD_ZL_t *value)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1))
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	2301      	movs	r3, #1
 80016da:	211d      	movs	r1, #29
 80016dc:	f7ff fa59 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80016e0:	1e03      	subs	r3, r0, #0
 80016e2:	d101      	bne.n	80016e8 <LSM6DS3_ACC_GYRO_R_DSD_ZL+0x1e>
  {
    return MEMS_ERROR;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e007      	b.n	80016f8 <LSM6DS3_ACC_GYRO_R_DSD_ZL+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_DSD_ZL_MASK; //mask
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2210      	movs	r2, #16
 80016ee:	4013      	ands	r3, r2
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}

08001700 <LSM6DS3_ACC_GYRO_R_DSD_ZH>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DSD_ZH_t
* Output         : Status of DSD_ZH see LSM6DS3_ACC_GYRO_DSD_ZH_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DSD_ZH(void *handle, LSM6DS3_ACC_GYRO_DSD_ZH_t *value)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1))
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	2301      	movs	r3, #1
 8001710:	211d      	movs	r1, #29
 8001712:	f7ff fa3e 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001716:	1e03      	subs	r3, r0, #0
 8001718:	d101      	bne.n	800171e <LSM6DS3_ACC_GYRO_R_DSD_ZH+0x1e>
  {
    return MEMS_ERROR;
 800171a:	2300      	movs	r3, #0
 800171c:	e007      	b.n	800172e <LSM6DS3_ACC_GYRO_R_DSD_ZH+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_DSD_ZH_MASK; //mask
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2220      	movs	r2, #32
 8001724:	4013      	ands	r3, r2
 8001726:	b2da      	uxtb	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 800172c:	2301      	movs	r3, #1
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}

08001736 <LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_D6D_EV_STATUS_t
* Output         : Status of D6D_EV_STATUS see LSM6DS3_ACC_GYRO_D6D_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_D6D_EV_STATUS_t *value)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1))
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	2301      	movs	r3, #1
 8001746:	211d      	movs	r1, #29
 8001748:	f7ff fa23 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 800174c:	1e03      	subs	r3, r0, #0
 800174e:	d101      	bne.n	8001754 <LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS+0x1e>
  {
    return MEMS_ERROR;
 8001750:	2300      	movs	r3, #0
 8001752:	e007      	b.n	8001764 <LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_D6D_EV_STATUS_MASK; //mask
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2240      	movs	r2, #64	; 0x40
 800175a:	4013      	ands	r3, r2
 800175c:	b2da      	uxtb	r2, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 8001762:	2301      	movs	r3, #1
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}

0800176c <LSM6DS3_ACC_GYRO_R_XLDA>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_XLDA_t
* Output         : Status of XLDA see LSM6DS3_ACC_GYRO_XLDA_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_XLDA(void *handle, LSM6DS3_ACC_GYRO_XLDA_t *value)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_STATUS_REG, (u8_t *)value, 1))
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	2301      	movs	r3, #1
 800177c:	211e      	movs	r1, #30
 800177e:	f7ff fa08 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d101      	bne.n	800178a <LSM6DS3_ACC_GYRO_R_XLDA+0x1e>
  {
    return MEMS_ERROR;
 8001786:	2300      	movs	r3, #0
 8001788:	e007      	b.n	800179a <LSM6DS3_ACC_GYRO_R_XLDA+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_XLDA_MASK; //mask
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2201      	movs	r2, #1
 8001790:	4013      	ands	r3, r2
 8001792:	b2da      	uxtb	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 8001798:	2301      	movs	r3, #1
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b002      	add	sp, #8
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <LSM6DS3_ACC_GYRO_R_FIFONumOfEntries>:
* Input          : Pointer to u16_t
* Output         : Status of DIFF_FIFO
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FIFONumOfEntries(void *handle, u16_t *value)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  u8_t valueH, valueL;

  /* Low part from FIFO_STATUS1 */
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_STATUS1, (u8_t *)&valueL, 1))
 80017ac:	230e      	movs	r3, #14
 80017ae:	18fa      	adds	r2, r7, r3
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	2301      	movs	r3, #1
 80017b4:	213a      	movs	r1, #58	; 0x3a
 80017b6:	f7ff f9ec 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80017ba:	1e03      	subs	r3, r0, #0
 80017bc:	d101      	bne.n	80017c2 <LSM6DS3_ACC_GYRO_R_FIFONumOfEntries+0x20>
  {
    return MEMS_ERROR;
 80017be:	2300      	movs	r3, #0
 80017c0:	e02d      	b.n	800181e <LSM6DS3_ACC_GYRO_R_FIFONumOfEntries+0x7c>
  }

  valueL &= LSM6DS3_ACC_GYRO_DIFF_FIFO_STATUS1_MASK; //coerce
 80017c2:	210e      	movs	r1, #14
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	701a      	strb	r2, [r3, #0]
  valueL = valueL >> LSM6DS3_ACC_GYRO_DIFF_FIFO_STATUS1_POSITION; //mask
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	701a      	strb	r2, [r3, #0]

  /* High part from FIFO_STATUS2 */
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_STATUS2, (u8_t *)&valueH, 1))
 80017d4:	230f      	movs	r3, #15
 80017d6:	18fa      	adds	r2, r7, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	2301      	movs	r3, #1
 80017dc:	213b      	movs	r1, #59	; 0x3b
 80017de:	f7ff f9d8 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d101      	bne.n	80017ea <LSM6DS3_ACC_GYRO_R_FIFONumOfEntries+0x48>
  {
    return MEMS_ERROR;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e019      	b.n	800181e <LSM6DS3_ACC_GYRO_R_FIFONumOfEntries+0x7c>
  }

  valueH &= LSM6DS3_ACC_GYRO_DIFF_FIFO_STATUS2_MASK; //coerce
 80017ea:	210f      	movs	r1, #15
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	220f      	movs	r2, #15
 80017f2:	4013      	ands	r3, r2
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	701a      	strb	r2, [r3, #0]
  valueH = valueH >> LSM6DS3_ACC_GYRO_DIFF_FIFO_STATUS2_POSITION; //mask
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	781a      	ldrb	r2, [r3, #0]
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	701a      	strb	r2, [r3, #0]

  *value = ((valueH << 8) & 0xFF00) | valueL;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	b21a      	sxth	r2, r3
 800180a:	230e      	movs	r3, #14
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b21b      	sxth	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b21b      	sxth	r3, r3
 8001816:	b29a      	uxth	r2, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	801a      	strh	r2, [r3, #0]

  return MEMS_SUCCESS;
 800181c:	2301      	movs	r3, #1
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b004      	add	sp, #16
 8001824:	bd80      	pop	{r7, pc}

08001826 <LSM6DS3_ACC_GYRO_R_FIFOEmpty>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FIFO_EMPTY_t
* Output         : Status of FIFO_EMPTY see LSM6DS3_ACC_GYRO_FIFO_EMPTY_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FIFOEmpty(void *handle, LSM6DS3_ACC_GYRO_FIFO_EMPTY_t *value)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_STATUS2, (u8_t *)value, 1))
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	2301      	movs	r3, #1
 8001836:	213b      	movs	r1, #59	; 0x3b
 8001838:	f7ff f9ab 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 800183c:	1e03      	subs	r3, r0, #0
 800183e:	d101      	bne.n	8001844 <LSM6DS3_ACC_GYRO_R_FIFOEmpty+0x1e>
  {
    return MEMS_ERROR;
 8001840:	2300      	movs	r3, #0
 8001842:	e007      	b.n	8001854 <LSM6DS3_ACC_GYRO_R_FIFOEmpty+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_FIFO_EMPTY_MASK; //mask
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2210      	movs	r2, #16
 800184a:	4013      	ands	r3, r2
 800184c:	b2da      	uxtb	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 8001852:	2301      	movs	r3, #1
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b002      	add	sp, #8
 800185a:	bd80      	pop	{r7, pc}

0800185c <LSM6DS3_ACC_GYRO_R_FIFOFull>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FIFO_FULL_t
* Output         : Status of FIFO_FULL see LSM6DS3_ACC_GYRO_FIFO_FULL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FIFOFull(void *handle, LSM6DS3_ACC_GYRO_FIFO_FULL_t *value)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_STATUS2, (u8_t *)value, 1))
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	2301      	movs	r3, #1
 800186c:	213b      	movs	r1, #59	; 0x3b
 800186e:	f7ff f990 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001872:	1e03      	subs	r3, r0, #0
 8001874:	d101      	bne.n	800187a <LSM6DS3_ACC_GYRO_R_FIFOFull+0x1e>
  {
    return MEMS_ERROR;
 8001876:	2300      	movs	r3, #0
 8001878:	e007      	b.n	800188a <LSM6DS3_ACC_GYRO_R_FIFOFull+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_FIFO_FULL_MASK; //mask
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2220      	movs	r2, #32
 8001880:	4013      	ands	r3, r2
 8001882:	b2da      	uxtb	r2, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 8001888:	2301      	movs	r3, #1
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}

08001892 <LSM6DS3_ACC_GYRO_R_OVERRUN>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_OVERRUN_t
* Output         : Status of OVERRUN see LSM6DS3_ACC_GYRO_OVERRUN_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_OVERRUN(void *handle, LSM6DS3_ACC_GYRO_OVERRUN_t *value)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_STATUS2, (u8_t *)value, 1))
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	2301      	movs	r3, #1
 80018a2:	213b      	movs	r1, #59	; 0x3b
 80018a4:	f7ff f975 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80018a8:	1e03      	subs	r3, r0, #0
 80018aa:	d101      	bne.n	80018b0 <LSM6DS3_ACC_GYRO_R_OVERRUN+0x1e>
  {
    return MEMS_ERROR;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e007      	b.n	80018c0 <LSM6DS3_ACC_GYRO_R_OVERRUN+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_OVERRUN_MASK; //mask
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2240      	movs	r2, #64	; 0x40
 80018b6:	4013      	ands	r3, r2
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b002      	add	sp, #8
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <LSM6DS3_ACC_GYRO_R_FIFOPattern>:
* Input          : Pointer to u16_t
* Output         : Status of FIFO_PATTERN
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FIFOPattern(void *handle, u16_t *value)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  u8_t valueH, valueL;

  /* Low part from FIFO_STATUS3 */
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_STATUS3, (u8_t *)&valueL, 1))
 80018d2:	230e      	movs	r3, #14
 80018d4:	18fa      	adds	r2, r7, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	2301      	movs	r3, #1
 80018da:	213c      	movs	r1, #60	; 0x3c
 80018dc:	f7ff f959 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80018e0:	1e03      	subs	r3, r0, #0
 80018e2:	d101      	bne.n	80018e8 <LSM6DS3_ACC_GYRO_R_FIFOPattern+0x20>
  {
    return MEMS_ERROR;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e02d      	b.n	8001944 <LSM6DS3_ACC_GYRO_R_FIFOPattern+0x7c>
  }

  valueL &= LSM6DS3_ACC_GYRO_FIFO_STATUS3_PATTERN_MASK; //coerce
 80018e8:	210e      	movs	r1, #14
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	781a      	ldrb	r2, [r3, #0]
 80018ee:	187b      	adds	r3, r7, r1
 80018f0:	701a      	strb	r2, [r3, #0]
  valueL = valueL >> LSM6DS3_ACC_GYRO_FIFO_STATUS3_PATTERN_POSITION; //mask
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	701a      	strb	r2, [r3, #0]

  /* High part from FIFO_STATUS4 */
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_STATUS4, (u8_t *)&valueH, 1))
 80018fa:	230f      	movs	r3, #15
 80018fc:	18fa      	adds	r2, r7, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	2301      	movs	r3, #1
 8001902:	213d      	movs	r1, #61	; 0x3d
 8001904:	f7ff f945 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d101      	bne.n	8001910 <LSM6DS3_ACC_GYRO_R_FIFOPattern+0x48>
  {
    return MEMS_ERROR;
 800190c:	2300      	movs	r3, #0
 800190e:	e019      	b.n	8001944 <LSM6DS3_ACC_GYRO_R_FIFOPattern+0x7c>
  }

  valueH &= LSM6DS3_ACC_GYRO_FIFO_STATUS4_PATTERN_MASK; //coerce
 8001910:	210f      	movs	r1, #15
 8001912:	187b      	adds	r3, r7, r1
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2203      	movs	r2, #3
 8001918:	4013      	ands	r3, r2
 800191a:	b2da      	uxtb	r2, r3
 800191c:	187b      	adds	r3, r7, r1
 800191e:	701a      	strb	r2, [r3, #0]
  valueH = valueH >> LSM6DS3_ACC_GYRO_FIFO_STATUS4_PATTERN_POSITION; //mask
 8001920:	187b      	adds	r3, r7, r1
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	187b      	adds	r3, r7, r1
 8001926:	701a      	strb	r2, [r3, #0]

  *value = ((valueH << 8) & 0xFF00) | valueL;
 8001928:	187b      	adds	r3, r7, r1
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	b21a      	sxth	r2, r3
 8001930:	230e      	movs	r3, #14
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b21b      	sxth	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	b21b      	sxth	r3, r3
 800193c:	b29a      	uxth	r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	801a      	strh	r2, [r3, #0]

  return MEMS_SUCCESS;
 8001942:	2301      	movs	r3, #1
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b004      	add	sp, #16
 800194a:	bd80      	pop	{r7, pc}

0800194c <LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_t
* Output         : Status of PEDO_EV_STATUS see LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_t *value)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FUNC_SRC, (u8_t *)value, 1))
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	2301      	movs	r3, #1
 800195c:	2153      	movs	r1, #83	; 0x53
 800195e:	f7ff f918 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001962:	1e03      	subs	r3, r0, #0
 8001964:	d101      	bne.n	800196a <LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS+0x1e>
  {
    return MEMS_ERROR;
 8001966:	2300      	movs	r3, #0
 8001968:	e007      	b.n	800197a <LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_MASK; //mask
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2210      	movs	r2, #16
 8001970:	4013      	ands	r3, r2
 8001972:	b2da      	uxtb	r2, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 8001978:	2301      	movs	r3, #1
}
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}

08001982 <LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_TILT_EV_STATUS_t
* Output         : Status of TILT_EV_STATUS see LSM6DS3_ACC_GYRO_TILT_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_TILT_EV_STATUS_t *value)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FUNC_SRC, (u8_t *)value, 1))
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	2301      	movs	r3, #1
 8001992:	2153      	movs	r1, #83	; 0x53
 8001994:	f7ff f8fd 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001998:	1e03      	subs	r3, r0, #0
 800199a:	d101      	bne.n	80019a0 <LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS+0x1e>
  {
    return MEMS_ERROR;
 800199c:	2300      	movs	r3, #0
 800199e:	e007      	b.n	80019b0 <LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS+0x2e>
  }

  *value &= LSM6DS3_ACC_GYRO_TILT_EV_STATUS_MASK; //mask
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2220      	movs	r2, #32
 80019a6:	4013      	ands	r3, r2
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	701a      	strb	r2, [r3, #0]

  return MEMS_SUCCESS;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <LSM6DS3_ACC_GYRO_W_LIR>:
* Input          : LSM6DS3_ACC_GYRO_LIR_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_LIR(void *handle, LSM6DS3_ACC_GYRO_LIR_t newValue)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	000a      	movs	r2, r1
 80019c2:	1cfb      	adds	r3, r7, #3
 80019c4:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1))
 80019c6:	230f      	movs	r3, #15
 80019c8:	18fa      	adds	r2, r7, r3
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	2301      	movs	r3, #1
 80019ce:	2158      	movs	r1, #88	; 0x58
 80019d0:	f7ff f8df 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80019d4:	1e03      	subs	r3, r0, #0
 80019d6:	d101      	bne.n	80019dc <LSM6DS3_ACC_GYRO_W_LIR+0x24>
  {
    return MEMS_ERROR;
 80019d8:	2300      	movs	r3, #0
 80019da:	e01a      	b.n	8001a12 <LSM6DS3_ACC_GYRO_W_LIR+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_LIR_MASK;
 80019dc:	210f      	movs	r1, #15
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2201      	movs	r2, #1
 80019e4:	4393      	bics	r3, r2
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	1cfb      	adds	r3, r7, #3
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1))
 80019fc:	187a      	adds	r2, r7, r1
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	2301      	movs	r3, #1
 8001a02:	2158      	movs	r1, #88	; 0x58
 8001a04:	f7ff f8a4 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001a08:	1e03      	subs	r3, r0, #0
 8001a0a:	d101      	bne.n	8001a10 <LSM6DS3_ACC_GYRO_W_LIR+0x58>
  {
    return MEMS_ERROR;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e000      	b.n	8001a12 <LSM6DS3_ACC_GYRO_W_LIR+0x5a>
  }

  return MEMS_SUCCESS;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b004      	add	sp, #16
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <LSM6DS3_ACC_GYRO_W_TAP_Z_EN>:
* Input          : LSM6DS3_ACC_GYRO_TAP_Z_EN_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TAP_Z_EN(void *handle, LSM6DS3_ACC_GYRO_TAP_Z_EN_t newValue)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	000a      	movs	r2, r1
 8001a24:	1cfb      	adds	r3, r7, #3
 8001a26:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1))
 8001a28:	230f      	movs	r3, #15
 8001a2a:	18fa      	adds	r2, r7, r3
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	2158      	movs	r1, #88	; 0x58
 8001a32:	f7ff f8ae 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d101      	bne.n	8001a3e <LSM6DS3_ACC_GYRO_W_TAP_Z_EN+0x24>
  {
    return MEMS_ERROR;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e01a      	b.n	8001a74 <LSM6DS3_ACC_GYRO_W_TAP_Z_EN+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_TAP_Z_EN_MASK;
 8001a3e:	210f      	movs	r1, #15
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2202      	movs	r2, #2
 8001a46:	4393      	bics	r3, r2
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	1cfb      	adds	r3, r7, #3
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1))
 8001a5e:	187a      	adds	r2, r7, r1
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	2301      	movs	r3, #1
 8001a64:	2158      	movs	r1, #88	; 0x58
 8001a66:	f7ff f873 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d101      	bne.n	8001a72 <LSM6DS3_ACC_GYRO_W_TAP_Z_EN+0x58>
  {
    return MEMS_ERROR;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <LSM6DS3_ACC_GYRO_W_TAP_Z_EN+0x5a>
  }

  return MEMS_SUCCESS;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b004      	add	sp, #16
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <LSM6DS3_ACC_GYRO_W_TAP_Y_EN>:
* Input          : LSM6DS3_ACC_GYRO_TAP_Y_EN_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TAP_Y_EN(void *handle, LSM6DS3_ACC_GYRO_TAP_Y_EN_t newValue)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	000a      	movs	r2, r1
 8001a86:	1cfb      	adds	r3, r7, #3
 8001a88:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1))
 8001a8a:	230f      	movs	r3, #15
 8001a8c:	18fa      	adds	r2, r7, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	2301      	movs	r3, #1
 8001a92:	2158      	movs	r1, #88	; 0x58
 8001a94:	f7ff f87d 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001a98:	1e03      	subs	r3, r0, #0
 8001a9a:	d101      	bne.n	8001aa0 <LSM6DS3_ACC_GYRO_W_TAP_Y_EN+0x24>
  {
    return MEMS_ERROR;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e01a      	b.n	8001ad6 <LSM6DS3_ACC_GYRO_W_TAP_Y_EN+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_TAP_Y_EN_MASK;
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	1cfb      	adds	r3, r7, #3
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1))
 8001ac0:	187a      	adds	r2, r7, r1
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	2158      	movs	r1, #88	; 0x58
 8001ac8:	f7ff f842 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001acc:	1e03      	subs	r3, r0, #0
 8001ace:	d101      	bne.n	8001ad4 <LSM6DS3_ACC_GYRO_W_TAP_Y_EN+0x58>
  {
    return MEMS_ERROR;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e000      	b.n	8001ad6 <LSM6DS3_ACC_GYRO_W_TAP_Y_EN+0x5a>
  }

  return MEMS_SUCCESS;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b004      	add	sp, #16
 8001adc:	bd80      	pop	{r7, pc}

08001ade <LSM6DS3_ACC_GYRO_W_TAP_X_EN>:
* Input          : LSM6DS3_ACC_GYRO_TAP_X_EN_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TAP_X_EN(void *handle, LSM6DS3_ACC_GYRO_TAP_X_EN_t newValue)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	000a      	movs	r2, r1
 8001ae8:	1cfb      	adds	r3, r7, #3
 8001aea:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1))
 8001aec:	230f      	movs	r3, #15
 8001aee:	18fa      	adds	r2, r7, r3
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	2301      	movs	r3, #1
 8001af4:	2158      	movs	r1, #88	; 0x58
 8001af6:	f7ff f84c 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d101      	bne.n	8001b02 <LSM6DS3_ACC_GYRO_W_TAP_X_EN+0x24>
  {
    return MEMS_ERROR;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e01a      	b.n	8001b38 <LSM6DS3_ACC_GYRO_W_TAP_X_EN+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_TAP_X_EN_MASK;
 8001b02:	210f      	movs	r1, #15
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2208      	movs	r2, #8
 8001b0a:	4393      	bics	r3, r2
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001b12:	187b      	adds	r3, r7, r1
 8001b14:	781a      	ldrb	r2, [r3, #0]
 8001b16:	1cfb      	adds	r3, r7, #3
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1))
 8001b22:	187a      	adds	r2, r7, r1
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	2301      	movs	r3, #1
 8001b28:	2158      	movs	r1, #88	; 0x58
 8001b2a:	f7ff f811 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	d101      	bne.n	8001b36 <LSM6DS3_ACC_GYRO_W_TAP_X_EN+0x58>
  {
    return MEMS_ERROR;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <LSM6DS3_ACC_GYRO_W_TAP_X_EN+0x5a>
  }

  return MEMS_SUCCESS;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b004      	add	sp, #16
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <LSM6DS3_ACC_GYRO_W_TILT_EN>:
* Input          : LSM6DS3_ACC_GYRO_TILT_EN_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TILT_EN(void *handle, LSM6DS3_ACC_GYRO_TILT_EN_t newValue)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	000a      	movs	r2, r1
 8001b4a:	1cfb      	adds	r3, r7, #3
 8001b4c:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1))
 8001b4e:	230f      	movs	r3, #15
 8001b50:	18fa      	adds	r2, r7, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	2301      	movs	r3, #1
 8001b56:	2158      	movs	r1, #88	; 0x58
 8001b58:	f7ff f81b 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001b5c:	1e03      	subs	r3, r0, #0
 8001b5e:	d101      	bne.n	8001b64 <LSM6DS3_ACC_GYRO_W_TILT_EN+0x24>
  {
    return MEMS_ERROR;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e01a      	b.n	8001b9a <LSM6DS3_ACC_GYRO_W_TILT_EN+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_TILT_EN_MASK;
 8001b64:	210f      	movs	r1, #15
 8001b66:	187b      	adds	r3, r7, r1
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	187b      	adds	r3, r7, r1
 8001b72:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	1cfb      	adds	r3, r7, #3
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1))
 8001b84:	187a      	adds	r2, r7, r1
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	2158      	movs	r1, #88	; 0x58
 8001b8c:	f7fe ffe0 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001b90:	1e03      	subs	r3, r0, #0
 8001b92:	d101      	bne.n	8001b98 <LSM6DS3_ACC_GYRO_W_TILT_EN+0x58>
  {
    return MEMS_ERROR;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e000      	b.n	8001b9a <LSM6DS3_ACC_GYRO_W_TILT_EN+0x5a>
  }

  return MEMS_SUCCESS;
 8001b98:	2301      	movs	r3, #1
}
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <LSM6DS3_ACC_GYRO_W_PEDO_EN>:
* Input          : LSM6DS3_ACC_GYRO_PEDO_EN_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_PEDO_EN(void *handle, LSM6DS3_ACC_GYRO_PEDO_EN_t newValue)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	000a      	movs	r2, r1
 8001bac:	1cfb      	adds	r3, r7, #3
 8001bae:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1))
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	18fa      	adds	r2, r7, r3
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	2158      	movs	r1, #88	; 0x58
 8001bba:	f7fe ffea 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001bbe:	1e03      	subs	r3, r0, #0
 8001bc0:	d101      	bne.n	8001bc6 <LSM6DS3_ACC_GYRO_W_PEDO_EN+0x24>
  {
    return MEMS_ERROR;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e01a      	b.n	8001bfc <LSM6DS3_ACC_GYRO_W_PEDO_EN+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_PEDO_EN_MASK;
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2240      	movs	r2, #64	; 0x40
 8001bce:	4393      	bics	r3, r2
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	1cfb      	adds	r3, r7, #3
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1))
 8001be6:	187a      	adds	r2, r7, r1
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	2301      	movs	r3, #1
 8001bec:	2158      	movs	r1, #88	; 0x58
 8001bee:	f7fe ffaf 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001bf2:	1e03      	subs	r3, r0, #0
 8001bf4:	d101      	bne.n	8001bfa <LSM6DS3_ACC_GYRO_W_PEDO_EN+0x58>
  {
    return MEMS_ERROR;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <LSM6DS3_ACC_GYRO_W_PEDO_EN+0x5a>
  }

  return MEMS_SUCCESS;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b004      	add	sp, #16
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <LSM6DS3_ACC_GYRO_W_TAP_THS>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TAP_THS(void *handle, u8_t newValue)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	000a      	movs	r2, r1
 8001c0e:	1cfb      	adds	r3, r7, #3
 8001c10:	701a      	strb	r2, [r3, #0]
  u8_t value;

  newValue = newValue << LSM6DS3_ACC_GYRO_TAP_THS_POSITION; //mask
 8001c12:	1cfb      	adds	r3, r7, #3
 8001c14:	1cfa      	adds	r2, r7, #3
 8001c16:	7812      	ldrb	r2, [r2, #0]
 8001c18:	701a      	strb	r2, [r3, #0]
  newValue &= LSM6DS3_ACC_GYRO_TAP_THS_MASK; //coerce
 8001c1a:	1cfb      	adds	r3, r7, #3
 8001c1c:	1cfa      	adds	r2, r7, #3
 8001c1e:	7812      	ldrb	r2, [r2, #0]
 8001c20:	211f      	movs	r1, #31
 8001c22:	400a      	ands	r2, r1
 8001c24:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_THS_6D, &value, 1))
 8001c26:	230f      	movs	r3, #15
 8001c28:	18fa      	adds	r2, r7, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	2159      	movs	r1, #89	; 0x59
 8001c30:	f7fe ffaf 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d101      	bne.n	8001c3c <LSM6DS3_ACC_GYRO_W_TAP_THS+0x38>
  {
    return MEMS_ERROR;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e01a      	b.n	8001c72 <LSM6DS3_ACC_GYRO_W_TAP_THS+0x6e>
  }

  value &= ~LSM6DS3_ACC_GYRO_TAP_THS_MASK;
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	221f      	movs	r2, #31
 8001c44:	4393      	bics	r3, r2
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	781a      	ldrb	r2, [r3, #0]
 8001c50:	1cfb      	adds	r3, r7, #3
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_THS_6D, &value, 1))
 8001c5c:	187a      	adds	r2, r7, r1
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	2301      	movs	r3, #1
 8001c62:	2159      	movs	r1, #89	; 0x59
 8001c64:	f7fe ff74 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001c68:	1e03      	subs	r3, r0, #0
 8001c6a:	d101      	bne.n	8001c70 <LSM6DS3_ACC_GYRO_W_TAP_THS+0x6c>
  {
    return MEMS_ERROR;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e000      	b.n	8001c72 <LSM6DS3_ACC_GYRO_W_TAP_THS+0x6e>
  }

  return MEMS_SUCCESS;
 8001c70:	2301      	movs	r3, #1
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b004      	add	sp, #16
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <LSM6DS3_ACC_GYRO_W_SIXD_THS>:
* Input          : LSM6DS3_ACC_GYRO_SIXD_THS_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SIXD_THS(void *handle, LSM6DS3_ACC_GYRO_SIXD_THS_t newValue)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	000a      	movs	r2, r1
 8001c84:	1cfb      	adds	r3, r7, #3
 8001c86:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_THS_6D, &value, 1))
 8001c88:	230f      	movs	r3, #15
 8001c8a:	18fa      	adds	r2, r7, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	2159      	movs	r1, #89	; 0x59
 8001c92:	f7fe ff7e 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001c96:	1e03      	subs	r3, r0, #0
 8001c98:	d101      	bne.n	8001c9e <LSM6DS3_ACC_GYRO_W_SIXD_THS+0x24>
  {
    return MEMS_ERROR;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e01a      	b.n	8001cd4 <LSM6DS3_ACC_GYRO_W_SIXD_THS+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_SIXD_THS_MASK;
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2260      	movs	r2, #96	; 0x60
 8001ca6:	4393      	bics	r3, r2
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	1cfb      	adds	r3, r7, #3
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_THS_6D, &value, 1))
 8001cbe:	187a      	adds	r2, r7, r1
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	2159      	movs	r1, #89	; 0x59
 8001cc6:	f7fe ff43 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001cca:	1e03      	subs	r3, r0, #0
 8001ccc:	d101      	bne.n	8001cd2 <LSM6DS3_ACC_GYRO_W_SIXD_THS+0x58>
  {
    return MEMS_ERROR;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <LSM6DS3_ACC_GYRO_W_SIXD_THS+0x5a>
  }

  return MEMS_SUCCESS;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b004      	add	sp, #16
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <LSM6DS3_ACC_GYRO_W_SHOCK_Duration>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SHOCK_Duration(void *handle, u8_t newValue)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	000a      	movs	r2, r1
 8001ce6:	1cfb      	adds	r3, r7, #3
 8001ce8:	701a      	strb	r2, [r3, #0]
  u8_t value;

  newValue = newValue << LSM6DS3_ACC_GYRO_SHOCK_POSITION; //mask
 8001cea:	1cfb      	adds	r3, r7, #3
 8001cec:	1cfa      	adds	r2, r7, #3
 8001cee:	7812      	ldrb	r2, [r2, #0]
 8001cf0:	701a      	strb	r2, [r3, #0]
  newValue &= LSM6DS3_ACC_GYRO_SHOCK_MASK; //coerce
 8001cf2:	1cfb      	adds	r3, r7, #3
 8001cf4:	1cfa      	adds	r2, r7, #3
 8001cf6:	7812      	ldrb	r2, [r2, #0]
 8001cf8:	2103      	movs	r1, #3
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_INT_DUR2, &value, 1))
 8001cfe:	230f      	movs	r3, #15
 8001d00:	18fa      	adds	r2, r7, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	2301      	movs	r3, #1
 8001d06:	215a      	movs	r1, #90	; 0x5a
 8001d08:	f7fe ff43 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001d0c:	1e03      	subs	r3, r0, #0
 8001d0e:	d101      	bne.n	8001d14 <LSM6DS3_ACC_GYRO_W_SHOCK_Duration+0x38>
  {
    return MEMS_ERROR;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e01a      	b.n	8001d4a <LSM6DS3_ACC_GYRO_W_SHOCK_Duration+0x6e>
  }

  value &= ~LSM6DS3_ACC_GYRO_SHOCK_MASK;
 8001d14:	210f      	movs	r1, #15
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	4393      	bics	r3, r2
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	1cfb      	adds	r3, r7, #3
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_INT_DUR2, &value, 1))
 8001d34:	187a      	adds	r2, r7, r1
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	215a      	movs	r1, #90	; 0x5a
 8001d3c:	f7fe ff08 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d101      	bne.n	8001d48 <LSM6DS3_ACC_GYRO_W_SHOCK_Duration+0x6c>
  {
    return MEMS_ERROR;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e000      	b.n	8001d4a <LSM6DS3_ACC_GYRO_W_SHOCK_Duration+0x6e>
  }

  return MEMS_SUCCESS;
 8001d48:	2301      	movs	r3, #1
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b004      	add	sp, #16
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <LSM6DS3_ACC_GYRO_W_QUIET_Duration>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_QUIET_Duration(void *handle, u8_t newValue)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	000a      	movs	r2, r1
 8001d5c:	1cfb      	adds	r3, r7, #3
 8001d5e:	701a      	strb	r2, [r3, #0]
  u8_t value;

  newValue = newValue << LSM6DS3_ACC_GYRO_QUIET_POSITION; //mask
 8001d60:	1cfb      	adds	r3, r7, #3
 8001d62:	1cfa      	adds	r2, r7, #3
 8001d64:	7812      	ldrb	r2, [r2, #0]
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	701a      	strb	r2, [r3, #0]
  newValue &= LSM6DS3_ACC_GYRO_QUIET_MASK; //coerce
 8001d6a:	1cfb      	adds	r3, r7, #3
 8001d6c:	1cfa      	adds	r2, r7, #3
 8001d6e:	7812      	ldrb	r2, [r2, #0]
 8001d70:	210c      	movs	r1, #12
 8001d72:	400a      	ands	r2, r1
 8001d74:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_INT_DUR2, &value, 1))
 8001d76:	230f      	movs	r3, #15
 8001d78:	18fa      	adds	r2, r7, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	215a      	movs	r1, #90	; 0x5a
 8001d80:	f7fe ff07 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d101      	bne.n	8001d8c <LSM6DS3_ACC_GYRO_W_QUIET_Duration+0x3a>
  {
    return MEMS_ERROR;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e01a      	b.n	8001dc2 <LSM6DS3_ACC_GYRO_W_QUIET_Duration+0x70>
  }

  value &= ~LSM6DS3_ACC_GYRO_QUIET_MASK;
 8001d8c:	210f      	movs	r1, #15
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	220c      	movs	r2, #12
 8001d94:	4393      	bics	r3, r2
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	781a      	ldrb	r2, [r3, #0]
 8001da0:	1cfb      	adds	r3, r7, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_INT_DUR2, &value, 1))
 8001dac:	187a      	adds	r2, r7, r1
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	2301      	movs	r3, #1
 8001db2:	215a      	movs	r1, #90	; 0x5a
 8001db4:	f7fe fecc 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d101      	bne.n	8001dc0 <LSM6DS3_ACC_GYRO_W_QUIET_Duration+0x6e>
  {
    return MEMS_ERROR;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e000      	b.n	8001dc2 <LSM6DS3_ACC_GYRO_W_QUIET_Duration+0x70>
  }

  return MEMS_SUCCESS;
 8001dc0:	2301      	movs	r3, #1
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b004      	add	sp, #16
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <LSM6DS3_ACC_GYRO_W_DUR>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_DUR(void *handle, u8_t newValue)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	000a      	movs	r2, r1
 8001dd4:	1cfb      	adds	r3, r7, #3
 8001dd6:	701a      	strb	r2, [r3, #0]
  u8_t value;

  newValue = newValue << LSM6DS3_ACC_GYRO_DUR_POSITION; //mask
 8001dd8:	1cfb      	adds	r3, r7, #3
 8001dda:	1cfa      	adds	r2, r7, #3
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	701a      	strb	r2, [r3, #0]
  newValue &= LSM6DS3_ACC_GYRO_DUR_MASK; //coerce
 8001de2:	1cfb      	adds	r3, r7, #3
 8001de4:	1cfa      	adds	r2, r7, #3
 8001de6:	7812      	ldrb	r2, [r2, #0]
 8001de8:	210f      	movs	r1, #15
 8001dea:	438a      	bics	r2, r1
 8001dec:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_INT_DUR2, &value, 1))
 8001dee:	230f      	movs	r3, #15
 8001df0:	18fa      	adds	r2, r7, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	2301      	movs	r3, #1
 8001df6:	215a      	movs	r1, #90	; 0x5a
 8001df8:	f7fe fecb 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001dfc:	1e03      	subs	r3, r0, #0
 8001dfe:	d101      	bne.n	8001e04 <LSM6DS3_ACC_GYRO_W_DUR+0x3a>
  {
    return MEMS_ERROR;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e01a      	b.n	8001e3a <LSM6DS3_ACC_GYRO_W_DUR+0x70>
  }

  value &= ~LSM6DS3_ACC_GYRO_DUR_MASK;
 8001e04:	210f      	movs	r1, #15
 8001e06:	187b      	adds	r3, r7, r1
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	1cfb      	adds	r3, r7, #3
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_INT_DUR2, &value, 1))
 8001e24:	187a      	adds	r2, r7, r1
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	215a      	movs	r1, #90	; 0x5a
 8001e2c:	f7fe fe90 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001e30:	1e03      	subs	r3, r0, #0
 8001e32:	d101      	bne.n	8001e38 <LSM6DS3_ACC_GYRO_W_DUR+0x6e>
  {
    return MEMS_ERROR;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e000      	b.n	8001e3a <LSM6DS3_ACC_GYRO_W_DUR+0x70>
  }

  return MEMS_SUCCESS;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <LSM6DS3_ACC_GYRO_W_WK_THS>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_WK_THS(void *handle, u8_t newValue)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	000a      	movs	r2, r1
 8001e4c:	1cfb      	adds	r3, r7, #3
 8001e4e:	701a      	strb	r2, [r3, #0]
  u8_t value;

  newValue = newValue << LSM6DS3_ACC_GYRO_WK_THS_POSITION; //mask
 8001e50:	1cfb      	adds	r3, r7, #3
 8001e52:	1cfa      	adds	r2, r7, #3
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	701a      	strb	r2, [r3, #0]
  newValue &= LSM6DS3_ACC_GYRO_WK_THS_MASK; //coerce
 8001e58:	1cfb      	adds	r3, r7, #3
 8001e5a:	1cfa      	adds	r2, r7, #3
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	213f      	movs	r1, #63	; 0x3f
 8001e60:	400a      	ands	r2, r1
 8001e62:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_THS, &value, 1))
 8001e64:	230f      	movs	r3, #15
 8001e66:	18fa      	adds	r2, r7, r3
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	215b      	movs	r1, #91	; 0x5b
 8001e6e:	f7fe fe90 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001e72:	1e03      	subs	r3, r0, #0
 8001e74:	d101      	bne.n	8001e7a <LSM6DS3_ACC_GYRO_W_WK_THS+0x38>
  {
    return MEMS_ERROR;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e01a      	b.n	8001eb0 <LSM6DS3_ACC_GYRO_W_WK_THS+0x6e>
  }

  value &= ~LSM6DS3_ACC_GYRO_WK_THS_MASK;
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	223f      	movs	r2, #63	; 0x3f
 8001e82:	4393      	bics	r3, r2
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	187b      	adds	r3, r7, r1
 8001e88:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001e8a:	187b      	adds	r3, r7, r1
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	1cfb      	adds	r3, r7, #3
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_THS, &value, 1))
 8001e9a:	187a      	adds	r2, r7, r1
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	215b      	movs	r1, #91	; 0x5b
 8001ea2:	f7fe fe55 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001ea6:	1e03      	subs	r3, r0, #0
 8001ea8:	d101      	bne.n	8001eae <LSM6DS3_ACC_GYRO_W_WK_THS+0x6c>
  {
    return MEMS_ERROR;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e000      	b.n	8001eb0 <LSM6DS3_ACC_GYRO_W_WK_THS+0x6e>
  }

  return MEMS_SUCCESS;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b004      	add	sp, #16
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV>:
* Input          : LSM6DS3_ACC_GYRO_SINGLE_DOUBLE_TAP_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV(void *handle, LSM6DS3_ACC_GYRO_SINGLE_DOUBLE_TAP_t newValue)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	000a      	movs	r2, r1
 8001ec2:	1cfb      	adds	r3, r7, #3
 8001ec4:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_THS, &value, 1))
 8001ec6:	230f      	movs	r3, #15
 8001ec8:	18fa      	adds	r2, r7, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	215b      	movs	r1, #91	; 0x5b
 8001ed0:	f7fe fe5f 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d101      	bne.n	8001edc <LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV+0x24>
  {
    return MEMS_ERROR;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e01a      	b.n	8001f12 <LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_SINGLE_DOUBLE_TAP_MASK;
 8001edc:	210f      	movs	r1, #15
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	227f      	movs	r2, #127	; 0x7f
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	1cfb      	adds	r3, r7, #3
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_THS, &value, 1))
 8001efc:	187a      	adds	r2, r7, r1
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	2301      	movs	r3, #1
 8001f02:	215b      	movs	r1, #91	; 0x5b
 8001f04:	f7fe fe24 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001f08:	1e03      	subs	r3, r0, #0
 8001f0a:	d101      	bne.n	8001f10 <LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV+0x58>
  {
    return MEMS_ERROR;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e000      	b.n	8001f12 <LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV+0x5a>
  }

  return MEMS_SUCCESS;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b004      	add	sp, #16
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <LSM6DS3_ACC_GYRO_W_SLEEP_DUR>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SLEEP_DUR(void *handle, u8_t newValue)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	000a      	movs	r2, r1
 8001f24:	1cfb      	adds	r3, r7, #3
 8001f26:	701a      	strb	r2, [r3, #0]
  u8_t value;

  newValue = newValue << LSM6DS3_ACC_GYRO_SLEEP_DUR_POSITION; //mask
 8001f28:	1cfb      	adds	r3, r7, #3
 8001f2a:	1cfa      	adds	r2, r7, #3
 8001f2c:	7812      	ldrb	r2, [r2, #0]
 8001f2e:	701a      	strb	r2, [r3, #0]
  newValue &= LSM6DS3_ACC_GYRO_SLEEP_DUR_MASK; //coerce
 8001f30:	1cfb      	adds	r3, r7, #3
 8001f32:	1cfa      	adds	r2, r7, #3
 8001f34:	7812      	ldrb	r2, [r2, #0]
 8001f36:	210f      	movs	r1, #15
 8001f38:	400a      	ands	r2, r1
 8001f3a:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1))
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	18fa      	adds	r2, r7, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	2301      	movs	r3, #1
 8001f44:	215c      	movs	r1, #92	; 0x5c
 8001f46:	f7fe fe24 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001f4a:	1e03      	subs	r3, r0, #0
 8001f4c:	d101      	bne.n	8001f52 <LSM6DS3_ACC_GYRO_W_SLEEP_DUR+0x38>
  {
    return MEMS_ERROR;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e01a      	b.n	8001f88 <LSM6DS3_ACC_GYRO_W_SLEEP_DUR+0x6e>
  }

  value &= ~LSM6DS3_ACC_GYRO_SLEEP_DUR_MASK;
 8001f52:	210f      	movs	r1, #15
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	220f      	movs	r2, #15
 8001f5a:	4393      	bics	r3, r2
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	187b      	adds	r3, r7, r1
 8001f60:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001f62:	187b      	adds	r3, r7, r1
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	1cfb      	adds	r3, r7, #3
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1))
 8001f72:	187a      	adds	r2, r7, r1
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	2301      	movs	r3, #1
 8001f78:	215c      	movs	r1, #92	; 0x5c
 8001f7a:	f7fe fde9 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001f7e:	1e03      	subs	r3, r0, #0
 8001f80:	d101      	bne.n	8001f86 <LSM6DS3_ACC_GYRO_W_SLEEP_DUR+0x6c>
  {
    return MEMS_ERROR;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <LSM6DS3_ACC_GYRO_W_SLEEP_DUR+0x6e>
  }

  return MEMS_SUCCESS;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b004      	add	sp, #16
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <LSM6DS3_ACC_GYRO_W_TIMER_HR>:
* Input          : LSM6DS3_ACC_GYRO_TIMER_HR_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TIMER_HR(void *handle, LSM6DS3_ACC_GYRO_TIMER_HR_t newValue)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	000a      	movs	r2, r1
 8001f9a:	1cfb      	adds	r3, r7, #3
 8001f9c:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1))
 8001f9e:	230f      	movs	r3, #15
 8001fa0:	18fa      	adds	r2, r7, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	215c      	movs	r1, #92	; 0x5c
 8001fa8:	f7fe fdf3 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8001fac:	1e03      	subs	r3, r0, #0
 8001fae:	d101      	bne.n	8001fb4 <LSM6DS3_ACC_GYRO_W_TIMER_HR+0x24>
  {
    return MEMS_ERROR;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e01a      	b.n	8001fea <LSM6DS3_ACC_GYRO_W_TIMER_HR+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_TIMER_HR_MASK;
 8001fb4:	210f      	movs	r1, #15
 8001fb6:	187b      	adds	r3, r7, r1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2210      	movs	r2, #16
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	187b      	adds	r3, r7, r1
 8001fc2:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	1cfb      	adds	r3, r7, #3
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1))
 8001fd4:	187a      	adds	r2, r7, r1
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	215c      	movs	r1, #92	; 0x5c
 8001fdc:	f7fe fdb8 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d101      	bne.n	8001fe8 <LSM6DS3_ACC_GYRO_W_TIMER_HR+0x58>
  {
    return MEMS_ERROR;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e000      	b.n	8001fea <LSM6DS3_ACC_GYRO_W_TIMER_HR+0x5a>
  }

  return MEMS_SUCCESS;
 8001fe8:	2301      	movs	r3, #1
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b004      	add	sp, #16
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <LSM6DS3_ACC_GYRO_W_WAKE_DUR>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_WAKE_DUR(void *handle, u8_t newValue)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	000a      	movs	r2, r1
 8001ffc:	1cfb      	adds	r3, r7, #3
 8001ffe:	701a      	strb	r2, [r3, #0]
  u8_t value;

  newValue = newValue << LSM6DS3_ACC_GYRO_WAKE_DUR_POSITION; //mask
 8002000:	1cfb      	adds	r3, r7, #3
 8002002:	1cfa      	adds	r2, r7, #3
 8002004:	7812      	ldrb	r2, [r2, #0]
 8002006:	0152      	lsls	r2, r2, #5
 8002008:	701a      	strb	r2, [r3, #0]
  newValue &= LSM6DS3_ACC_GYRO_WAKE_DUR_MASK; //coerce
 800200a:	1cfb      	adds	r3, r7, #3
 800200c:	1cfa      	adds	r2, r7, #3
 800200e:	7812      	ldrb	r2, [r2, #0]
 8002010:	2160      	movs	r1, #96	; 0x60
 8002012:	400a      	ands	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1))
 8002016:	230f      	movs	r3, #15
 8002018:	18fa      	adds	r2, r7, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	2301      	movs	r3, #1
 800201e:	215c      	movs	r1, #92	; 0x5c
 8002020:	f7fe fdb7 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d101      	bne.n	800202c <LSM6DS3_ACC_GYRO_W_WAKE_DUR+0x3a>
  {
    return MEMS_ERROR;
 8002028:	2300      	movs	r3, #0
 800202a:	e01a      	b.n	8002062 <LSM6DS3_ACC_GYRO_W_WAKE_DUR+0x70>
  }

  value &= ~LSM6DS3_ACC_GYRO_WAKE_DUR_MASK;
 800202c:	210f      	movs	r1, #15
 800202e:	187b      	adds	r3, r7, r1
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2260      	movs	r2, #96	; 0x60
 8002034:	4393      	bics	r3, r2
 8002036:	b2da      	uxtb	r2, r3
 8002038:	187b      	adds	r3, r7, r1
 800203a:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	781a      	ldrb	r2, [r3, #0]
 8002040:	1cfb      	adds	r3, r7, #3
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4313      	orrs	r3, r2
 8002046:	b2da      	uxtb	r2, r3
 8002048:	187b      	adds	r3, r7, r1
 800204a:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1))
 800204c:	187a      	adds	r2, r7, r1
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	2301      	movs	r3, #1
 8002052:	215c      	movs	r1, #92	; 0x5c
 8002054:	f7fe fd7c 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8002058:	1e03      	subs	r3, r0, #0
 800205a:	d101      	bne.n	8002060 <LSM6DS3_ACC_GYRO_W_WAKE_DUR+0x6e>
  {
    return MEMS_ERROR;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <LSM6DS3_ACC_GYRO_W_WAKE_DUR+0x70>
  }

  return MEMS_SUCCESS;
 8002060:	2301      	movs	r3, #1
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}

0800206a <LSM6DS3_ACC_GYRO_W_FF_THS>:
* Input          : LSM6DS3_ACC_GYRO_FF_THS_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FF_THS(void *handle, LSM6DS3_ACC_GYRO_FF_THS_t newValue)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	000a      	movs	r2, r1
 8002074:	1cfb      	adds	r3, r7, #3
 8002076:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FREE_FALL, &value, 1))
 8002078:	230f      	movs	r3, #15
 800207a:	18fa      	adds	r2, r7, r3
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	2301      	movs	r3, #1
 8002080:	215d      	movs	r1, #93	; 0x5d
 8002082:	f7fe fd86 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8002086:	1e03      	subs	r3, r0, #0
 8002088:	d101      	bne.n	800208e <LSM6DS3_ACC_GYRO_W_FF_THS+0x24>
  {
    return MEMS_ERROR;
 800208a:	2300      	movs	r3, #0
 800208c:	e01a      	b.n	80020c4 <LSM6DS3_ACC_GYRO_W_FF_THS+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_FF_THS_MASK;
 800208e:	210f      	movs	r1, #15
 8002090:	187b      	adds	r3, r7, r1
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2207      	movs	r2, #7
 8002096:	4393      	bics	r3, r2
 8002098:	b2da      	uxtb	r2, r3
 800209a:	187b      	adds	r3, r7, r1
 800209c:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 800209e:	187b      	adds	r3, r7, r1
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	1cfb      	adds	r3, r7, #3
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	187b      	adds	r3, r7, r1
 80020ac:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FREE_FALL, &value, 1))
 80020ae:	187a      	adds	r2, r7, r1
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	2301      	movs	r3, #1
 80020b4:	215d      	movs	r1, #93	; 0x5d
 80020b6:	f7fe fd4b 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 80020ba:	1e03      	subs	r3, r0, #0
 80020bc:	d101      	bne.n	80020c2 <LSM6DS3_ACC_GYRO_W_FF_THS+0x58>
  {
    return MEMS_ERROR;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <LSM6DS3_ACC_GYRO_W_FF_THS+0x5a>
  }

  return MEMS_SUCCESS;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}

080020cc <LSM6DS3_ACC_GYRO_W_FF_Duration>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FF_Duration(void *handle, u8_t newValue)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	000a      	movs	r2, r1
 80020d6:	1cfb      	adds	r3, r7, #3
 80020d8:	701a      	strb	r2, [r3, #0]
  u8_t valueH, valueL;
  u8_t value;

  valueL = newValue & 0x1F;
 80020da:	200f      	movs	r0, #15
 80020dc:	183b      	adds	r3, r7, r0
 80020de:	1cfa      	adds	r2, r7, #3
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	211f      	movs	r1, #31
 80020e4:	400a      	ands	r2, r1
 80020e6:	701a      	strb	r2, [r3, #0]
  valueH = (newValue >> 5) & 0x1;
 80020e8:	1cfb      	adds	r3, r7, #3
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	095b      	lsrs	r3, r3, #5
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	230e      	movs	r3, #14
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	2101      	movs	r1, #1
 80020f6:	400a      	ands	r2, r1
 80020f8:	701a      	strb	r2, [r3, #0]

  /* Low part in FREE_FALL reg */
  valueL = valueL << LSM6DS3_ACC_GYRO_FF_FREE_FALL_DUR_POSITION; //mask
 80020fa:	183b      	adds	r3, r7, r0
 80020fc:	183a      	adds	r2, r7, r0
 80020fe:	7812      	ldrb	r2, [r2, #0]
 8002100:	00d2      	lsls	r2, r2, #3
 8002102:	701a      	strb	r2, [r3, #0]
  valueL &= LSM6DS3_ACC_GYRO_FF_FREE_FALL_DUR_MASK; //coerce
 8002104:	183b      	adds	r3, r7, r0
 8002106:	183a      	adds	r2, r7, r0
 8002108:	7812      	ldrb	r2, [r2, #0]
 800210a:	2107      	movs	r1, #7
 800210c:	438a      	bics	r2, r1
 800210e:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FREE_FALL, &value, 1))
 8002110:	230d      	movs	r3, #13
 8002112:	18fa      	adds	r2, r7, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	2301      	movs	r3, #1
 8002118:	215d      	movs	r1, #93	; 0x5d
 800211a:	f7fe fd3a 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 800211e:	1e03      	subs	r3, r0, #0
 8002120:	d101      	bne.n	8002126 <LSM6DS3_ACC_GYRO_W_FF_Duration+0x5a>
  {
    return MEMS_ERROR;
 8002122:	2300      	movs	r3, #0
 8002124:	e04d      	b.n	80021c2 <LSM6DS3_ACC_GYRO_W_FF_Duration+0xf6>
  }

  value &= ~LSM6DS3_ACC_GYRO_FF_FREE_FALL_DUR_MASK;
 8002126:	210d      	movs	r1, #13
 8002128:	187b      	adds	r3, r7, r1
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2207      	movs	r2, #7
 800212e:	4013      	ands	r3, r2
 8002130:	b2da      	uxtb	r2, r3
 8002132:	187b      	adds	r3, r7, r1
 8002134:	701a      	strb	r2, [r3, #0]
  value |= valueL;
 8002136:	187b      	adds	r3, r7, r1
 8002138:	781a      	ldrb	r2, [r3, #0]
 800213a:	230f      	movs	r3, #15
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4313      	orrs	r3, r2
 8002142:	b2da      	uxtb	r2, r3
 8002144:	187b      	adds	r3, r7, r1
 8002146:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FREE_FALL, &value, 1))
 8002148:	187a      	adds	r2, r7, r1
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	2301      	movs	r3, #1
 800214e:	215d      	movs	r1, #93	; 0x5d
 8002150:	f7fe fcfe 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8002154:	1e03      	subs	r3, r0, #0
 8002156:	d101      	bne.n	800215c <LSM6DS3_ACC_GYRO_W_FF_Duration+0x90>
  {
    return MEMS_ERROR;
 8002158:	2300      	movs	r3, #0
 800215a:	e032      	b.n	80021c2 <LSM6DS3_ACC_GYRO_W_FF_Duration+0xf6>
  }

  /* High part in WAKE_UP_DUR reg */
  valueH = valueH << LSM6DS3_ACC_GYRO_FF_WAKE_UP_DUR_POSITION; //mask
 800215c:	210e      	movs	r1, #14
 800215e:	187b      	adds	r3, r7, r1
 8002160:	187a      	adds	r2, r7, r1
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	01d2      	lsls	r2, r2, #7
 8002166:	701a      	strb	r2, [r3, #0]
  valueH &= LSM6DS3_ACC_GYRO_FF_WAKE_UP_DUR_MASK; //coerce
 8002168:	187b      	adds	r3, r7, r1
 800216a:	187a      	adds	r2, r7, r1
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	217f      	movs	r1, #127	; 0x7f
 8002170:	438a      	bics	r2, r1
 8002172:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1))
 8002174:	230d      	movs	r3, #13
 8002176:	18fa      	adds	r2, r7, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	2301      	movs	r3, #1
 800217c:	215c      	movs	r1, #92	; 0x5c
 800217e:	f7fe fd08 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8002182:	1e03      	subs	r3, r0, #0
 8002184:	d101      	bne.n	800218a <LSM6DS3_ACC_GYRO_W_FF_Duration+0xbe>
  {
    return MEMS_ERROR;
 8002186:	2300      	movs	r3, #0
 8002188:	e01b      	b.n	80021c2 <LSM6DS3_ACC_GYRO_W_FF_Duration+0xf6>
  }

  value &= ~LSM6DS3_ACC_GYRO_FF_WAKE_UP_DUR_MASK;
 800218a:	210d      	movs	r1, #13
 800218c:	187b      	adds	r3, r7, r1
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	227f      	movs	r2, #127	; 0x7f
 8002192:	4013      	ands	r3, r2
 8002194:	b2da      	uxtb	r2, r3
 8002196:	187b      	adds	r3, r7, r1
 8002198:	701a      	strb	r2, [r3, #0]
  value |= valueH;
 800219a:	187b      	adds	r3, r7, r1
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	230e      	movs	r3, #14
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	187b      	adds	r3, r7, r1
 80021aa:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1))
 80021ac:	187a      	adds	r2, r7, r1
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	2301      	movs	r3, #1
 80021b2:	215c      	movs	r1, #92	; 0x5c
 80021b4:	f7fe fccc 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 80021b8:	1e03      	subs	r3, r0, #0
 80021ba:	d101      	bne.n	80021c0 <LSM6DS3_ACC_GYRO_W_FF_Duration+0xf4>
  {
    return MEMS_ERROR;
 80021bc:	2300      	movs	r3, #0
 80021be:	e000      	b.n	80021c2 <LSM6DS3_ACC_GYRO_W_FF_Duration+0xf6>
  }

  return MEMS_SUCCESS;
 80021c0:	2301      	movs	r3, #1
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bd80      	pop	{r7, pc}

080021ca <LSM6DS3_ACC_GYRO_W_TiltEvOnInt1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_TILT_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TiltEvOnInt1(void *handle, LSM6DS3_ACC_GYRO_INT1_TILT_t newValue)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	000a      	movs	r2, r1
 80021d4:	1cfb      	adds	r3, r7, #3
 80021d6:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1))
 80021d8:	230f      	movs	r3, #15
 80021da:	18fa      	adds	r2, r7, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	2301      	movs	r3, #1
 80021e0:	215e      	movs	r1, #94	; 0x5e
 80021e2:	f7fe fcd6 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80021e6:	1e03      	subs	r3, r0, #0
 80021e8:	d101      	bne.n	80021ee <LSM6DS3_ACC_GYRO_W_TiltEvOnInt1+0x24>
  {
    return MEMS_ERROR;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e01a      	b.n	8002224 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt1+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT1_TILT_MASK;
 80021ee:	210f      	movs	r1, #15
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2202      	movs	r2, #2
 80021f6:	4393      	bics	r3, r2
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	187b      	adds	r3, r7, r1
 80021fc:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 80021fe:	187b      	adds	r3, r7, r1
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	1cfb      	adds	r3, r7, #3
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	b2da      	uxtb	r2, r3
 800220a:	187b      	adds	r3, r7, r1
 800220c:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1))
 800220e:	187a      	adds	r2, r7, r1
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	2301      	movs	r3, #1
 8002214:	215e      	movs	r1, #94	; 0x5e
 8002216:	f7fe fc9b 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 800221a:	1e03      	subs	r3, r0, #0
 800221c:	d101      	bne.n	8002222 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt1+0x58>
  {
    return MEMS_ERROR;
 800221e:	2300      	movs	r3, #0
 8002220:	e000      	b.n	8002224 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt1+0x5a>
  }

  return MEMS_SUCCESS;
 8002222:	2301      	movs	r3, #1
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	b004      	add	sp, #16
 800222a:	bd80      	pop	{r7, pc}

0800222c <LSM6DS3_ACC_GYRO_W_6DEvOnInt1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_6D_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_6DEvOnInt1(void *handle, LSM6DS3_ACC_GYRO_INT1_6D_t newValue)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	000a      	movs	r2, r1
 8002236:	1cfb      	adds	r3, r7, #3
 8002238:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1))
 800223a:	230f      	movs	r3, #15
 800223c:	18fa      	adds	r2, r7, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	2301      	movs	r3, #1
 8002242:	215e      	movs	r1, #94	; 0x5e
 8002244:	f7fe fca5 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8002248:	1e03      	subs	r3, r0, #0
 800224a:	d101      	bne.n	8002250 <LSM6DS3_ACC_GYRO_W_6DEvOnInt1+0x24>
  {
    return MEMS_ERROR;
 800224c:	2300      	movs	r3, #0
 800224e:	e01a      	b.n	8002286 <LSM6DS3_ACC_GYRO_W_6DEvOnInt1+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT1_6D_MASK;
 8002250:	210f      	movs	r1, #15
 8002252:	187b      	adds	r3, r7, r1
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2204      	movs	r2, #4
 8002258:	4393      	bics	r3, r2
 800225a:	b2da      	uxtb	r2, r3
 800225c:	187b      	adds	r3, r7, r1
 800225e:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8002260:	187b      	adds	r3, r7, r1
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	1cfb      	adds	r3, r7, #3
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4313      	orrs	r3, r2
 800226a:	b2da      	uxtb	r2, r3
 800226c:	187b      	adds	r3, r7, r1
 800226e:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1))
 8002270:	187a      	adds	r2, r7, r1
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	2301      	movs	r3, #1
 8002276:	215e      	movs	r1, #94	; 0x5e
 8002278:	f7fe fc6a 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 800227c:	1e03      	subs	r3, r0, #0
 800227e:	d101      	bne.n	8002284 <LSM6DS3_ACC_GYRO_W_6DEvOnInt1+0x58>
  {
    return MEMS_ERROR;
 8002280:	2300      	movs	r3, #0
 8002282:	e000      	b.n	8002286 <LSM6DS3_ACC_GYRO_W_6DEvOnInt1+0x5a>
  }

  return MEMS_SUCCESS;
 8002284:	2301      	movs	r3, #1
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	b004      	add	sp, #16
 800228c:	bd80      	pop	{r7, pc}

0800228e <LSM6DS3_ACC_GYRO_W_TapEvOnInt1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_TAP_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TapEvOnInt1(void *handle, LSM6DS3_ACC_GYRO_INT1_TAP_t newValue)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	000a      	movs	r2, r1
 8002298:	1cfb      	adds	r3, r7, #3
 800229a:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1))
 800229c:	230f      	movs	r3, #15
 800229e:	18fa      	adds	r2, r7, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	2301      	movs	r3, #1
 80022a4:	215e      	movs	r1, #94	; 0x5e
 80022a6:	f7fe fc74 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d101      	bne.n	80022b2 <LSM6DS3_ACC_GYRO_W_TapEvOnInt1+0x24>
  {
    return MEMS_ERROR;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e01a      	b.n	80022e8 <LSM6DS3_ACC_GYRO_W_TapEvOnInt1+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT1_TAP_MASK;
 80022b2:	210f      	movs	r1, #15
 80022b4:	187b      	adds	r3, r7, r1
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2208      	movs	r2, #8
 80022ba:	4393      	bics	r3, r2
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	187b      	adds	r3, r7, r1
 80022c0:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 80022c2:	187b      	adds	r3, r7, r1
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	1cfb      	adds	r3, r7, #3
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	187b      	adds	r3, r7, r1
 80022d0:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1))
 80022d2:	187a      	adds	r2, r7, r1
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	2301      	movs	r3, #1
 80022d8:	215e      	movs	r1, #94	; 0x5e
 80022da:	f7fe fc39 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 80022de:	1e03      	subs	r3, r0, #0
 80022e0:	d101      	bne.n	80022e6 <LSM6DS3_ACC_GYRO_W_TapEvOnInt1+0x58>
  {
    return MEMS_ERROR;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <LSM6DS3_ACC_GYRO_W_TapEvOnInt1+0x5a>
  }

  return MEMS_SUCCESS;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b004      	add	sp, #16
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <LSM6DS3_ACC_GYRO_W_FFEvOnInt1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_FF_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FFEvOnInt1(void *handle, LSM6DS3_ACC_GYRO_INT1_FF_t newValue)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	000a      	movs	r2, r1
 80022fa:	1cfb      	adds	r3, r7, #3
 80022fc:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1))
 80022fe:	230f      	movs	r3, #15
 8002300:	18fa      	adds	r2, r7, r3
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	2301      	movs	r3, #1
 8002306:	215e      	movs	r1, #94	; 0x5e
 8002308:	f7fe fc43 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 800230c:	1e03      	subs	r3, r0, #0
 800230e:	d101      	bne.n	8002314 <LSM6DS3_ACC_GYRO_W_FFEvOnInt1+0x24>
  {
    return MEMS_ERROR;
 8002310:	2300      	movs	r3, #0
 8002312:	e01a      	b.n	800234a <LSM6DS3_ACC_GYRO_W_FFEvOnInt1+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT1_FF_MASK;
 8002314:	210f      	movs	r1, #15
 8002316:	187b      	adds	r3, r7, r1
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2210      	movs	r2, #16
 800231c:	4393      	bics	r3, r2
 800231e:	b2da      	uxtb	r2, r3
 8002320:	187b      	adds	r3, r7, r1
 8002322:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8002324:	187b      	adds	r3, r7, r1
 8002326:	781a      	ldrb	r2, [r3, #0]
 8002328:	1cfb      	adds	r3, r7, #3
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4313      	orrs	r3, r2
 800232e:	b2da      	uxtb	r2, r3
 8002330:	187b      	adds	r3, r7, r1
 8002332:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1))
 8002334:	187a      	adds	r2, r7, r1
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	2301      	movs	r3, #1
 800233a:	215e      	movs	r1, #94	; 0x5e
 800233c:	f7fe fc08 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8002340:	1e03      	subs	r3, r0, #0
 8002342:	d101      	bne.n	8002348 <LSM6DS3_ACC_GYRO_W_FFEvOnInt1+0x58>
  {
    return MEMS_ERROR;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <LSM6DS3_ACC_GYRO_W_FFEvOnInt1+0x5a>
  }

  return MEMS_SUCCESS;
 8002348:	2301      	movs	r3, #1
}
 800234a:	0018      	movs	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	b004      	add	sp, #16
 8002350:	bd80      	pop	{r7, pc}

08002352 <LSM6DS3_ACC_GYRO_W_WUEvOnInt1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_WU_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_WUEvOnInt1(void *handle, LSM6DS3_ACC_GYRO_INT1_WU_t newValue)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	000a      	movs	r2, r1
 800235c:	1cfb      	adds	r3, r7, #3
 800235e:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1))
 8002360:	230f      	movs	r3, #15
 8002362:	18fa      	adds	r2, r7, r3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	2301      	movs	r3, #1
 8002368:	215e      	movs	r1, #94	; 0x5e
 800236a:	f7fe fc12 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 800236e:	1e03      	subs	r3, r0, #0
 8002370:	d101      	bne.n	8002376 <LSM6DS3_ACC_GYRO_W_WUEvOnInt1+0x24>
  {
    return MEMS_ERROR;
 8002372:	2300      	movs	r3, #0
 8002374:	e01a      	b.n	80023ac <LSM6DS3_ACC_GYRO_W_WUEvOnInt1+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT1_WU_MASK;
 8002376:	210f      	movs	r1, #15
 8002378:	187b      	adds	r3, r7, r1
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2220      	movs	r2, #32
 800237e:	4393      	bics	r3, r2
 8002380:	b2da      	uxtb	r2, r3
 8002382:	187b      	adds	r3, r7, r1
 8002384:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8002386:	187b      	adds	r3, r7, r1
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	1cfb      	adds	r3, r7, #3
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4313      	orrs	r3, r2
 8002390:	b2da      	uxtb	r2, r3
 8002392:	187b      	adds	r3, r7, r1
 8002394:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1))
 8002396:	187a      	adds	r2, r7, r1
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	2301      	movs	r3, #1
 800239c:	215e      	movs	r1, #94	; 0x5e
 800239e:	f7fe fbd7 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d101      	bne.n	80023aa <LSM6DS3_ACC_GYRO_W_WUEvOnInt1+0x58>
  {
    return MEMS_ERROR;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e000      	b.n	80023ac <LSM6DS3_ACC_GYRO_W_WUEvOnInt1+0x5a>
  }

  return MEMS_SUCCESS;
 80023aa:	2301      	movs	r3, #1
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b004      	add	sp, #16
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SingleTapOnInt1(void *handle, LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_t newValue)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	000a      	movs	r2, r1
 80023be:	1cfb      	adds	r3, r7, #3
 80023c0:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1))
 80023c2:	230f      	movs	r3, #15
 80023c4:	18fa      	adds	r2, r7, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	2301      	movs	r3, #1
 80023ca:	215e      	movs	r1, #94	; 0x5e
 80023cc:	f7fe fbe1 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80023d0:	1e03      	subs	r3, r0, #0
 80023d2:	d101      	bne.n	80023d8 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt1+0x24>
  {
    return MEMS_ERROR;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e01a      	b.n	800240e <LSM6DS3_ACC_GYRO_W_SingleTapOnInt1+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_MASK;
 80023d8:	210f      	movs	r1, #15
 80023da:	187b      	adds	r3, r7, r1
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2240      	movs	r2, #64	; 0x40
 80023e0:	4393      	bics	r3, r2
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 80023e8:	187b      	adds	r3, r7, r1
 80023ea:	781a      	ldrb	r2, [r3, #0]
 80023ec:	1cfb      	adds	r3, r7, #3
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1))
 80023f8:	187a      	adds	r2, r7, r1
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	2301      	movs	r3, #1
 80023fe:	215e      	movs	r1, #94	; 0x5e
 8002400:	f7fe fba6 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8002404:	1e03      	subs	r3, r0, #0
 8002406:	d101      	bne.n	800240c <LSM6DS3_ACC_GYRO_W_SingleTapOnInt1+0x58>
  {
    return MEMS_ERROR;
 8002408:	2300      	movs	r3, #0
 800240a:	e000      	b.n	800240e <LSM6DS3_ACC_GYRO_W_SingleTapOnInt1+0x5a>
  }

  return MEMS_SUCCESS;
 800240c:	2301      	movs	r3, #1
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b004      	add	sp, #16
 8002414:	bd80      	pop	{r7, pc}

08002416 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt2>:
* Input          : LSM6DS3_ACC_GYRO_INT2_TILT_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TiltEvOnInt2(void *handle, LSM6DS3_ACC_GYRO_INT2_TILT_t newValue)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	000a      	movs	r2, r1
 8002420:	1cfb      	adds	r3, r7, #3
 8002422:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1))
 8002424:	230f      	movs	r3, #15
 8002426:	18fa      	adds	r2, r7, r3
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	2301      	movs	r3, #1
 800242c:	215f      	movs	r1, #95	; 0x5f
 800242e:	f7fe fbb0 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8002432:	1e03      	subs	r3, r0, #0
 8002434:	d101      	bne.n	800243a <LSM6DS3_ACC_GYRO_W_TiltEvOnInt2+0x24>
  {
    return MEMS_ERROR;
 8002436:	2300      	movs	r3, #0
 8002438:	e01a      	b.n	8002470 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt2+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT2_TILT_MASK;
 800243a:	210f      	movs	r1, #15
 800243c:	187b      	adds	r3, r7, r1
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2202      	movs	r2, #2
 8002442:	4393      	bics	r3, r2
 8002444:	b2da      	uxtb	r2, r3
 8002446:	187b      	adds	r3, r7, r1
 8002448:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 800244a:	187b      	adds	r3, r7, r1
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	1cfb      	adds	r3, r7, #3
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	b2da      	uxtb	r2, r3
 8002456:	187b      	adds	r3, r7, r1
 8002458:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1))
 800245a:	187a      	adds	r2, r7, r1
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	2301      	movs	r3, #1
 8002460:	215f      	movs	r1, #95	; 0x5f
 8002462:	f7fe fb75 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8002466:	1e03      	subs	r3, r0, #0
 8002468:	d101      	bne.n	800246e <LSM6DS3_ACC_GYRO_W_TiltEvOnInt2+0x58>
  {
    return MEMS_ERROR;
 800246a:	2300      	movs	r3, #0
 800246c:	e000      	b.n	8002470 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt2+0x5a>
  }

  return MEMS_SUCCESS;
 800246e:	2301      	movs	r3, #1
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	b004      	add	sp, #16
 8002476:	bd80      	pop	{r7, pc}

08002478 <LSM6DS3_ACC_GYRO_W_6DEvOnInt2>:
* Input          : LSM6DS3_ACC_GYRO_INT2_6D_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_6DEvOnInt2(void *handle, LSM6DS3_ACC_GYRO_INT2_6D_t newValue)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	000a      	movs	r2, r1
 8002482:	1cfb      	adds	r3, r7, #3
 8002484:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1))
 8002486:	230f      	movs	r3, #15
 8002488:	18fa      	adds	r2, r7, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	2301      	movs	r3, #1
 800248e:	215f      	movs	r1, #95	; 0x5f
 8002490:	f7fe fb7f 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8002494:	1e03      	subs	r3, r0, #0
 8002496:	d101      	bne.n	800249c <LSM6DS3_ACC_GYRO_W_6DEvOnInt2+0x24>
  {
    return MEMS_ERROR;
 8002498:	2300      	movs	r3, #0
 800249a:	e01a      	b.n	80024d2 <LSM6DS3_ACC_GYRO_W_6DEvOnInt2+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT2_6D_MASK;
 800249c:	210f      	movs	r1, #15
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2204      	movs	r2, #4
 80024a4:	4393      	bics	r3, r2
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	1cfb      	adds	r3, r7, #3
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1))
 80024bc:	187a      	adds	r2, r7, r1
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	2301      	movs	r3, #1
 80024c2:	215f      	movs	r1, #95	; 0x5f
 80024c4:	f7fe fb44 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 80024c8:	1e03      	subs	r3, r0, #0
 80024ca:	d101      	bne.n	80024d0 <LSM6DS3_ACC_GYRO_W_6DEvOnInt2+0x58>
  {
    return MEMS_ERROR;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <LSM6DS3_ACC_GYRO_W_6DEvOnInt2+0x5a>
  }

  return MEMS_SUCCESS;
 80024d0:	2301      	movs	r3, #1
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b004      	add	sp, #16
 80024d8:	bd80      	pop	{r7, pc}

080024da <LSM6DS3_ACC_GYRO_W_TapEvOnInt2>:
* Input          : LSM6DS3_ACC_GYRO_INT2_TAP_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TapEvOnInt2(void *handle, LSM6DS3_ACC_GYRO_INT2_TAP_t newValue)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	000a      	movs	r2, r1
 80024e4:	1cfb      	adds	r3, r7, #3
 80024e6:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1))
 80024e8:	230f      	movs	r3, #15
 80024ea:	18fa      	adds	r2, r7, r3
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	2301      	movs	r3, #1
 80024f0:	215f      	movs	r1, #95	; 0x5f
 80024f2:	f7fe fb4e 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80024f6:	1e03      	subs	r3, r0, #0
 80024f8:	d101      	bne.n	80024fe <LSM6DS3_ACC_GYRO_W_TapEvOnInt2+0x24>
  {
    return MEMS_ERROR;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e01a      	b.n	8002534 <LSM6DS3_ACC_GYRO_W_TapEvOnInt2+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT2_TAP_MASK;
 80024fe:	210f      	movs	r1, #15
 8002500:	187b      	adds	r3, r7, r1
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2208      	movs	r2, #8
 8002506:	4393      	bics	r3, r2
 8002508:	b2da      	uxtb	r2, r3
 800250a:	187b      	adds	r3, r7, r1
 800250c:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 800250e:	187b      	adds	r3, r7, r1
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	1cfb      	adds	r3, r7, #3
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	b2da      	uxtb	r2, r3
 800251a:	187b      	adds	r3, r7, r1
 800251c:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1))
 800251e:	187a      	adds	r2, r7, r1
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	2301      	movs	r3, #1
 8002524:	215f      	movs	r1, #95	; 0x5f
 8002526:	f7fe fb13 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 800252a:	1e03      	subs	r3, r0, #0
 800252c:	d101      	bne.n	8002532 <LSM6DS3_ACC_GYRO_W_TapEvOnInt2+0x58>
  {
    return MEMS_ERROR;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <LSM6DS3_ACC_GYRO_W_TapEvOnInt2+0x5a>
  }

  return MEMS_SUCCESS;
 8002532:	2301      	movs	r3, #1
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	b004      	add	sp, #16
 800253a:	bd80      	pop	{r7, pc}

0800253c <LSM6DS3_ACC_GYRO_W_FFEvOnInt2>:
* Input          : LSM6DS3_ACC_GYRO_INT2_FF_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FFEvOnInt2(void *handle, LSM6DS3_ACC_GYRO_INT2_FF_t newValue)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	000a      	movs	r2, r1
 8002546:	1cfb      	adds	r3, r7, #3
 8002548:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1))
 800254a:	230f      	movs	r3, #15
 800254c:	18fa      	adds	r2, r7, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	2301      	movs	r3, #1
 8002552:	215f      	movs	r1, #95	; 0x5f
 8002554:	f7fe fb1d 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8002558:	1e03      	subs	r3, r0, #0
 800255a:	d101      	bne.n	8002560 <LSM6DS3_ACC_GYRO_W_FFEvOnInt2+0x24>
  {
    return MEMS_ERROR;
 800255c:	2300      	movs	r3, #0
 800255e:	e01a      	b.n	8002596 <LSM6DS3_ACC_GYRO_W_FFEvOnInt2+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT2_FF_MASK;
 8002560:	210f      	movs	r1, #15
 8002562:	187b      	adds	r3, r7, r1
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2210      	movs	r2, #16
 8002568:	4393      	bics	r3, r2
 800256a:	b2da      	uxtb	r2, r3
 800256c:	187b      	adds	r3, r7, r1
 800256e:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8002570:	187b      	adds	r3, r7, r1
 8002572:	781a      	ldrb	r2, [r3, #0]
 8002574:	1cfb      	adds	r3, r7, #3
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4313      	orrs	r3, r2
 800257a:	b2da      	uxtb	r2, r3
 800257c:	187b      	adds	r3, r7, r1
 800257e:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1))
 8002580:	187a      	adds	r2, r7, r1
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	2301      	movs	r3, #1
 8002586:	215f      	movs	r1, #95	; 0x5f
 8002588:	f7fe fae2 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 800258c:	1e03      	subs	r3, r0, #0
 800258e:	d101      	bne.n	8002594 <LSM6DS3_ACC_GYRO_W_FFEvOnInt2+0x58>
  {
    return MEMS_ERROR;
 8002590:	2300      	movs	r3, #0
 8002592:	e000      	b.n	8002596 <LSM6DS3_ACC_GYRO_W_FFEvOnInt2+0x5a>
  }

  return MEMS_SUCCESS;
 8002594:	2301      	movs	r3, #1
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b004      	add	sp, #16
 800259c:	bd80      	pop	{r7, pc}

0800259e <LSM6DS3_ACC_GYRO_W_WUEvOnInt2>:
* Input          : LSM6DS3_ACC_GYRO_INT2_WU_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_WUEvOnInt2(void *handle, LSM6DS3_ACC_GYRO_INT2_WU_t newValue)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	000a      	movs	r2, r1
 80025a8:	1cfb      	adds	r3, r7, #3
 80025aa:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1))
 80025ac:	230f      	movs	r3, #15
 80025ae:	18fa      	adds	r2, r7, r3
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	2301      	movs	r3, #1
 80025b4:	215f      	movs	r1, #95	; 0x5f
 80025b6:	f7fe faec 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d101      	bne.n	80025c2 <LSM6DS3_ACC_GYRO_W_WUEvOnInt2+0x24>
  {
    return MEMS_ERROR;
 80025be:	2300      	movs	r3, #0
 80025c0:	e01a      	b.n	80025f8 <LSM6DS3_ACC_GYRO_W_WUEvOnInt2+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT2_WU_MASK;
 80025c2:	210f      	movs	r1, #15
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2220      	movs	r2, #32
 80025ca:	4393      	bics	r3, r2
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	1cfb      	adds	r3, r7, #3
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1))
 80025e2:	187a      	adds	r2, r7, r1
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	2301      	movs	r3, #1
 80025e8:	215f      	movs	r1, #95	; 0x5f
 80025ea:	f7fe fab1 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 80025ee:	1e03      	subs	r3, r0, #0
 80025f0:	d101      	bne.n	80025f6 <LSM6DS3_ACC_GYRO_W_WUEvOnInt2+0x58>
  {
    return MEMS_ERROR;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <LSM6DS3_ACC_GYRO_W_WUEvOnInt2+0x5a>
  }

  return MEMS_SUCCESS;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b004      	add	sp, #16
 80025fe:	bd80      	pop	{r7, pc}

08002600 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt2>:
* Input          : LSM6DS3_ACC_GYRO_INT2_SINGLE_TAP_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SingleTapOnInt2(void *handle, LSM6DS3_ACC_GYRO_INT2_SINGLE_TAP_t newValue)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	000a      	movs	r2, r1
 800260a:	1cfb      	adds	r3, r7, #3
 800260c:	701a      	strb	r2, [r3, #0]
  u8_t value;

  if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1))
 800260e:	230f      	movs	r3, #15
 8002610:	18fa      	adds	r2, r7, r3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	2301      	movs	r3, #1
 8002616:	215f      	movs	r1, #95	; 0x5f
 8002618:	f7fe fabb 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 800261c:	1e03      	subs	r3, r0, #0
 800261e:	d101      	bne.n	8002624 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt2+0x24>
  {
    return MEMS_ERROR;
 8002620:	2300      	movs	r3, #0
 8002622:	e01a      	b.n	800265a <LSM6DS3_ACC_GYRO_W_SingleTapOnInt2+0x5a>
  }

  value &= ~LSM6DS3_ACC_GYRO_INT2_SINGLE_TAP_MASK;
 8002624:	210f      	movs	r1, #15
 8002626:	187b      	adds	r3, r7, r1
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2240      	movs	r2, #64	; 0x40
 800262c:	4393      	bics	r3, r2
 800262e:	b2da      	uxtb	r2, r3
 8002630:	187b      	adds	r3, r7, r1
 8002632:	701a      	strb	r2, [r3, #0]
  value |= newValue;
 8002634:	187b      	adds	r3, r7, r1
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	1cfb      	adds	r3, r7, #3
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4313      	orrs	r3, r2
 800263e:	b2da      	uxtb	r2, r3
 8002640:	187b      	adds	r3, r7, r1
 8002642:	701a      	strb	r2, [r3, #0]

  if (!LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1))
 8002644:	187a      	adds	r2, r7, r1
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	2301      	movs	r3, #1
 800264a:	215f      	movs	r1, #95	; 0x5f
 800264c:	f7fe fa80 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 8002650:	1e03      	subs	r3, r0, #0
 8002652:	d101      	bne.n	8002658 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt2+0x58>
  {
    return MEMS_ERROR;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <LSM6DS3_ACC_GYRO_W_SingleTapOnInt2+0x5a>
  }

  return MEMS_SUCCESS;
 8002658:	2301      	movs	r3, #1
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b004      	add	sp, #16
 8002660:	bd80      	pop	{r7, pc}

08002662 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>:
* Input          : pointer to [u8_t]
* Output         : GetFIFOData buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_Get_GetFIFOData(void *handle, u8_t *buff)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  u8_t i, j, k;
  u8_t numberOfByteForDimension;

  numberOfByteForDimension = 2 / 1;
 800266c:	230c      	movs	r3, #12
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	2202      	movs	r2, #2
 8002672:	701a      	strb	r2, [r3, #0]

  k = 0;
 8002674:	230d      	movs	r3, #13
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 1; i++)
 800267c:	230f      	movs	r3, #15
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e02f      	b.n	80026e6 <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x84>
  {
    for (j = 0; j < numberOfByteForDimension; j++)
 8002686:	230e      	movs	r3, #14
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	e01c      	b.n	80026ca <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x68>
    {
      if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_DATA_OUT_L + k, &buff[k], 1))
 8002690:	220d      	movs	r2, #13
 8002692:	18bb      	adds	r3, r7, r2
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	333e      	adds	r3, #62	; 0x3e
 8002698:	b2d9      	uxtb	r1, r3
 800269a:	18bb      	adds	r3, r7, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	18d2      	adds	r2, r2, r3
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	2301      	movs	r3, #1
 80026a6:	f7fe fa74 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 80026aa:	1e03      	subs	r3, r0, #0
 80026ac:	d101      	bne.n	80026b2 <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x50>
      {
        return MEMS_ERROR;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e01f      	b.n	80026f2 <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x90>
      }
      k++;
 80026b2:	210d      	movs	r1, #13
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	3201      	adds	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < numberOfByteForDimension; j++)
 80026be:	210e      	movs	r1, #14
 80026c0:	187b      	adds	r3, r7, r1
 80026c2:	781a      	ldrb	r2, [r3, #0]
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	3201      	adds	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	230e      	movs	r3, #14
 80026cc:	18fa      	adds	r2, r7, r3
 80026ce:	230c      	movs	r3, #12
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	7812      	ldrb	r2, [r2, #0]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d3da      	bcc.n	8002690 <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x2e>
  for (i = 0; i < 1; i++)
 80026da:	210f      	movs	r1, #15
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	3201      	adds	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	230f      	movs	r3, #15
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0ca      	beq.n	8002686 <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x24>
    }
  }

  return MEMS_SUCCESS;
 80026f0:	2301      	movs	r3, #1
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b004      	add	sp, #16
 80026f8:	bd80      	pop	{r7, pc}

080026fa <LSM6DS3_ACC_GYRO_Get_GetStepCounter>:
* Input          : pointer to [u8_t]
* Output         : GetStepCounter buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_Get_GetStepCounter(void *handle, u8_t *buff)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  u8_t i, j, k;
  u8_t numberOfByteForDimension;

  numberOfByteForDimension = 2 / 1;
 8002704:	230c      	movs	r3, #12
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	2202      	movs	r2, #2
 800270a:	701a      	strb	r2, [r3, #0]

  k = 0;
 800270c:	230d      	movs	r3, #13
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 1; i++)
 8002714:	230f      	movs	r3, #15
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e02f      	b.n	800277e <LSM6DS3_ACC_GYRO_Get_GetStepCounter+0x84>
  {
    for (j = 0; j < numberOfByteForDimension; j++)
 800271e:	230e      	movs	r3, #14
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	e01c      	b.n	8002762 <LSM6DS3_ACC_GYRO_Get_GetStepCounter+0x68>
    {
      if (!LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_STEP_COUNTER_L + k, &buff[k], 1))
 8002728:	220d      	movs	r2, #13
 800272a:	18bb      	adds	r3, r7, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	334b      	adds	r3, #75	; 0x4b
 8002730:	b2d9      	uxtb	r1, r3
 8002732:	18bb      	adds	r3, r7, r2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	18d2      	adds	r2, r2, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	2301      	movs	r3, #1
 800273e:	f7fe fa28 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8002742:	1e03      	subs	r3, r0, #0
 8002744:	d101      	bne.n	800274a <LSM6DS3_ACC_GYRO_Get_GetStepCounter+0x50>
      {
        return MEMS_ERROR;
 8002746:	2300      	movs	r3, #0
 8002748:	e01f      	b.n	800278a <LSM6DS3_ACC_GYRO_Get_GetStepCounter+0x90>
      }
      k++;
 800274a:	210d      	movs	r1, #13
 800274c:	187b      	adds	r3, r7, r1
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	187b      	adds	r3, r7, r1
 8002752:	3201      	adds	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < numberOfByteForDimension; j++)
 8002756:	210e      	movs	r1, #14
 8002758:	187b      	adds	r3, r7, r1
 800275a:	781a      	ldrb	r2, [r3, #0]
 800275c:	187b      	adds	r3, r7, r1
 800275e:	3201      	adds	r2, #1
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	230e      	movs	r3, #14
 8002764:	18fa      	adds	r2, r7, r3
 8002766:	230c      	movs	r3, #12
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d3da      	bcc.n	8002728 <LSM6DS3_ACC_GYRO_Get_GetStepCounter+0x2e>
  for (i = 0; i < 1; i++)
 8002772:	210f      	movs	r1, #15
 8002774:	187b      	adds	r3, r7, r1
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	187b      	adds	r3, r7, r1
 800277a:	3201      	adds	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	230f      	movs	r3, #15
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ca      	beq.n	800271e <LSM6DS3_ACC_GYRO_Get_GetStepCounter+0x24>
    }
  }

  return MEMS_SUCCESS;
 8002788:	2301      	movs	r3, #1
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b004      	add	sp, #16
 8002790:	bd80      	pop	{r7, pc}

08002792 <LSM6DS3_ACC_GYRO_W_PedoThreshold>:
* Input          : pointer to [u8_t]
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_PedoThreshold(void *handle, u8_t newValue)
{
 8002792:	b590      	push	{r4, r7, lr}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	000a      	movs	r2, r1
 800279c:	1cfb      	adds	r3, r7, #3
 800279e:	701a      	strb	r2, [r3, #0]
  u8_t value;

  /* Open Embedded Function Register page*/
  LSM6DS3_ACC_GYRO_W_EmbeddedAccess(handle, LSM6DS3H_ACC_GYRO_FUNC_CFG_ENABLED);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2180      	movs	r1, #128	; 0x80
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7fe fb46 	bl	8000e36 <LSM6DS3_ACC_GYRO_W_EmbeddedAccess>

  /* read current value */
  LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CONFIG_PEDO_THS_MIN, &value, 1);
 80027aa:	210f      	movs	r1, #15
 80027ac:	000c      	movs	r4, r1
 80027ae:	187a      	adds	r2, r7, r1
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	2301      	movs	r3, #1
 80027b4:	210f      	movs	r1, #15
 80027b6:	f7fe f9ec 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>

  value &= ~0x1F;
 80027ba:	0021      	movs	r1, r4
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	221f      	movs	r2, #31
 80027c2:	4393      	bics	r3, r2
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	701a      	strb	r2, [r3, #0]
  value |= (newValue & 0x1F);
 80027ca:	1cfb      	adds	r3, r7, #3
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	221f      	movs	r2, #31
 80027d2:	4013      	ands	r3, r2
 80027d4:	b25a      	sxtb	r2, r3
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	4313      	orrs	r3, r2
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	701a      	strb	r2, [r3, #0]

  /* write new value */
  LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CONFIG_PEDO_THS_MIN, &value, 1);
 80027e6:	187a      	adds	r2, r7, r1
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	2301      	movs	r3, #1
 80027ec:	210f      	movs	r1, #15
 80027ee:	f7fe f9af 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>

  /* Close Embedded Function Register page*/
  LSM6DS3_ACC_GYRO_W_EmbeddedAccess(handle, LSM6DS3H_ACC_GYRO_FUNC_CFG_DISABLED);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2100      	movs	r1, #0
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7fe fb1d 	bl	8000e36 <LSM6DS3_ACC_GYRO_W_EmbeddedAccess>

  return MEMS_SUCCESS;
 80027fc:	2301      	movs	r3, #1
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b005      	add	sp, #20
 8002804:	bd90      	pop	{r4, r7, pc}
	...

08002808 <LSM6DS3_X_Init>:
 * @brief Initialize the LSM6DS3 accelerometer sensor 初始化LSM6DS3加速度计传感器
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Init(DrvContextTypeDef *handle) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

	uint8_t axes_status[] = { 1, 1, 1 };
 8002810:	230c      	movs	r3, #12
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	4a2c      	ldr	r2, [pc, #176]	; (80028c8 <LSM6DS3_X_Init+0xc0>)
 8002816:	8811      	ldrh	r1, [r2, #0]
 8002818:	8019      	strh	r1, [r3, #0]
 800281a:	7892      	ldrb	r2, [r2, #2]
 800281c:	709a      	strb	r2, [r3, #2]

	if (LSM6DS3_Check_WhoAmI(handle) == COMPONENT_ERROR) {
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f000 fc4f 	bl	80030c4 <LSM6DS3_Check_WhoAmI>
 8002826:	0003      	movs	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <LSM6DS3_X_Init+0x28>
		return COMPONENT_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e047      	b.n	80028c0 <LSM6DS3_X_Init+0xb8>
	}

	/* Enable register address automatically incremented during a multiple byte
	 access with a serial interface. */
	if (LSM6DS3_ACC_GYRO_W_IF_Addr_Incr((void*) handle,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2104      	movs	r1, #4
 8002834:	0018      	movs	r0, r3
 8002836:	f7fe fc97 	bl	8001168 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d101      	bne.n	8002842 <LSM6DS3_X_Init+0x3a>
			LSM6DS3_ACC_GYRO_IF_INC_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e03e      	b.n	80028c0 <LSM6DS3_X_Init+0xb8>
	}

	/* Enable BDU */
	if (LSM6DS3_ACC_GYRO_W_BDU((void*) handle,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2140      	movs	r1, #64	; 0x40
 8002846:	0018      	movs	r0, r3
 8002848:	f7fe f9e0 	bl	8000c0c <LSM6DS3_ACC_GYRO_W_BDU>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d101      	bne.n	8002854 <LSM6DS3_X_Init+0x4c>
			LSM6DS3_ACC_GYRO_BDU_BLOCK_UPDATE) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e035      	b.n	80028c0 <LSM6DS3_X_Init+0xb8>
	}

	/* FIFO mode selection */
	if (LSM6DS3_ACC_GYRO_W_FIFO_MODE((void*) handle,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2100      	movs	r1, #0
 8002858:	0018      	movs	r0, r3
 800285a:	f7fe fbc1 	bl	8000fe0 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>
 800285e:	1e03      	subs	r3, r0, #0
 8002860:	d101      	bne.n	8002866 <LSM6DS3_X_Init+0x5e>
			LSM6DS3_ACC_GYRO_FIFO_MODE_BYPASS) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e02c      	b.n	80028c0 <LSM6DS3_X_Init+0xb8>
	}

	/* Select default output data rate. */
	if (LSM6DS3_X_Set_ODR_When_Disabled(handle, ODR_HIGH) == COMPONENT_ERROR) {
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2104      	movs	r1, #4
 800286a:	0018      	movs	r0, r3
 800286c:	f000 fd24 	bl	80032b8 <LSM6DS3_X_Set_ODR_When_Disabled>
 8002870:	0003      	movs	r3, r0
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <LSM6DS3_X_Init+0x72>
		return COMPONENT_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e022      	b.n	80028c0 <LSM6DS3_X_Init+0xb8>
	}

	/* Output data rate selection - power down. */
	if (LSM6DS3_ACC_GYRO_W_ODR_XL((void*) handle,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2100      	movs	r1, #0
 800287e:	0018      	movs	r0, r3
 8002880:	f7fe fa8d 	bl	8000d9e <LSM6DS3_ACC_GYRO_W_ODR_XL>
 8002884:	1e03      	subs	r3, r0, #0
 8002886:	d101      	bne.n	800288c <LSM6DS3_X_Init+0x84>
			LSM6DS3_ACC_GYRO_ODR_XL_POWER_DOWN) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e019      	b.n	80028c0 <LSM6DS3_X_Init+0xb8>
	}

	/* Full scale selection. */
	if (LSM6DS3_X_Set_FS(handle, FS_LOW) == COMPONENT_ERROR) {
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2100      	movs	r1, #0
 8002890:	0018      	movs	r0, r3
 8002892:	f000 fabb 	bl	8002e0c <LSM6DS3_X_Set_FS>
 8002896:	0003      	movs	r3, r0
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <LSM6DS3_X_Init+0x98>
		return COMPONENT_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e00f      	b.n	80028c0 <LSM6DS3_X_Init+0xb8>
	}

	/* Enable axes. */
	if (LSM6DS3_X_Set_Axes_Status(handle, axes_status) == COMPONENT_ERROR) {
 80028a0:	230c      	movs	r3, #12
 80028a2:	18fa      	adds	r2, r7, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	0011      	movs	r1, r2
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 fb5d 	bl	8002f68 <LSM6DS3_X_Set_Axes_Status>
 80028ae:	0003      	movs	r3, r0
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <LSM6DS3_X_Init+0xb0>
		return COMPONENT_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e003      	b.n	80028c0 <LSM6DS3_X_Init+0xb8>
	}

	handle->isInitialized = 1;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	715a      	strb	r2, [r3, #5]

	return COMPONENT_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b004      	add	sp, #16
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	08009c14 	.word	0x08009c14

080028cc <LSM6DS3_X_DeInit>:
 * @brief Deinitialize the LSM6DS3 accelerometer sensor 取消初始化LSM6DS3加速度计传感器
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_DeInit(DrvContextTypeDef *handle) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

	ACCELERO_Data_t *pData = (ACCELERO_Data_t*) handle->pData;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	60fb      	str	r3, [r7, #12]
	LSM6DS3_X_Data_t *pComponentData = (LSM6DS3_X_Data_t*) pData->pComponentData;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60bb      	str	r3, [r7, #8]

	if (LSM6DS3_Check_WhoAmI(handle) == COMPONENT_ERROR) {
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 fbee 	bl	80030c4 <LSM6DS3_Check_WhoAmI>
 80028e8:	0003      	movs	r3, r0
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <LSM6DS3_X_DeInit+0x26>
		return COMPONENT_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e04e      	b.n	8002990 <LSM6DS3_X_DeInit+0xc4>
	}

	/* Try to disable free fall detection */
	if (LSM6DS3_X_Disable_Free_Fall_Detection(handle) == COMPONENT_ERROR) {
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 fe6d 	bl	80035d4 <LSM6DS3_X_Disable_Free_Fall_Detection>
 80028fa:	0003      	movs	r3, r0
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <LSM6DS3_X_DeInit+0x38>
		return COMPONENT_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e045      	b.n	8002990 <LSM6DS3_X_DeInit+0xc4>
	}

	/* Try to disable 6D orientation */
	if (LSM6DS3_X_Disable_6D_Orientation(handle) == COMPONENT_ERROR) {
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0018      	movs	r0, r3
 8002908:	f001 fbcc 	bl	80040a4 <LSM6DS3_X_Disable_6D_Orientation>
 800290c:	0003      	movs	r3, r0
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <LSM6DS3_X_DeInit+0x4a>
		return COMPONENT_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e03c      	b.n	8002990 <LSM6DS3_X_DeInit+0xc4>
	}

	/* Try to disable pedometer */
	if (LSM6DS3_X_Disable_Pedometer(handle) == COMPONENT_ERROR) {
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f000 ff09 	bl	8003730 <LSM6DS3_X_Disable_Pedometer>
 800291e:	0003      	movs	r3, r0
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <LSM6DS3_X_DeInit+0x5c>
		return COMPONENT_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e033      	b.n	8002990 <LSM6DS3_X_DeInit+0xc4>
	}

	/* Try to disable single tap detection */
	if (LSM6DS3_X_Disable_Single_Tap_Detection(handle) == COMPONENT_ERROR) {
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	0018      	movs	r0, r3
 800292c:	f001 f980 	bl	8003c30 <LSM6DS3_X_Disable_Single_Tap_Detection>
 8002930:	0003      	movs	r3, r0
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <LSM6DS3_X_DeInit+0x6e>
		return COMPONENT_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e02a      	b.n	8002990 <LSM6DS3_X_DeInit+0xc4>
	}

	/* Try to disable double tap detection */
	if (LSM6DS3_X_Disable_Double_Tap_Detection(handle) == COMPONENT_ERROR) {
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f001 fa7d 	bl	8003e3c <LSM6DS3_X_Disable_Double_Tap_Detection>
 8002942:	0003      	movs	r3, r0
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <LSM6DS3_X_DeInit+0x80>
		return COMPONENT_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e021      	b.n	8002990 <LSM6DS3_X_DeInit+0xc4>
	}

	/* Try to disable tilt detection */
	if (LSM6DS3_X_Disable_Tilt_Detection(handle) == COMPONENT_ERROR) {
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	0018      	movs	r0, r3
 8002950:	f000 ffe4 	bl	800391c <LSM6DS3_X_Disable_Tilt_Detection>
 8002954:	0003      	movs	r3, r0
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <LSM6DS3_X_DeInit+0x92>
		return COMPONENT_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e018      	b.n	8002990 <LSM6DS3_X_DeInit+0xc4>
	}

	/* Try to disable wake up detection */
	if (LSM6DS3_X_Disable_Wake_Up_Detection(handle) == COMPONENT_ERROR) {
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	0018      	movs	r0, r3
 8002962:	f001 f881 	bl	8003a68 <LSM6DS3_X_Disable_Wake_Up_Detection>
 8002966:	0003      	movs	r3, r0
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <LSM6DS3_X_DeInit+0xa4>
		return COMPONENT_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e00f      	b.n	8002990 <LSM6DS3_X_DeInit+0xc4>
	}

	/* Disable the component */
	if (LSM6DS3_X_Sensor_Disable(handle) == COMPONENT_ERROR) {
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	0018      	movs	r0, r3
 8002974:	f000 f834 	bl	80029e0 <LSM6DS3_X_Sensor_Disable>
 8002978:	0003      	movs	r3, r0
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <LSM6DS3_X_DeInit+0xb6>
		return COMPONENT_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e006      	b.n	8002990 <LSM6DS3_X_DeInit+0xc4>
	}

	/* Reset output data rate. */
	pComponentData->Previous_ODR = 0.0f;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

	handle->isInitialized = 0;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	715a      	strb	r2, [r3, #5]

	return COMPONENT_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	b004      	add	sp, #16
 8002996:	bd80      	pop	{r7, pc}

08002998 <LSM6DS3_X_Sensor_Enable>:
 * @brief Enable the LSM6DS3 accelerometer sensor 启用LSM6DS3加速度传感器
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
 DrvStatusTypeDef LSM6DS3_X_Sensor_Enable(DrvContextTypeDef *handle) {
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	ACCELERO_Data_t *pData = (ACCELERO_Data_t*) handle->pData;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	60fb      	str	r3, [r7, #12]
	LSM6DS3_X_Data_t *pComponentData = (LSM6DS3_X_Data_t*) pData->pComponentData;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60bb      	str	r3, [r7, #8]

	/* Check if the component is already enabled */
	if (handle->isEnabled == 1) {
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	799b      	ldrb	r3, [r3, #6]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <LSM6DS3_X_Sensor_Enable+0x20>
		return COMPONENT_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	e00f      	b.n	80029d8 <LSM6DS3_X_Sensor_Enable+0x40>
	}

	/* Output data rate selection. */
	if (LSM6DS3_X_Set_ODR_Value_When_Enabled(handle,
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	1c11      	adds	r1, r2, #0
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 fcb5 	bl	8003330 <LSM6DS3_X_Set_ODR_Value_When_Enabled>
 80029c6:	0003      	movs	r3, r0
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <LSM6DS3_X_Sensor_Enable+0x38>
			pComponentData->Previous_ODR) == COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e003      	b.n	80029d8 <LSM6DS3_X_Sensor_Enable+0x40>
	}

	handle->isEnabled = 1;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	719a      	strb	r2, [r3, #6]

	return COMPONENT_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bd80      	pop	{r7, pc}

080029e0 <LSM6DS3_X_Sensor_Disable>:
 * @brief Disable the LSM6DS3 accelerometer sensor 禁用LSM6DS3加速度传感器
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Sensor_Disable(DrvContextTypeDef *handle) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	ACCELERO_Data_t *pData = (ACCELERO_Data_t*) handle->pData;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	60fb      	str	r3, [r7, #12]
	LSM6DS3_X_Data_t *pComponentData = (LSM6DS3_X_Data_t*) pData->pComponentData;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60bb      	str	r3, [r7, #8]

	/* Check if the component is already disabled */
	if (handle->isEnabled == 0) {
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	799b      	ldrb	r3, [r3, #6]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <LSM6DS3_X_Sensor_Disable+0x20>
		return COMPONENT_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	e017      	b.n	8002a30 <LSM6DS3_X_Sensor_Disable+0x50>
	}

	/* Store actual output data rate. */
	if (LSM6DS3_X_Get_ODR(handle, &(pComponentData->Previous_ODR))
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	0011      	movs	r1, r2
 8002a06:	0018      	movs	r0, r3
 8002a08:	f000 f8fa 	bl	8002c00 <LSM6DS3_X_Get_ODR>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <LSM6DS3_X_Sensor_Disable+0x36>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00c      	b.n	8002a30 <LSM6DS3_X_Sensor_Disable+0x50>
	}

	/* Output data rate selection - power down. */
	if (LSM6DS3_ACC_GYRO_W_ODR_XL((void*) handle,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2100      	movs	r1, #0
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f7fe f9bf 	bl	8000d9e <LSM6DS3_ACC_GYRO_W_ODR_XL>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d101      	bne.n	8002a28 <LSM6DS3_X_Sensor_Disable+0x48>
			LSM6DS3_ACC_GYRO_ODR_XL_POWER_DOWN) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e003      	b.n	8002a30 <LSM6DS3_X_Sensor_Disable+0x50>
	}

	handle->isEnabled = 0;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	719a      	strb	r2, [r3, #6]

	return COMPONENT_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b004      	add	sp, #16
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <LSM6DS3_X_Get_WhoAmI>:
 * @param who_am_i pointer to the value of WHO_AM_I register
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_WhoAmI(DrvContextTypeDef *handle,
		uint8_t *who_am_i) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]

	return LSM6DS3_Get_WhoAmI(handle, who_am_i);
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	0011      	movs	r1, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 fb27 	bl	800309c <LSM6DS3_Get_WhoAmI>
 8002a4e:	0003      	movs	r3, r0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b002      	add	sp, #8
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <LSM6DS3_X_Check_WhoAmI>:
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
//static
static DrvStatusTypeDef LSM6DS3_X_Check_WhoAmI(DrvContextTypeDef *handle) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

	return LSM6DS3_Check_WhoAmI(handle);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	0018      	movs	r0, r3
 8002a64:	f000 fb2e 	bl	80030c4 <LSM6DS3_Check_WhoAmI>
 8002a68:	0003      	movs	r3, r0
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b002      	add	sp, #8
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <LSM6DS3_X_Get_Axes>:
 * @param acceleration pointer where the values of the axes are written
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_Axes(DrvContextTypeDef *handle,
		SensorAxes_t *acceleration) {
 8002a72:	b590      	push	{r4, r7, lr}
 8002a74:	b087      	sub	sp, #28
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]

	int16_t dataRaw[3];
	float sensitivity = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]

	/* Read raw data from LSM6DS3 output register. */
	if (LSM6DS3_X_Get_Axes_Raw(handle, dataRaw) == COMPONENT_ERROR) {
 8002a80:	2310      	movs	r3, #16
 8002a82:	18fa      	adds	r2, r7, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	0011      	movs	r1, r2
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 fb90 	bl	80031ae <LSM6DS3_X_Get_Axes_Raw>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <LSM6DS3_X_Get_Axes+0x26>
		return COMPONENT_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e046      	b.n	8002b26 <LSM6DS3_X_Get_Axes+0xb4>
	}

	/* Get LSM6DS3 actual sensitivity. */
	if (LSM6DS3_X_Get_Sensitivity(handle, &sensitivity) == COMPONENT_ERROR) {
 8002a98:	230c      	movs	r3, #12
 8002a9a:	18fa      	adds	r2, r7, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0011      	movs	r1, r2
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f000 f86b 	bl	8002b7c <LSM6DS3_X_Get_Sensitivity>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <LSM6DS3_X_Get_Axes+0x3e>
		return COMPONENT_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e03a      	b.n	8002b26 <LSM6DS3_X_Get_Axes+0xb4>
	}

	/* Calculate the data. */
	acceleration->AXIS_X = (int32_t) (dataRaw[0] * sensitivity);
 8002ab0:	2410      	movs	r4, #16
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7fd ffd5 	bl	8000a68 <__aeabi_i2f>
 8002abe:	1c02      	adds	r2, r0, #0
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1c19      	adds	r1, r3, #0
 8002ac4:	1c10      	adds	r0, r2, #0
 8002ac6:	f7fd fe7d 	bl	80007c4 <__aeabi_fmul>
 8002aca:	1c03      	adds	r3, r0, #0
 8002acc:	1c18      	adds	r0, r3, #0
 8002ace:	f7fd ffab 	bl	8000a28 <__aeabi_f2iz>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	601a      	str	r2, [r3, #0]
	acceleration->AXIS_Y = (int32_t) (dataRaw[1] * sensitivity);
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	2202      	movs	r2, #2
 8002adc:	5e9b      	ldrsh	r3, [r3, r2]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f7fd ffc2 	bl	8000a68 <__aeabi_i2f>
 8002ae4:	1c02      	adds	r2, r0, #0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1c19      	adds	r1, r3, #0
 8002aea:	1c10      	adds	r0, r2, #0
 8002aec:	f7fd fe6a 	bl	80007c4 <__aeabi_fmul>
 8002af0:	1c03      	adds	r3, r0, #0
 8002af2:	1c18      	adds	r0, r3, #0
 8002af4:	f7fd ff98 	bl	8000a28 <__aeabi_f2iz>
 8002af8:	0002      	movs	r2, r0
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	605a      	str	r2, [r3, #4]
	acceleration->AXIS_Z = (int32_t) (dataRaw[2] * sensitivity);
 8002afe:	193b      	adds	r3, r7, r4
 8002b00:	2204      	movs	r2, #4
 8002b02:	5e9b      	ldrsh	r3, [r3, r2]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7fd ffaf 	bl	8000a68 <__aeabi_i2f>
 8002b0a:	1c02      	adds	r2, r0, #0
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1c19      	adds	r1, r3, #0
 8002b10:	1c10      	adds	r0, r2, #0
 8002b12:	f7fd fe57 	bl	80007c4 <__aeabi_fmul>
 8002b16:	1c03      	adds	r3, r0, #0
 8002b18:	1c18      	adds	r0, r3, #0
 8002b1a:	f7fd ff85 	bl	8000a28 <__aeabi_f2iz>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	609a      	str	r2, [r3, #8]

	return COMPONENT_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	0018      	movs	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b007      	add	sp, #28
 8002b2c:	bd90      	pop	{r4, r7, pc}

08002b2e <LSM6DS3_X_Get_AxesRaw>:
 * @param value pointer where the raw values of the axes are written
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_AxesRaw(DrvContextTypeDef *handle,
		SensorAxesRaw_t *value) {
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]

	int16_t dataRaw[3];

	/* Read raw data from LSM6DS3 output register. */
	if (LSM6DS3_X_Get_Axes_Raw(handle, dataRaw) == COMPONENT_ERROR) {
 8002b38:	2308      	movs	r3, #8
 8002b3a:	18fa      	adds	r2, r7, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	0011      	movs	r1, r2
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 fb34 	bl	80031ae <LSM6DS3_X_Get_Axes_Raw>
 8002b46:	0003      	movs	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <LSM6DS3_X_Get_AxesRaw+0x22>
		return COMPONENT_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e010      	b.n	8002b72 <LSM6DS3_X_Get_AxesRaw+0x44>
	}

	/* Set the raw data. */
	value->AXIS_X = dataRaw[0];
 8002b50:	2108      	movs	r1, #8
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2200      	movs	r2, #0
 8002b56:	5e9a      	ldrsh	r2, [r3, r2]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	801a      	strh	r2, [r3, #0]
	value->AXIS_Y = dataRaw[1];
 8002b5c:	187b      	adds	r3, r7, r1
 8002b5e:	2202      	movs	r2, #2
 8002b60:	5e9a      	ldrsh	r2, [r3, r2]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	805a      	strh	r2, [r3, #2]
	value->AXIS_Z = dataRaw[2];
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2204      	movs	r2, #4
 8002b6a:	5e9a      	ldrsh	r2, [r3, r2]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	809a      	strh	r2, [r3, #4]

	return COMPONENT_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b004      	add	sp, #16
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <LSM6DS3_X_Get_Sensitivity>:
 * @param sensitivity pointer where the sensitivity value is written
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_Sensitivity(DrvContextTypeDef *handle,
		float *sensitivity) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_FS_XL_t fullScale;

	/* Read actual full scale selection from sensor. */
	if (LSM6DS3_ACC_GYRO_R_FS_XL((void*) handle, &fullScale) == MEMS_ERROR) {
 8002b86:	230f      	movs	r3, #15
 8002b88:	18fa      	adds	r2, r7, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	0011      	movs	r1, r2
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7fe f89e 	bl	8000cd0 <LSM6DS3_ACC_GYRO_R_FS_XL>
 8002b94:	1e03      	subs	r3, r0, #0
 8002b96:	d101      	bne.n	8002b9c <LSM6DS3_X_Get_Sensitivity+0x20>
		return COMPONENT_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e023      	b.n	8002be4 <LSM6DS3_X_Get_Sensitivity+0x68>
	}

	/* Store the sensitivity based on actual full scale. */
	switch (fullScale) {
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d014      	beq.n	8002bd0 <LSM6DS3_X_Get_Sensitivity+0x54>
 8002ba6:	dc02      	bgt.n	8002bae <LSM6DS3_X_Get_Sensitivity+0x32>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <LSM6DS3_X_Get_Sensitivity+0x3c>
 8002bac:	e014      	b.n	8002bd8 <LSM6DS3_X_Get_Sensitivity+0x5c>
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d006      	beq.n	8002bc0 <LSM6DS3_X_Get_Sensitivity+0x44>
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d008      	beq.n	8002bc8 <LSM6DS3_X_Get_Sensitivity+0x4c>
 8002bb6:	e00f      	b.n	8002bd8 <LSM6DS3_X_Get_Sensitivity+0x5c>
	case LSM6DS3_ACC_GYRO_FS_XL_2g:
		*sensitivity = (float) LSM6DS3_ACC_SENSITIVITY_FOR_FS_2G;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <LSM6DS3_X_Get_Sensitivity+0x70>)
 8002bbc:	601a      	str	r2, [r3, #0]
		break;
 8002bbe:	e010      	b.n	8002be2 <LSM6DS3_X_Get_Sensitivity+0x66>
	case LSM6DS3_ACC_GYRO_FS_XL_4g:
		*sensitivity = (float) LSM6DS3_ACC_SENSITIVITY_FOR_FS_4G;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <LSM6DS3_X_Get_Sensitivity+0x74>)
 8002bc4:	601a      	str	r2, [r3, #0]
		break;
 8002bc6:	e00c      	b.n	8002be2 <LSM6DS3_X_Get_Sensitivity+0x66>
	case LSM6DS3_ACC_GYRO_FS_XL_8g:
		*sensitivity = (float) LSM6DS3_ACC_SENSITIVITY_FOR_FS_8G;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <LSM6DS3_X_Get_Sensitivity+0x78>)
 8002bcc:	601a      	str	r2, [r3, #0]
		break;
 8002bce:	e008      	b.n	8002be2 <LSM6DS3_X_Get_Sensitivity+0x66>
	case LSM6DS3_ACC_GYRO_FS_XL_16g:
		*sensitivity = (float) LSM6DS3_ACC_SENSITIVITY_FOR_FS_16G;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <LSM6DS3_X_Get_Sensitivity+0x7c>)
 8002bd4:	601a      	str	r2, [r3, #0]
		break;
 8002bd6:	e004      	b.n	8002be2 <LSM6DS3_X_Get_Sensitivity+0x66>
	default:
		*sensitivity = -1.0f;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <LSM6DS3_X_Get_Sensitivity+0x80>)
 8002bdc:	601a      	str	r2, [r3, #0]
		return COMPONENT_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <LSM6DS3_X_Get_Sensitivity+0x68>
	}

	return COMPONENT_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b004      	add	sp, #16
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	3d79db23 	.word	0x3d79db23
 8002bf0:	3df9db23 	.word	0x3df9db23
 8002bf4:	3e79db23 	.word	0x3e79db23
 8002bf8:	3ef9db23 	.word	0x3ef9db23
 8002bfc:	bf800000 	.word	0xbf800000

08002c00 <LSM6DS3_X_Get_ODR>:
 * @param handle the device handle
 * @param odr pointer where the output data rate is written
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_ODR(DrvContextTypeDef *handle, float *odr) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_ODR_XL_t odr_low_level;

	if (LSM6DS3_ACC_GYRO_R_ODR_XL((void*) handle, &odr_low_level)
 8002c0a:	230f      	movs	r3, #15
 8002c0c:	18fa      	adds	r2, r7, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0011      	movs	r1, r2
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7fe f8f4 	bl	8000e00 <LSM6DS3_ACC_GYRO_R_ODR_XL>
 8002c18:	1e03      	subs	r3, r0, #0
 8002c1a:	d101      	bne.n	8002c20 <LSM6DS3_X_Get_ODR+0x20>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e051      	b.n	8002cc4 <LSM6DS3_X_Get_ODR+0xc4>
	}

	switch (odr_low_level) {
 8002c20:	230f      	movs	r3, #15
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b50      	cmp	r3, #80	; 0x50
 8002c28:	d02e      	beq.n	8002c88 <LSM6DS3_X_Get_ODR+0x88>
 8002c2a:	dc0c      	bgt.n	8002c46 <LSM6DS3_X_Get_ODR+0x46>
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d01f      	beq.n	8002c70 <LSM6DS3_X_Get_ODR+0x70>
 8002c30:	dc04      	bgt.n	8002c3c <LSM6DS3_X_Get_ODR+0x3c>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d014      	beq.n	8002c60 <LSM6DS3_X_Get_ODR+0x60>
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d016      	beq.n	8002c68 <LSM6DS3_X_Get_ODR+0x68>
 8002c3a:	e03d      	b.n	8002cb8 <LSM6DS3_X_Get_ODR+0xb8>
 8002c3c:	2b30      	cmp	r3, #48	; 0x30
 8002c3e:	d01b      	beq.n	8002c78 <LSM6DS3_X_Get_ODR+0x78>
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d01d      	beq.n	8002c80 <LSM6DS3_X_Get_ODR+0x80>
 8002c44:	e038      	b.n	8002cb8 <LSM6DS3_X_Get_ODR+0xb8>
 8002c46:	2b80      	cmp	r3, #128	; 0x80
 8002c48:	d02a      	beq.n	8002ca0 <LSM6DS3_X_Get_ODR+0xa0>
 8002c4a:	dc04      	bgt.n	8002c56 <LSM6DS3_X_Get_ODR+0x56>
 8002c4c:	2b60      	cmp	r3, #96	; 0x60
 8002c4e:	d01f      	beq.n	8002c90 <LSM6DS3_X_Get_ODR+0x90>
 8002c50:	2b70      	cmp	r3, #112	; 0x70
 8002c52:	d021      	beq.n	8002c98 <LSM6DS3_X_Get_ODR+0x98>
 8002c54:	e030      	b.n	8002cb8 <LSM6DS3_X_Get_ODR+0xb8>
 8002c56:	2b90      	cmp	r3, #144	; 0x90
 8002c58:	d026      	beq.n	8002ca8 <LSM6DS3_X_Get_ODR+0xa8>
 8002c5a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c5c:	d028      	beq.n	8002cb0 <LSM6DS3_X_Get_ODR+0xb0>
 8002c5e:	e02b      	b.n	8002cb8 <LSM6DS3_X_Get_ODR+0xb8>
	case LSM6DS3_ACC_GYRO_ODR_XL_POWER_DOWN:
		*odr = 0.0f;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
		break;
 8002c66:	e02c      	b.n	8002cc2 <LSM6DS3_X_Get_ODR+0xc2>
	case LSM6DS3_ACC_GYRO_ODR_XL_13Hz:
		*odr = 13.0f;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <LSM6DS3_X_Get_ODR+0xcc>)
 8002c6c:	601a      	str	r2, [r3, #0]
		break;
 8002c6e:	e028      	b.n	8002cc2 <LSM6DS3_X_Get_ODR+0xc2>
	case LSM6DS3_ACC_GYRO_ODR_XL_26Hz:
		*odr = 26.0f;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4a17      	ldr	r2, [pc, #92]	; (8002cd0 <LSM6DS3_X_Get_ODR+0xd0>)
 8002c74:	601a      	str	r2, [r3, #0]
		break;
 8002c76:	e024      	b.n	8002cc2 <LSM6DS3_X_Get_ODR+0xc2>
	case LSM6DS3_ACC_GYRO_ODR_XL_52Hz:
		*odr = 52.0f;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <LSM6DS3_X_Get_ODR+0xd4>)
 8002c7c:	601a      	str	r2, [r3, #0]
		break;
 8002c7e:	e020      	b.n	8002cc2 <LSM6DS3_X_Get_ODR+0xc2>
	case LSM6DS3_ACC_GYRO_ODR_XL_104Hz:
		*odr = 104.0f;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4a15      	ldr	r2, [pc, #84]	; (8002cd8 <LSM6DS3_X_Get_ODR+0xd8>)
 8002c84:	601a      	str	r2, [r3, #0]
		break;
 8002c86:	e01c      	b.n	8002cc2 <LSM6DS3_X_Get_ODR+0xc2>
	case LSM6DS3_ACC_GYRO_ODR_XL_208Hz:
		*odr = 208.0f;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <LSM6DS3_X_Get_ODR+0xdc>)
 8002c8c:	601a      	str	r2, [r3, #0]
		break;
 8002c8e:	e018      	b.n	8002cc2 <LSM6DS3_X_Get_ODR+0xc2>
	case LSM6DS3_ACC_GYRO_ODR_XL_416Hz:
		*odr = 416.0f;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <LSM6DS3_X_Get_ODR+0xe0>)
 8002c94:	601a      	str	r2, [r3, #0]
		break;
 8002c96:	e014      	b.n	8002cc2 <LSM6DS3_X_Get_ODR+0xc2>
	case LSM6DS3_ACC_GYRO_ODR_XL_833Hz:
		*odr = 833.0f;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <LSM6DS3_X_Get_ODR+0xe4>)
 8002c9c:	601a      	str	r2, [r3, #0]
		break;
 8002c9e:	e010      	b.n	8002cc2 <LSM6DS3_X_Get_ODR+0xc2>
	case LSM6DS3_ACC_GYRO_ODR_XL_1660Hz:
		*odr = 1660.0f;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	4a11      	ldr	r2, [pc, #68]	; (8002ce8 <LSM6DS3_X_Get_ODR+0xe8>)
 8002ca4:	601a      	str	r2, [r3, #0]
		break;
 8002ca6:	e00c      	b.n	8002cc2 <LSM6DS3_X_Get_ODR+0xc2>
	case LSM6DS3_ACC_GYRO_ODR_XL_3330Hz:
		*odr = 3330.0f;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4a10      	ldr	r2, [pc, #64]	; (8002cec <LSM6DS3_X_Get_ODR+0xec>)
 8002cac:	601a      	str	r2, [r3, #0]
		break;
 8002cae:	e008      	b.n	8002cc2 <LSM6DS3_X_Get_ODR+0xc2>
	case LSM6DS3_ACC_GYRO_ODR_XL_6660Hz:
		*odr = 6660.0f;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <LSM6DS3_X_Get_ODR+0xf0>)
 8002cb4:	601a      	str	r2, [r3, #0]
		break;
 8002cb6:	e004      	b.n	8002cc2 <LSM6DS3_X_Get_ODR+0xc2>
	default:
		*odr = -1.0f;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <LSM6DS3_X_Get_ODR+0xf4>)
 8002cbc:	601a      	str	r2, [r3, #0]
		return COMPONENT_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <LSM6DS3_X_Get_ODR+0xc4>
	}

	return COMPONENT_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b004      	add	sp, #16
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	41500000 	.word	0x41500000
 8002cd0:	41d00000 	.word	0x41d00000
 8002cd4:	42500000 	.word	0x42500000
 8002cd8:	42d00000 	.word	0x42d00000
 8002cdc:	43500000 	.word	0x43500000
 8002ce0:	43d00000 	.word	0x43d00000
 8002ce4:	44504000 	.word	0x44504000
 8002ce8:	44cf8000 	.word	0x44cf8000
 8002cec:	45502000 	.word	0x45502000
 8002cf0:	45d02000 	.word	0x45d02000
 8002cf4:	bf800000 	.word	0xbf800000

08002cf8 <LSM6DS3_X_Set_ODR>:
 * @param odr the functional output data rate to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_ODR(DrvContextTypeDef *handle,
		SensorOdr_t odr) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	000a      	movs	r2, r1
 8002d02:	1cfb      	adds	r3, r7, #3
 8002d04:	701a      	strb	r2, [r3, #0]

	if (handle->isEnabled == 1) {
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	799b      	ldrb	r3, [r3, #6]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10b      	bne.n	8002d26 <LSM6DS3_X_Set_ODR+0x2e>
		if (LSM6DS3_X_Set_ODR_When_Enabled(handle, odr) == COMPONENT_ERROR) {
 8002d0e:	1cfb      	adds	r3, r7, #3
 8002d10:	781a      	ldrb	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	0011      	movs	r1, r2
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 fa90 	bl	800323c <LSM6DS3_X_Set_ODR_When_Enabled>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10d      	bne.n	8002d3e <LSM6DS3_X_Set_ODR+0x46>
			return COMPONENT_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00c      	b.n	8002d40 <LSM6DS3_X_Set_ODR+0x48>
		}
	} else {
		if (LSM6DS3_X_Set_ODR_When_Disabled(handle, odr) == COMPONENT_ERROR) {
 8002d26:	1cfb      	adds	r3, r7, #3
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0011      	movs	r1, r2
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 fac2 	bl	80032b8 <LSM6DS3_X_Set_ODR_When_Disabled>
 8002d34:	0003      	movs	r3, r0
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <LSM6DS3_X_Set_ODR+0x46>
			return COMPONENT_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <LSM6DS3_X_Set_ODR+0x48>
		}
	}

	return COMPONENT_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	0018      	movs	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b002      	add	sp, #8
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <LSM6DS3_X_Set_ODR_Value>:
 * @param odr the output data rate value to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_ODR_Value(DrvContextTypeDef *handle,
		float odr) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]

	if (handle->isEnabled == 1) {
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	799b      	ldrb	r3, [r3, #6]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d10a      	bne.n	8002d70 <LSM6DS3_X_Set_ODR_Value+0x28>
		if (LSM6DS3_X_Set_ODR_Value_When_Enabled(handle, odr)
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1c11      	adds	r1, r2, #0
 8002d60:	0018      	movs	r0, r3
 8002d62:	f000 fae5 	bl	8003330 <LSM6DS3_X_Set_ODR_Value_When_Enabled>
 8002d66:	0003      	movs	r3, r0
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d10c      	bne.n	8002d86 <LSM6DS3_X_Set_ODR_Value+0x3e>
				== COMPONENT_ERROR) {
			return COMPONENT_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e00b      	b.n	8002d88 <LSM6DS3_X_Set_ODR_Value+0x40>
		}
	} else {
		if (LSM6DS3_X_Set_ODR_Value_When_Disabled(handle, odr)
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	1c11      	adds	r1, r2, #0
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 fb4e 	bl	8003418 <LSM6DS3_X_Set_ODR_Value_When_Disabled>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <LSM6DS3_X_Set_ODR_Value+0x3e>
				== COMPONENT_ERROR) {
			return COMPONENT_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <LSM6DS3_X_Set_ODR_Value+0x40>
		}
	}

	return COMPONENT_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <LSM6DS3_X_Get_FS>:
 * @param fullScale pointer where the full scale is written
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_FS(DrvContextTypeDef *handle,
		float *fullScale) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_FS_XL_t fs_low_level;

	if (LSM6DS3_ACC_GYRO_R_FS_XL((void*) handle, &fs_low_level) == MEMS_ERROR) {
 8002d9a:	230f      	movs	r3, #15
 8002d9c:	18fa      	adds	r2, r7, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	0011      	movs	r1, r2
 8002da2:	0018      	movs	r0, r3
 8002da4:	f7fd ff94 	bl	8000cd0 <LSM6DS3_ACC_GYRO_R_FS_XL>
 8002da8:	1e03      	subs	r3, r0, #0
 8002daa:	d101      	bne.n	8002db0 <LSM6DS3_X_Get_FS+0x20>
		return COMPONENT_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e027      	b.n	8002e00 <LSM6DS3_X_Get_FS+0x70>
	}

	switch (fs_low_level) {
 8002db0:	230f      	movs	r3, #15
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d017      	beq.n	8002dea <LSM6DS3_X_Get_FS+0x5a>
 8002dba:	dc02      	bgt.n	8002dc2 <LSM6DS3_X_Get_FS+0x32>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <LSM6DS3_X_Get_FS+0x3c>
 8002dc0:	e018      	b.n	8002df4 <LSM6DS3_X_Get_FS+0x64>
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d007      	beq.n	8002dd6 <LSM6DS3_X_Get_FS+0x46>
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	d00a      	beq.n	8002de0 <LSM6DS3_X_Get_FS+0x50>
 8002dca:	e013      	b.n	8002df4 <LSM6DS3_X_Get_FS+0x64>
	case LSM6DS3_ACC_GYRO_FS_XL_2g:
		*fullScale = 2.0f;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	05d2      	lsls	r2, r2, #23
 8002dd2:	601a      	str	r2, [r3, #0]
		break;
 8002dd4:	e013      	b.n	8002dfe <LSM6DS3_X_Get_FS+0x6e>
	case LSM6DS3_ACC_GYRO_FS_XL_4g:
		*fullScale = 4.0f;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2281      	movs	r2, #129	; 0x81
 8002dda:	05d2      	lsls	r2, r2, #23
 8002ddc:	601a      	str	r2, [r3, #0]
		break;
 8002dde:	e00e      	b.n	8002dfe <LSM6DS3_X_Get_FS+0x6e>
	case LSM6DS3_ACC_GYRO_FS_XL_8g:
		*fullScale = 8.0f;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2282      	movs	r2, #130	; 0x82
 8002de4:	05d2      	lsls	r2, r2, #23
 8002de6:	601a      	str	r2, [r3, #0]
		break;
 8002de8:	e009      	b.n	8002dfe <LSM6DS3_X_Get_FS+0x6e>
	case LSM6DS3_ACC_GYRO_FS_XL_16g:
		*fullScale = 16.0f;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2283      	movs	r2, #131	; 0x83
 8002dee:	05d2      	lsls	r2, r2, #23
 8002df0:	601a      	str	r2, [r3, #0]
		break;
 8002df2:	e004      	b.n	8002dfe <LSM6DS3_X_Get_FS+0x6e>
	default:
		*fullScale = -1.0f;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <LSM6DS3_X_Get_FS+0x78>)
 8002df8:	601a      	str	r2, [r3, #0]
		return COMPONENT_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <LSM6DS3_X_Get_FS+0x70>
	}

	return COMPONENT_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b004      	add	sp, #16
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	bf800000 	.word	0xbf800000

08002e0c <LSM6DS3_X_Set_FS>:
 * @param fullScale the functional full scale to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_FS(DrvContextTypeDef *handle,
		SensorFs_t fullScale) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	000a      	movs	r2, r1
 8002e16:	1cfb      	adds	r3, r7, #3
 8002e18:	701a      	strb	r2, [r3, #0]

	LSM6DS3_ACC_GYRO_FS_XL_t new_fs;

	switch (fullScale) {
 8002e1a:	1cfb      	adds	r3, r7, #3
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d008      	beq.n	8002e34 <LSM6DS3_X_Set_FS+0x28>
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d00b      	beq.n	8002e3e <LSM6DS3_X_Set_FS+0x32>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10e      	bne.n	8002e48 <LSM6DS3_X_Set_FS+0x3c>
	case FS_LOW:
		new_fs = LSM6DS3_ACC_GYRO_FS_XL_2g;
 8002e2a:	230f      	movs	r3, #15
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
		break;
 8002e32:	e00b      	b.n	8002e4c <LSM6DS3_X_Set_FS+0x40>
	case FS_MID:
		new_fs = LSM6DS3_ACC_GYRO_FS_XL_4g;
 8002e34:	230f      	movs	r3, #15
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	2208      	movs	r2, #8
 8002e3a:	701a      	strb	r2, [r3, #0]
		break;
 8002e3c:	e006      	b.n	8002e4c <LSM6DS3_X_Set_FS+0x40>
	case FS_HIGH:
		new_fs = LSM6DS3_ACC_GYRO_FS_XL_8g;
 8002e3e:	230f      	movs	r3, #15
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	220c      	movs	r2, #12
 8002e44:	701a      	strb	r2, [r3, #0]
		break;
 8002e46:	e001      	b.n	8002e4c <LSM6DS3_X_Set_FS+0x40>
	default:
		return COMPONENT_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e00c      	b.n	8002e66 <LSM6DS3_X_Set_FS+0x5a>
	}

	if (LSM6DS3_ACC_GYRO_W_FS_XL((void*) handle, new_fs) == MEMS_ERROR) {
 8002e4c:	230f      	movs	r3, #15
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	0011      	movs	r1, r2
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7fd ff09 	bl	8000c6e <LSM6DS3_ACC_GYRO_W_FS_XL>
 8002e5c:	1e03      	subs	r3, r0, #0
 8002e5e:	d101      	bne.n	8002e64 <LSM6DS3_X_Set_FS+0x58>
		return COMPONENT_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <LSM6DS3_X_Set_FS+0x5a>
	}

	return COMPONENT_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <LSM6DS3_X_Set_FS_Value>:
 * @param fullScale the full scale value to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_FS_Value(DrvContextTypeDef *handle,
		float fullScale) {
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_FS_XL_t new_fs;

	new_fs =
			(fullScale <= 2.0f) ? LSM6DS3_ACC_GYRO_FS_XL_2g :
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	05c9      	lsls	r1, r1, #23
 8002e7c:	6838      	ldr	r0, [r7, #0]
 8002e7e:	f7fd fadb 	bl	8000438 <__aeabi_fcmple>
 8002e82:	1e03      	subs	r3, r0, #0
 8002e84:	d001      	beq.n	8002e8a <LSM6DS3_X_Set_FS_Value+0x1c>
 8002e86:	2300      	movs	r3, #0
 8002e88:	e012      	b.n	8002eb0 <LSM6DS3_X_Set_FS_Value+0x42>
 8002e8a:	2181      	movs	r1, #129	; 0x81
 8002e8c:	05c9      	lsls	r1, r1, #23
 8002e8e:	6838      	ldr	r0, [r7, #0]
 8002e90:	f7fd fad2 	bl	8000438 <__aeabi_fcmple>
 8002e94:	1e03      	subs	r3, r0, #0
 8002e96:	d001      	beq.n	8002e9c <LSM6DS3_X_Set_FS_Value+0x2e>
 8002e98:	2308      	movs	r3, #8
 8002e9a:	e009      	b.n	8002eb0 <LSM6DS3_X_Set_FS_Value+0x42>
 8002e9c:	2182      	movs	r1, #130	; 0x82
 8002e9e:	05c9      	lsls	r1, r1, #23
 8002ea0:	6838      	ldr	r0, [r7, #0]
 8002ea2:	f7fd fac9 	bl	8000438 <__aeabi_fcmple>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d001      	beq.n	8002eae <LSM6DS3_X_Set_FS_Value+0x40>
 8002eaa:	230c      	movs	r3, #12
 8002eac:	e000      	b.n	8002eb0 <LSM6DS3_X_Set_FS_Value+0x42>
 8002eae:	2304      	movs	r3, #4
	new_fs =
 8002eb0:	210f      	movs	r1, #15
 8002eb2:	187a      	adds	r2, r7, r1
 8002eb4:	7013      	strb	r3, [r2, #0]
			(fullScale <= 4.0f) ? LSM6DS3_ACC_GYRO_FS_XL_4g :
			(fullScale <= 8.0f) ?
					LSM6DS3_ACC_GYRO_FS_XL_8g : LSM6DS3_ACC_GYRO_FS_XL_16g;

	if (LSM6DS3_ACC_GYRO_W_FS_XL((void*) handle, new_fs) == MEMS_ERROR) {
 8002eb6:	187b      	adds	r3, r7, r1
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	0011      	movs	r1, r2
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7fd fed5 	bl	8000c6e <LSM6DS3_ACC_GYRO_W_FS_XL>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d101      	bne.n	8002ecc <LSM6DS3_X_Set_FS_Value+0x5e>
		return COMPONENT_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <LSM6DS3_X_Set_FS_Value+0x60>
	}

	return COMPONENT_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	0018      	movs	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b004      	add	sp, #16
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <LSM6DS3_X_Get_Axes_Status>:
 * @param xyz_enabled the pointer to the axes enabled/disabled status
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_Axes_Status(DrvContextTypeDef *handle,
		uint8_t *xyz_enabled) {
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_XEN_XL_t xStatus;
	LSM6DS3_ACC_GYRO_YEN_XL_t yStatus;
	LSM6DS3_ACC_GYRO_ZEN_XL_t zStatus;

	if (LSM6DS3_ACC_GYRO_R_XEN_XL((void*) handle, &xStatus) == MEMS_ERROR) {
 8002ee0:	230f      	movs	r3, #15
 8002ee2:	18fa      	adds	r2, r7, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	0011      	movs	r1, r2
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f7fe fa01 	bl	80012f0 <LSM6DS3_ACC_GYRO_R_XEN_XL>
 8002eee:	1e03      	subs	r3, r0, #0
 8002ef0:	d101      	bne.n	8002ef6 <LSM6DS3_X_Get_Axes_Status+0x20>
		return COMPONENT_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e034      	b.n	8002f60 <LSM6DS3_X_Get_Axes_Status+0x8a>
	}
	if (LSM6DS3_ACC_GYRO_R_YEN_XL((void*) handle, &yStatus) == MEMS_ERROR) {
 8002ef6:	230e      	movs	r3, #14
 8002ef8:	18fa      	adds	r2, r7, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0011      	movs	r1, r2
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7fe fa42 	bl	8001388 <LSM6DS3_ACC_GYRO_R_YEN_XL>
 8002f04:	1e03      	subs	r3, r0, #0
 8002f06:	d101      	bne.n	8002f0c <LSM6DS3_X_Get_Axes_Status+0x36>
		return COMPONENT_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e029      	b.n	8002f60 <LSM6DS3_X_Get_Axes_Status+0x8a>
	}
	if (LSM6DS3_ACC_GYRO_R_ZEN_XL((void*) handle, &zStatus) == MEMS_ERROR) {
 8002f0c:	230d      	movs	r3, #13
 8002f0e:	18fa      	adds	r2, r7, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7fe fa83 	bl	8001420 <LSM6DS3_ACC_GYRO_R_ZEN_XL>
 8002f1a:	1e03      	subs	r3, r0, #0
 8002f1c:	d101      	bne.n	8002f22 <LSM6DS3_X_Get_Axes_Status+0x4c>
		return COMPONENT_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e01e      	b.n	8002f60 <LSM6DS3_X_Get_Axes_Status+0x8a>
	}

	xyz_enabled[0] = (xStatus == LSM6DS3_ACC_GYRO_XEN_XL_ENABLED) ? 1 : 0;
 8002f22:	230f      	movs	r3, #15
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	3b08      	subs	r3, #8
 8002f2a:	425a      	negs	r2, r3
 8002f2c:	4153      	adcs	r3, r2
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	001a      	movs	r2, r3
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	701a      	strb	r2, [r3, #0]
	xyz_enabled[1] = (yStatus == LSM6DS3_ACC_GYRO_YEN_XL_ENABLED) ? 1 : 0;
 8002f36:	230e      	movs	r3, #14
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	3b10      	subs	r3, #16
 8002f3e:	425a      	negs	r2, r3
 8002f40:	4153      	adcs	r3, r2
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	701a      	strb	r2, [r3, #0]
	xyz_enabled[2] = (zStatus == LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED) ? 1 : 0;
 8002f4a:	230d      	movs	r3, #13
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	3b20      	subs	r3, #32
 8002f52:	425a      	negs	r2, r3
 8002f54:	4153      	adcs	r3, r2
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	701a      	strb	r2, [r3, #0]

	return COMPONENT_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b004      	add	sp, #16
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <LSM6DS3_X_Set_Axes_Status>:
 * @param enable_xyz vector of the axes enabled/disabled status
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_Axes_Status(DrvContextTypeDef *handle,
		uint8_t *enable_xyz) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]

	if (LSM6DS3_ACC_GYRO_W_XEN_XL((void*) handle,
			(enable_xyz[0] == 1) ?
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	781b      	ldrb	r3, [r3, #0]
	if (LSM6DS3_ACC_GYRO_W_XEN_XL((void*) handle,
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <LSM6DS3_X_Set_Axes_Status+0x16>
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	e000      	b.n	8002f80 <LSM6DS3_X_Set_Axes_Status+0x18>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	0019      	movs	r1, r3
 8002f84:	0010      	movs	r0, r2
 8002f86:	f7fe f982 	bl	800128e <LSM6DS3_ACC_GYRO_W_XEN_XL>
 8002f8a:	1e03      	subs	r3, r0, #0
 8002f8c:	d101      	bne.n	8002f92 <LSM6DS3_X_Set_Axes_Status+0x2a>
					LSM6DS3_ACC_GYRO_XEN_XL_ENABLED :
					LSM6DS3_ACC_GYRO_XEN_XL_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <LSM6DS3_X_Set_Axes_Status+0x70>
	}

	if (LSM6DS3_ACC_GYRO_W_YEN_XL((void*) handle,
			(enable_xyz[1] == 1) ?
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	781b      	ldrb	r3, [r3, #0]
	if (LSM6DS3_ACC_GYRO_W_YEN_XL((void*) handle,
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <LSM6DS3_X_Set_Axes_Status+0x38>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	e000      	b.n	8002fa2 <LSM6DS3_X_Set_Axes_Status+0x3a>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	0010      	movs	r0, r2
 8002fa8:	f7fe f9bd 	bl	8001326 <LSM6DS3_ACC_GYRO_W_YEN_XL>
 8002fac:	1e03      	subs	r3, r0, #0
 8002fae:	d101      	bne.n	8002fb4 <LSM6DS3_X_Set_Axes_Status+0x4c>
					LSM6DS3_ACC_GYRO_YEN_XL_ENABLED :
					LSM6DS3_ACC_GYRO_YEN_XL_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e011      	b.n	8002fd8 <LSM6DS3_X_Set_Axes_Status+0x70>
	}

	if (LSM6DS3_ACC_GYRO_W_ZEN_XL((void*) handle,
			(enable_xyz[2] == 1) ?
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	781b      	ldrb	r3, [r3, #0]
	if (LSM6DS3_ACC_GYRO_W_ZEN_XL((void*) handle,
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <LSM6DS3_X_Set_Axes_Status+0x5a>
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	e000      	b.n	8002fc4 <LSM6DS3_X_Set_Axes_Status+0x5c>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	0010      	movs	r0, r2
 8002fca:	f7fe f9f8 	bl	80013be <LSM6DS3_ACC_GYRO_W_ZEN_XL>
 8002fce:	1e03      	subs	r3, r0, #0
 8002fd0:	d101      	bne.n	8002fd6 <LSM6DS3_X_Set_Axes_Status+0x6e>
					LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED :
					LSM6DS3_ACC_GYRO_ZEN_XL_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <LSM6DS3_X_Set_Axes_Status+0x70>
	}

	return COMPONENT_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b002      	add	sp, #8
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <LSM6DS3_X_Read_Reg>:
 * @param data register data
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Read_Reg(DrvContextTypeDef *handle,
		uint8_t reg, uint8_t *data) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	200b      	movs	r0, #11
 8002fec:	183b      	adds	r3, r7, r0
 8002fee:	1c0a      	adds	r2, r1, #0
 8002ff0:	701a      	strb	r2, [r3, #0]

	if (LSM6DS3_Read_Reg(handle, reg, data) == COMPONENT_ERROR) {
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	183b      	adds	r3, r7, r0
 8002ff6:	7819      	ldrb	r1, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 f883 	bl	8003106 <LSM6DS3_Read_Reg>
 8003000:	0003      	movs	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <LSM6DS3_X_Read_Reg+0x2a>
		return COMPONENT_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <LSM6DS3_X_Read_Reg+0x2c>
	}

	return COMPONENT_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b004      	add	sp, #16
 8003012:	bd80      	pop	{r7, pc}

08003014 <LSM6DS3_X_Write_Reg>:
 * @param data register data
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Write_Reg(DrvContextTypeDef *handle,
		uint8_t reg, uint8_t data) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	0008      	movs	r0, r1
 800301e:	0011      	movs	r1, r2
 8003020:	1cfb      	adds	r3, r7, #3
 8003022:	1c02      	adds	r2, r0, #0
 8003024:	701a      	strb	r2, [r3, #0]
 8003026:	1cbb      	adds	r3, r7, #2
 8003028:	1c0a      	adds	r2, r1, #0
 800302a:	701a      	strb	r2, [r3, #0]

	if (LSM6DS3_Write_Reg(handle, reg, data) == COMPONENT_ERROR) {
 800302c:	1cbb      	adds	r3, r7, #2
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	1cfb      	adds	r3, r7, #3
 8003032:	7819      	ldrb	r1, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	0018      	movs	r0, r3
 8003038:	f000 f87e 	bl	8003138 <LSM6DS3_Write_Reg>
 800303c:	0003      	movs	r3, r0
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <LSM6DS3_X_Write_Reg+0x32>
		return COMPONENT_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <LSM6DS3_X_Write_Reg+0x34>
	}

	return COMPONENT_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b002      	add	sp, #8
 800304e:	bd80      	pop	{r7, pc}

08003050 <LSM6DS3_X_Get_DRDY_Status>:
 * @param status the data ready status
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_DRDY_Status(DrvContextTypeDef *handle,
		uint8_t *status) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_XLDA_t status_raw;

	if (LSM6DS3_ACC_GYRO_R_XLDA((void*) handle, &status_raw) == MEMS_ERROR) {
 800305a:	230f      	movs	r3, #15
 800305c:	18fa      	adds	r2, r7, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0011      	movs	r1, r2
 8003062:	0018      	movs	r0, r3
 8003064:	f7fe fb82 	bl	800176c <LSM6DS3_ACC_GYRO_R_XLDA>
 8003068:	1e03      	subs	r3, r0, #0
 800306a:	d101      	bne.n	8003070 <LSM6DS3_X_Get_DRDY_Status+0x20>
		return COMPONENT_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e011      	b.n	8003094 <LSM6DS3_X_Get_DRDY_Status+0x44>
	}

	switch (status_raw) {
 8003070:	230f      	movs	r3, #15
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <LSM6DS3_X_Get_DRDY_Status+0x36>
 800307a:	2b01      	cmp	r3, #1
 800307c:	d107      	bne.n	800308e <LSM6DS3_X_Get_DRDY_Status+0x3e>
	case LSM6DS3_ACC_GYRO_XLDA_DATA_AVAIL:
		*status = 1;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
		break;
 8003084:	e005      	b.n	8003092 <LSM6DS3_X_Get_DRDY_Status+0x42>
	case LSM6DS3_ACC_GYRO_XLDA_NO_DATA_AVAIL:
		*status = 0;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
		break;
 800308c:	e001      	b.n	8003092 <LSM6DS3_X_Get_DRDY_Status+0x42>
	default:
		return COMPONENT_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <LSM6DS3_X_Get_DRDY_Status+0x44>
	}

	return COMPONENT_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b004      	add	sp, #16
 800309a:	bd80      	pop	{r7, pc}

0800309c <LSM6DS3_Get_WhoAmI>:
 * @param who_am_i pointer to the value of WHO_AM_I register
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_Get_WhoAmI(DrvContextTypeDef *handle,
		uint8_t *who_am_i) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]

	/* Read WHO AM I register */
	if (LSM6DS3_ACC_GYRO_R_WHO_AM_I((void*) handle, (uint8_t*) who_am_i)
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0011      	movs	r1, r2
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7fd fd91 	bl	8000bd4 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
 80030b2:	1e03      	subs	r3, r0, #0
 80030b4:	d101      	bne.n	80030ba <LSM6DS3_Get_WhoAmI+0x1e>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <LSM6DS3_Get_WhoAmI+0x20>
	}

	return COMPONENT_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <LSM6DS3_Check_WhoAmI>:
 * @brief Check the WHO_AM_I ID of the LSM6DS3 sensor检查LSM6DS3传感器的身份证号
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_Check_WhoAmI(DrvContextTypeDef *handle) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

	uint8_t who_am_i = 0x00;
 80030cc:	210f      	movs	r1, #15
 80030ce:	187b      	adds	r3, r7, r1
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]

	if (LSM6DS3_Get_WhoAmI(handle, &who_am_i) == COMPONENT_ERROR) {
 80030d4:	187a      	adds	r2, r7, r1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	0011      	movs	r1, r2
 80030da:	0018      	movs	r0, r3
 80030dc:	f7ff ffde 	bl	800309c <LSM6DS3_Get_WhoAmI>
 80030e0:	0003      	movs	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <LSM6DS3_Check_WhoAmI+0x26>
		return COMPONENT_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e009      	b.n	80030fe <LSM6DS3_Check_WhoAmI+0x3a>
	}
	if (who_am_i != handle->who_am_i) {
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	230f      	movs	r3, #15
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <LSM6DS3_Check_WhoAmI+0x38>
		return COMPONENT_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <LSM6DS3_Check_WhoAmI+0x3a>
	}

	return COMPONENT_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b004      	add	sp, #16
 8003104:	bd80      	pop	{r7, pc}

08003106 <LSM6DS3_Read_Reg>:
 * @param data register data
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_Read_Reg(DrvContextTypeDef *handle, uint8_t reg,
		uint8_t *data) {
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	200b      	movs	r0, #11
 8003112:	183b      	adds	r3, r7, r0
 8003114:	1c0a      	adds	r2, r1, #0
 8003116:	701a      	strb	r2, [r3, #0]

	if (LSM6DS3_ACC_GYRO_ReadReg((void*) handle, reg, data, 1) == MEMS_ERROR) {
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	183b      	adds	r3, r7, r0
 800311c:	7819      	ldrb	r1, [r3, #0]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	2301      	movs	r3, #1
 8003122:	f7fd fd36 	bl	8000b92 <LSM6DS3_ACC_GYRO_ReadReg>
 8003126:	1e03      	subs	r3, r0, #0
 8003128:	d101      	bne.n	800312e <LSM6DS3_Read_Reg+0x28>
		return COMPONENT_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <LSM6DS3_Read_Reg+0x2a>
	}

	return COMPONENT_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	b004      	add	sp, #16
 8003136:	bd80      	pop	{r7, pc}

08003138 <LSM6DS3_Write_Reg>:
 * @param data register data
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_Write_Reg(DrvContextTypeDef *handle,
		uint8_t reg, uint8_t data) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	0008      	movs	r0, r1
 8003142:	0011      	movs	r1, r2
 8003144:	1cfb      	adds	r3, r7, #3
 8003146:	1c02      	adds	r2, r0, #0
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	1cbb      	adds	r3, r7, #2
 800314c:	1c0a      	adds	r2, r1, #0
 800314e:	701a      	strb	r2, [r3, #0]

	if (LSM6DS3_ACC_GYRO_WriteReg((void*) handle, reg, &data, 1)
 8003150:	1cba      	adds	r2, r7, #2
 8003152:	1cfb      	adds	r3, r7, #3
 8003154:	7819      	ldrb	r1, [r3, #0]
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	2301      	movs	r3, #1
 800315a:	f7fd fcf9 	bl	8000b50 <LSM6DS3_ACC_GYRO_WriteReg>
 800315e:	1e03      	subs	r3, r0, #0
 8003160:	d101      	bne.n	8003166 <LSM6DS3_Write_Reg+0x2e>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <LSM6DS3_Write_Reg+0x30>
	}

	return COMPONENT_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}

08003170 <LSM6DS3_Set_Interrupt_Latch>:
 * @param status interrupt latch enable/disable
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_Set_Interrupt_Latch(DrvContextTypeDef *handle,
		uint8_t status) {
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	000a      	movs	r2, r1
 800317a:	1cfb      	adds	r3, r7, #3
 800317c:	701a      	strb	r2, [r3, #0]

	/* Verify that the passed parameter contains one of the valid values. */
	switch ((LSM6DS3_ACC_GYRO_LIR_t) status) {
 800317e:	1cfb      	adds	r3, r7, #3
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	3300      	adds	r3, #0
 8003184:	2b01      	cmp	r3, #1
 8003186:	d901      	bls.n	800318c <LSM6DS3_Set_Interrupt_Latch+0x1c>
	case LSM6DS3_ACC_GYRO_LIR_DISABLED:
	case LSM6DS3_ACC_GYRO_LIR_ENABLED:
		break;
	default:
		return COMPONENT_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e00c      	b.n	80031a6 <LSM6DS3_Set_Interrupt_Latch+0x36>
		break;
 800318c:	46c0      	nop			; (mov r8, r8)
	}

	if (LSM6DS3_ACC_GYRO_W_LIR(handle, (LSM6DS3_ACC_GYRO_LIR_t) status)
 800318e:	1cfb      	adds	r3, r7, #3
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	0011      	movs	r1, r2
 8003196:	0018      	movs	r0, r3
 8003198:	f7fe fc0e 	bl	80019b8 <LSM6DS3_ACC_GYRO_W_LIR>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d101      	bne.n	80031a4 <LSM6DS3_Set_Interrupt_Latch+0x34>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <LSM6DS3_Set_Interrupt_Latch+0x36>
	}

	return COMPONENT_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b002      	add	sp, #8
 80031ac:	bd80      	pop	{r7, pc}

080031ae <LSM6DS3_X_Get_Axes_Raw>:
 * @param pData pointer where the raw values of the axes are written
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_Axes_Raw(DrvContextTypeDef *handle,
		int16_t *pData) {
 80031ae:	b590      	push	{r4, r7, lr}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]

	uint8_t regValue[6] = { 0, 0, 0, 0, 0, 0 };
 80031b8:	2408      	movs	r4, #8
 80031ba:	193b      	adds	r3, r7, r4
 80031bc:	0018      	movs	r0, r3
 80031be:	2306      	movs	r3, #6
 80031c0:	001a      	movs	r2, r3
 80031c2:	2100      	movs	r1, #0
 80031c4:	f006 f901 	bl	80093ca <memset>

	/* Read output registers from LSM6DS3_ACC_GYRO_OUTX_L_XL to LSM6DS3_ACC_GYRO_OUTZ_H_XL. */
	if (LSM6DS3_ACC_GYRO_GetRawAccData((void*) handle, (uint8_t*) regValue)
 80031c8:	193a      	adds	r2, r7, r4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	0011      	movs	r1, r2
 80031ce:	0018      	movs	r0, r3
 80031d0:	f7fd fd99 	bl	8000d06 <LSM6DS3_ACC_GYRO_GetRawAccData>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d101      	bne.n	80031dc <LSM6DS3_X_Get_Axes_Raw+0x2e>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e02a      	b.n	8003232 <LSM6DS3_X_Get_Axes_Raw+0x84>
	}

	/* Format the data. */
	pData[0] = ((((int16_t) regValue[1]) << 8) + (int16_t) regValue[0]);
 80031dc:	2108      	movs	r1, #8
 80031de:	187b      	adds	r3, r7, r1
 80031e0:	785b      	ldrb	r3, [r3, #1]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	18d3      	adds	r3, r2, r3
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	b21a      	sxth	r2, r3
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	801a      	strh	r2, [r3, #0]
	pData[1] = ((((int16_t) regValue[3]) << 8) + (int16_t) regValue[2]);
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	78db      	ldrb	r3, [r3, #3]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	b29a      	uxth	r2, r3
 8003202:	187b      	adds	r3, r7, r1
 8003204:	789b      	ldrb	r3, [r3, #2]
 8003206:	b29b      	uxth	r3, r3
 8003208:	18d3      	adds	r3, r2, r3
 800320a:	b29a      	uxth	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	3302      	adds	r3, #2
 8003210:	b212      	sxth	r2, r2
 8003212:	801a      	strh	r2, [r3, #0]
	pData[2] = ((((int16_t) regValue[5]) << 8) + (int16_t) regValue[4]);
 8003214:	187b      	adds	r3, r7, r1
 8003216:	795b      	ldrb	r3, [r3, #5]
 8003218:	b29b      	uxth	r3, r3
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	b29a      	uxth	r2, r3
 800321e:	187b      	adds	r3, r7, r1
 8003220:	791b      	ldrb	r3, [r3, #4]
 8003222:	b29b      	uxth	r3, r3
 8003224:	18d3      	adds	r3, r2, r3
 8003226:	b29a      	uxth	r2, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	3304      	adds	r3, #4
 800322c:	b212      	sxth	r2, r2
 800322e:	801a      	strh	r2, [r3, #0]

	return COMPONENT_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	0018      	movs	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	b005      	add	sp, #20
 8003238:	bd90      	pop	{r4, r7, pc}
	...

0800323c <LSM6DS3_X_Set_ODR_When_Enabled>:
 * @param odr the functional output data rate to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_ODR_When_Enabled(
		DrvContextTypeDef *handle, SensorOdr_t odr) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	000a      	movs	r2, r1
 8003246:	1cfb      	adds	r3, r7, #3
 8003248:	701a      	strb	r2, [r3, #0]
	LSM6DS3_ACC_GYRO_ODR_XL_t new_odr;

	switch (odr) {
 800324a:	1cfb      	adds	r3, r7, #3
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d81d      	bhi.n	800328e <LSM6DS3_X_Set_ODR_When_Enabled+0x52>
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <LSM6DS3_X_Set_ODR_When_Enabled+0x78>)
 8003256:	18d3      	adds	r3, r2, r3
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	469f      	mov	pc, r3
	case ODR_LOW:
		new_odr = LSM6DS3_ACC_GYRO_ODR_XL_13Hz;
 800325c:	230f      	movs	r3, #15
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2210      	movs	r2, #16
 8003262:	701a      	strb	r2, [r3, #0]
		break;
 8003264:	e015      	b.n	8003292 <LSM6DS3_X_Set_ODR_When_Enabled+0x56>
	case ODR_MID_LOW:
		new_odr = LSM6DS3_ACC_GYRO_ODR_XL_13Hz;
 8003266:	230f      	movs	r3, #15
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2210      	movs	r2, #16
 800326c:	701a      	strb	r2, [r3, #0]
		break;
 800326e:	e010      	b.n	8003292 <LSM6DS3_X_Set_ODR_When_Enabled+0x56>
	case ODR_MID:
		new_odr = LSM6DS3_ACC_GYRO_ODR_XL_26Hz;
 8003270:	230f      	movs	r3, #15
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	2220      	movs	r2, #32
 8003276:	701a      	strb	r2, [r3, #0]
		break;
 8003278:	e00b      	b.n	8003292 <LSM6DS3_X_Set_ODR_When_Enabled+0x56>
	case ODR_MID_HIGH:
		new_odr = LSM6DS3_ACC_GYRO_ODR_XL_52Hz;
 800327a:	230f      	movs	r3, #15
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2230      	movs	r2, #48	; 0x30
 8003280:	701a      	strb	r2, [r3, #0]
		break;
 8003282:	e006      	b.n	8003292 <LSM6DS3_X_Set_ODR_When_Enabled+0x56>
	case ODR_HIGH:
		new_odr = LSM6DS3_ACC_GYRO_ODR_XL_104Hz;
 8003284:	230f      	movs	r3, #15
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2240      	movs	r2, #64	; 0x40
 800328a:	701a      	strb	r2, [r3, #0]
		break;
 800328c:	e001      	b.n	8003292 <LSM6DS3_X_Set_ODR_When_Enabled+0x56>
	default:
		return COMPONENT_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e00c      	b.n	80032ac <LSM6DS3_X_Set_ODR_When_Enabled+0x70>
	}

	if (LSM6DS3_ACC_GYRO_W_ODR_XL((void*) handle, new_odr) == MEMS_ERROR) {
 8003292:	230f      	movs	r3, #15
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	781a      	ldrb	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	0011      	movs	r1, r2
 800329c:	0018      	movs	r0, r3
 800329e:	f7fd fd7e 	bl	8000d9e <LSM6DS3_ACC_GYRO_W_ODR_XL>
 80032a2:	1e03      	subs	r3, r0, #0
 80032a4:	d101      	bne.n	80032aa <LSM6DS3_X_Set_ODR_When_Enabled+0x6e>
		return COMPONENT_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LSM6DS3_X_Set_ODR_When_Enabled+0x70>
	}

	return COMPONENT_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	0018      	movs	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b004      	add	sp, #16
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	0800a1c4 	.word	0x0800a1c4

080032b8 <LSM6DS3_X_Set_ODR_When_Disabled>:
 * @param odr the functional output data rate to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_ODR_When_Disabled(
		DrvContextTypeDef *handle, SensorOdr_t odr) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	000a      	movs	r2, r1
 80032c2:	1cfb      	adds	r3, r7, #3
 80032c4:	701a      	strb	r2, [r3, #0]
	ACCELERO_Data_t *pData = (ACCELERO_Data_t*) handle->pData;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	60fb      	str	r3, [r7, #12]
	LSM6DS3_X_Data_t *pComponentData = (LSM6DS3_X_Data_t*) pData->pComponentData;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60bb      	str	r3, [r7, #8]

	switch (odr) {
 80032d2:	1cfb      	adds	r3, r7, #3
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d818      	bhi.n	800330c <LSM6DS3_X_Set_ODR_When_Disabled+0x54>
 80032da:	009a      	lsls	r2, r3, #2
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <LSM6DS3_X_Set_ODR_When_Disabled+0x64>)
 80032de:	18d3      	adds	r3, r2, r3
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	469f      	mov	pc, r3
	case ODR_LOW:
		pComponentData->Previous_ODR = 13.0f;
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <LSM6DS3_X_Set_ODR_When_Disabled+0x68>)
 80032e8:	601a      	str	r2, [r3, #0]
		break;
 80032ea:	e011      	b.n	8003310 <LSM6DS3_X_Set_ODR_When_Disabled+0x58>
	case ODR_MID_LOW:
		pComponentData->Previous_ODR = 13.0f;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <LSM6DS3_X_Set_ODR_When_Disabled+0x68>)
 80032f0:	601a      	str	r2, [r3, #0]
		break;
 80032f2:	e00d      	b.n	8003310 <LSM6DS3_X_Set_ODR_When_Disabled+0x58>
	case ODR_MID:
		pComponentData->Previous_ODR = 26.0f;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <LSM6DS3_X_Set_ODR_When_Disabled+0x6c>)
 80032f8:	601a      	str	r2, [r3, #0]
		break;
 80032fa:	e009      	b.n	8003310 <LSM6DS3_X_Set_ODR_When_Disabled+0x58>
	case ODR_MID_HIGH:
		pComponentData->Previous_ODR = 52.0f;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <LSM6DS3_X_Set_ODR_When_Disabled+0x70>)
 8003300:	601a      	str	r2, [r3, #0]
		break;
 8003302:	e005      	b.n	8003310 <LSM6DS3_X_Set_ODR_When_Disabled+0x58>
	case ODR_HIGH:
		pComponentData->Previous_ODR = 104.0f;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4a09      	ldr	r2, [pc, #36]	; (800332c <LSM6DS3_X_Set_ODR_When_Disabled+0x74>)
 8003308:	601a      	str	r2, [r3, #0]
		break;
 800330a:	e001      	b.n	8003310 <LSM6DS3_X_Set_ODR_When_Disabled+0x58>
	default:
		return COMPONENT_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <LSM6DS3_X_Set_ODR_When_Disabled+0x5a>
	}

	return COMPONENT_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b004      	add	sp, #16
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	0800a1d8 	.word	0x0800a1d8
 8003320:	41500000 	.word	0x41500000
 8003324:	41d00000 	.word	0x41d00000
 8003328:	42500000 	.word	0x42500000
 800332c:	42d00000 	.word	0x42d00000

08003330 <LSM6DS3_X_Set_ODR_Value_When_Enabled>:
 * @param odr the output data rate value to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_ODR_Value_When_Enabled(
		DrvContextTypeDef *handle, float odr) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_ODR_XL_t new_odr;

	new_odr =
			(odr <= 13.0f) ? LSM6DS3_ACC_GYRO_ODR_XL_13Hz :
 800333a:	492e      	ldr	r1, [pc, #184]	; (80033f4 <LSM6DS3_X_Set_ODR_Value_When_Enabled+0xc4>)
 800333c:	6838      	ldr	r0, [r7, #0]
 800333e:	f7fd f87b 	bl	8000438 <__aeabi_fcmple>
 8003342:	1e03      	subs	r3, r0, #0
 8003344:	d001      	beq.n	800334a <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x1a>
 8003346:	2310      	movs	r3, #16
 8003348:	e040      	b.n	80033cc <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x9c>
 800334a:	492b      	ldr	r1, [pc, #172]	; (80033f8 <LSM6DS3_X_Set_ODR_Value_When_Enabled+0xc8>)
 800334c:	6838      	ldr	r0, [r7, #0]
 800334e:	f7fd f873 	bl	8000438 <__aeabi_fcmple>
 8003352:	1e03      	subs	r3, r0, #0
 8003354:	d001      	beq.n	800335a <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x2a>
 8003356:	2320      	movs	r3, #32
 8003358:	e038      	b.n	80033cc <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x9c>
 800335a:	4928      	ldr	r1, [pc, #160]	; (80033fc <LSM6DS3_X_Set_ODR_Value_When_Enabled+0xcc>)
 800335c:	6838      	ldr	r0, [r7, #0]
 800335e:	f7fd f86b 	bl	8000438 <__aeabi_fcmple>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d001      	beq.n	800336a <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x3a>
 8003366:	2330      	movs	r3, #48	; 0x30
 8003368:	e030      	b.n	80033cc <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x9c>
 800336a:	4925      	ldr	r1, [pc, #148]	; (8003400 <LSM6DS3_X_Set_ODR_Value_When_Enabled+0xd0>)
 800336c:	6838      	ldr	r0, [r7, #0]
 800336e:	f7fd f863 	bl	8000438 <__aeabi_fcmple>
 8003372:	1e03      	subs	r3, r0, #0
 8003374:	d001      	beq.n	800337a <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x4a>
 8003376:	2340      	movs	r3, #64	; 0x40
 8003378:	e028      	b.n	80033cc <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x9c>
 800337a:	4922      	ldr	r1, [pc, #136]	; (8003404 <LSM6DS3_X_Set_ODR_Value_When_Enabled+0xd4>)
 800337c:	6838      	ldr	r0, [r7, #0]
 800337e:	f7fd f85b 	bl	8000438 <__aeabi_fcmple>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d001      	beq.n	800338a <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x5a>
 8003386:	2350      	movs	r3, #80	; 0x50
 8003388:	e020      	b.n	80033cc <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x9c>
 800338a:	491f      	ldr	r1, [pc, #124]	; (8003408 <LSM6DS3_X_Set_ODR_Value_When_Enabled+0xd8>)
 800338c:	6838      	ldr	r0, [r7, #0]
 800338e:	f7fd f853 	bl	8000438 <__aeabi_fcmple>
 8003392:	1e03      	subs	r3, r0, #0
 8003394:	d001      	beq.n	800339a <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x6a>
 8003396:	2360      	movs	r3, #96	; 0x60
 8003398:	e018      	b.n	80033cc <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x9c>
 800339a:	491c      	ldr	r1, [pc, #112]	; (800340c <LSM6DS3_X_Set_ODR_Value_When_Enabled+0xdc>)
 800339c:	6838      	ldr	r0, [r7, #0]
 800339e:	f7fd f84b 	bl	8000438 <__aeabi_fcmple>
 80033a2:	1e03      	subs	r3, r0, #0
 80033a4:	d001      	beq.n	80033aa <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x7a>
 80033a6:	2370      	movs	r3, #112	; 0x70
 80033a8:	e010      	b.n	80033cc <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x9c>
 80033aa:	4919      	ldr	r1, [pc, #100]	; (8003410 <LSM6DS3_X_Set_ODR_Value_When_Enabled+0xe0>)
 80033ac:	6838      	ldr	r0, [r7, #0]
 80033ae:	f7fd f843 	bl	8000438 <__aeabi_fcmple>
 80033b2:	1e03      	subs	r3, r0, #0
 80033b4:	d001      	beq.n	80033ba <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x8a>
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	e008      	b.n	80033cc <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x9c>
 80033ba:	4916      	ldr	r1, [pc, #88]	; (8003414 <LSM6DS3_X_Set_ODR_Value_When_Enabled+0xe4>)
 80033bc:	6838      	ldr	r0, [r7, #0]
 80033be:	f7fd f83b 	bl	8000438 <__aeabi_fcmple>
 80033c2:	1e03      	subs	r3, r0, #0
 80033c4:	d001      	beq.n	80033ca <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x9a>
 80033c6:	2390      	movs	r3, #144	; 0x90
 80033c8:	e000      	b.n	80033cc <LSM6DS3_X_Set_ODR_Value_When_Enabled+0x9c>
 80033ca:	23a0      	movs	r3, #160	; 0xa0
	new_odr =
 80033cc:	210f      	movs	r1, #15
 80033ce:	187a      	adds	r2, r7, r1
 80033d0:	7013      	strb	r3, [r2, #0]
			(odr <= 1660.0f) ? LSM6DS3_ACC_GYRO_ODR_XL_1660Hz :
			(odr <= 3330.0f) ?
					LSM6DS3_ACC_GYRO_ODR_XL_3330Hz :
					LSM6DS3_ACC_GYRO_ODR_XL_6660Hz;

	if (LSM6DS3_ACC_GYRO_W_ODR_XL((void*) handle, new_odr) == MEMS_ERROR) {
 80033d2:	187b      	adds	r3, r7, r1
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	0011      	movs	r1, r2
 80033da:	0018      	movs	r0, r3
 80033dc:	f7fd fcdf 	bl	8000d9e <LSM6DS3_ACC_GYRO_W_ODR_XL>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d101      	bne.n	80033e8 <LSM6DS3_X_Set_ODR_Value_When_Enabled+0xb8>
		return COMPONENT_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <LSM6DS3_X_Set_ODR_Value_When_Enabled+0xba>
	}

	return COMPONENT_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b004      	add	sp, #16
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	41500000 	.word	0x41500000
 80033f8:	41d00000 	.word	0x41d00000
 80033fc:	42500000 	.word	0x42500000
 8003400:	42d00000 	.word	0x42d00000
 8003404:	43500000 	.word	0x43500000
 8003408:	43d00000 	.word	0x43d00000
 800340c:	44504000 	.word	0x44504000
 8003410:	44cf8000 	.word	0x44cf8000
 8003414:	45502000 	.word	0x45502000

08003418 <LSM6DS3_X_Set_ODR_Value_When_Disabled>:
 * @param odr the output data rate value to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_ODR_Value_When_Disabled(
		DrvContextTypeDef *handle, float odr) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]

	ACCELERO_Data_t *pData = (ACCELERO_Data_t*) handle->pData;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60fb      	str	r3, [r7, #12]
	LSM6DS3_X_Data_t *pComponentData = (LSM6DS3_X_Data_t*) pData->pComponentData;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60bb      	str	r3, [r7, #8]

	pComponentData->Previous_ODR = (odr <= 13.0f) ? 13.0f :
 800342e:	4928      	ldr	r1, [pc, #160]	; (80034d0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xb8>)
 8003430:	6838      	ldr	r0, [r7, #0]
 8003432:	f7fd f801 	bl	8000438 <__aeabi_fcmple>
 8003436:	1e03      	subs	r3, r0, #0
 8003438:	d001      	beq.n	800343e <LSM6DS3_X_Set_ODR_Value_When_Disabled+0x26>
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xb8>)
 800343c:	e040      	b.n	80034c0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xa8>
									(odr <= 26.0f) ? 26.0f :
 800343e:	4925      	ldr	r1, [pc, #148]	; (80034d4 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xbc>)
 8003440:	6838      	ldr	r0, [r7, #0]
 8003442:	f7fc fff9 	bl	8000438 <__aeabi_fcmple>
 8003446:	1e03      	subs	r3, r0, #0
 8003448:	d001      	beq.n	800344e <LSM6DS3_X_Set_ODR_Value_When_Disabled+0x36>
 800344a:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xbc>)
 800344c:	e038      	b.n	80034c0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xa8>
									(odr <= 52.0f) ? 52.0f :
 800344e:	4922      	ldr	r1, [pc, #136]	; (80034d8 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xc0>)
 8003450:	6838      	ldr	r0, [r7, #0]
 8003452:	f7fc fff1 	bl	8000438 <__aeabi_fcmple>
 8003456:	1e03      	subs	r3, r0, #0
 8003458:	d001      	beq.n	800345e <LSM6DS3_X_Set_ODR_Value_When_Disabled+0x46>
 800345a:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xc0>)
 800345c:	e030      	b.n	80034c0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xa8>
									(odr <= 104.0f) ? 104.0f :
 800345e:	491f      	ldr	r1, [pc, #124]	; (80034dc <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xc4>)
 8003460:	6838      	ldr	r0, [r7, #0]
 8003462:	f7fc ffe9 	bl	8000438 <__aeabi_fcmple>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d001      	beq.n	800346e <LSM6DS3_X_Set_ODR_Value_When_Disabled+0x56>
 800346a:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xc4>)
 800346c:	e028      	b.n	80034c0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xa8>
									(odr <= 208.0f) ? 208.0f :
 800346e:	491c      	ldr	r1, [pc, #112]	; (80034e0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xc8>)
 8003470:	6838      	ldr	r0, [r7, #0]
 8003472:	f7fc ffe1 	bl	8000438 <__aeabi_fcmple>
 8003476:	1e03      	subs	r3, r0, #0
 8003478:	d001      	beq.n	800347e <LSM6DS3_X_Set_ODR_Value_When_Disabled+0x66>
 800347a:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xc8>)
 800347c:	e020      	b.n	80034c0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xa8>
									(odr <= 416.0f) ? 416.0f :
 800347e:	4919      	ldr	r1, [pc, #100]	; (80034e4 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xcc>)
 8003480:	6838      	ldr	r0, [r7, #0]
 8003482:	f7fc ffd9 	bl	8000438 <__aeabi_fcmple>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d001      	beq.n	800348e <LSM6DS3_X_Set_ODR_Value_When_Disabled+0x76>
 800348a:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xcc>)
 800348c:	e018      	b.n	80034c0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xa8>
									(odr <= 833.0f) ? 833.0f :
 800348e:	4916      	ldr	r1, [pc, #88]	; (80034e8 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xd0>)
 8003490:	6838      	ldr	r0, [r7, #0]
 8003492:	f7fc ffd1 	bl	8000438 <__aeabi_fcmple>
 8003496:	1e03      	subs	r3, r0, #0
 8003498:	d001      	beq.n	800349e <LSM6DS3_X_Set_ODR_Value_When_Disabled+0x86>
 800349a:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xd0>)
 800349c:	e010      	b.n	80034c0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xa8>
									(odr <= 1660.0f) ? 1660.0f :
 800349e:	4913      	ldr	r1, [pc, #76]	; (80034ec <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xd4>)
 80034a0:	6838      	ldr	r0, [r7, #0]
 80034a2:	f7fc ffc9 	bl	8000438 <__aeabi_fcmple>
 80034a6:	1e03      	subs	r3, r0, #0
 80034a8:	d001      	beq.n	80034ae <LSM6DS3_X_Set_ODR_Value_When_Disabled+0x96>
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xd4>)
 80034ac:	e008      	b.n	80034c0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xa8>
									(odr <= 3330.0f) ? 3330.0f : 6660.0f;
 80034ae:	4910      	ldr	r1, [pc, #64]	; (80034f0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xd8>)
 80034b0:	6838      	ldr	r0, [r7, #0]
 80034b2:	f7fc ffc1 	bl	8000438 <__aeabi_fcmple>
 80034b6:	1e03      	subs	r3, r0, #0
 80034b8:	d001      	beq.n	80034be <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xa6>
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xd8>)
 80034bc:	e000      	b.n	80034c0 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xa8>
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <LSM6DS3_X_Set_ODR_Value_When_Disabled+0xdc>)
	pComponentData->Previous_ODR = (odr <= 13.0f) ? 13.0f :
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	6013      	str	r3, [r2, #0]

	return COMPONENT_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b004      	add	sp, #16
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	41500000 	.word	0x41500000
 80034d4:	41d00000 	.word	0x41d00000
 80034d8:	42500000 	.word	0x42500000
 80034dc:	42d00000 	.word	0x42d00000
 80034e0:	43500000 	.word	0x43500000
 80034e4:	43d00000 	.word	0x43d00000
 80034e8:	44504000 	.word	0x44504000
 80034ec:	44cf8000 	.word	0x44cf8000
 80034f0:	45502000 	.word	0x45502000
 80034f4:	45d02000 	.word	0x45d02000

080034f8 <LSM6DS3_X_Enable_Free_Fall_Detection>:
 * @note  This function sets the LSM6DS3 accelerometer ODR to 416Hz and the LSM6DS3 accelerometer full scale to 2g
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Enable_Free_Fall_Detection(
		DrvContextTypeDef *handle, SensorIntPin_t int_pin) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	000a      	movs	r2, r1
 8003502:	1cfb      	adds	r3, r7, #3
 8003504:	701a      	strb	r2, [r3, #0]

	/* Output Data Rate selection */
	if (LSM6DS3_X_Set_ODR_Value(handle, 416.0f) == COMPONENT_ERROR) {
 8003506:	4a32      	ldr	r2, [pc, #200]	; (80035d0 <LSM6DS3_X_Enable_Free_Fall_Detection+0xd8>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	1c11      	adds	r1, r2, #0
 800350c:	0018      	movs	r0, r3
 800350e:	f7ff fc1b 	bl	8002d48 <LSM6DS3_X_Set_ODR_Value>
 8003512:	0003      	movs	r3, r0
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <LSM6DS3_X_Enable_Free_Fall_Detection+0x24>
		return COMPONENT_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e055      	b.n	80035c8 <LSM6DS3_X_Enable_Free_Fall_Detection+0xd0>
	}

	/* Full scale selection */
	if (LSM6DS3_ACC_GYRO_W_FS_XL((void*) handle, LSM6DS3_ACC_GYRO_FS_XL_2g)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2100      	movs	r1, #0
 8003520:	0018      	movs	r0, r3
 8003522:	f7fd fba4 	bl	8000c6e <LSM6DS3_ACC_GYRO_W_FS_XL>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d101      	bne.n	800352e <LSM6DS3_X_Enable_Free_Fall_Detection+0x36>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e04c      	b.n	80035c8 <LSM6DS3_X_Enable_Free_Fall_Detection+0xd0>
	}

	/* FF_DUR setting */
	if (LSM6DS3_ACC_GYRO_W_FF_Duration((void*) handle, 0x06) == MEMS_ERROR) {
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2106      	movs	r1, #6
 8003532:	0018      	movs	r0, r3
 8003534:	f7fe fdca 	bl	80020cc <LSM6DS3_ACC_GYRO_W_FF_Duration>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d101      	bne.n	8003540 <LSM6DS3_X_Enable_Free_Fall_Detection+0x48>
		return COMPONENT_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e043      	b.n	80035c8 <LSM6DS3_X_Enable_Free_Fall_Detection+0xd0>
	}

	/* WAKE_DUR setting */
	if (LSM6DS3_ACC_GYRO_W_WAKE_DUR((void*) handle, 0x00) == MEMS_ERROR) {
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2100      	movs	r1, #0
 8003544:	0018      	movs	r0, r3
 8003546:	f7fe fd54 	bl	8001ff2 <LSM6DS3_ACC_GYRO_W_WAKE_DUR>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d101      	bne.n	8003552 <LSM6DS3_X_Enable_Free_Fall_Detection+0x5a>
		return COMPONENT_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e03a      	b.n	80035c8 <LSM6DS3_X_Enable_Free_Fall_Detection+0xd0>
	}

	/* TIMER_HR setting */
	if (LSM6DS3_ACC_GYRO_W_TIMER_HR((void*) handle,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2100      	movs	r1, #0
 8003556:	0018      	movs	r0, r3
 8003558:	f7fe fd1a 	bl	8001f90 <LSM6DS3_ACC_GYRO_W_TIMER_HR>
 800355c:	1e03      	subs	r3, r0, #0
 800355e:	d101      	bne.n	8003564 <LSM6DS3_X_Enable_Free_Fall_Detection+0x6c>
			LSM6DS3_ACC_GYRO_TIMER_HR_6_4ms) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e031      	b.n	80035c8 <LSM6DS3_X_Enable_Free_Fall_Detection+0xd0>
	}

	/* SLEEP_DUR setting */
	if (LSM6DS3_ACC_GYRO_W_SLEEP_DUR((void*) handle, 0x00) == MEMS_ERROR) {
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2100      	movs	r1, #0
 8003568:	0018      	movs	r0, r3
 800356a:	f7fe fcd6 	bl	8001f1a <LSM6DS3_ACC_GYRO_W_SLEEP_DUR>
 800356e:	1e03      	subs	r3, r0, #0
 8003570:	d101      	bne.n	8003576 <LSM6DS3_X_Enable_Free_Fall_Detection+0x7e>
		return COMPONENT_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e028      	b.n	80035c8 <LSM6DS3_X_Enable_Free_Fall_Detection+0xd0>
	}

	/* FF_THS setting */
	if (LSM6DS3_X_Set_Free_Fall_Threshold(handle, LSM6DS3_ACC_GYRO_FF_THS_10)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2103      	movs	r1, #3
 800357a:	0018      	movs	r0, r3
 800357c:	f000 f87d 	bl	800367a <LSM6DS3_X_Set_Free_Fall_Threshold>
 8003580:	0003      	movs	r3, r0
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <LSM6DS3_X_Enable_Free_Fall_Detection+0x92>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e01e      	b.n	80035c8 <LSM6DS3_X_Enable_Free_Fall_Detection+0xd0>
	}

	/* Enable free fall event on either INT1 or INT2 pin */
	switch (int_pin) {
 800358a:	1cfb      	adds	r3, r7, #3
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <LSM6DS3_X_Enable_Free_Fall_Detection+0xa0>
 8003592:	2b01      	cmp	r3, #1
 8003594:	d009      	beq.n	80035aa <LSM6DS3_X_Enable_Free_Fall_Detection+0xb2>
 8003596:	e011      	b.n	80035bc <LSM6DS3_X_Enable_Free_Fall_Detection+0xc4>
	case INT1_PIN:
		if (LSM6DS3_ACC_GYRO_W_FFEvOnInt1((void*) handle,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2110      	movs	r1, #16
 800359c:	0018      	movs	r0, r3
 800359e:	f7fe fea7 	bl	80022f0 <LSM6DS3_ACC_GYRO_W_FFEvOnInt1>
 80035a2:	1e03      	subs	r3, r0, #0
 80035a4:	d10c      	bne.n	80035c0 <LSM6DS3_X_Enable_Free_Fall_Detection+0xc8>
				LSM6DS3_ACC_GYRO_INT1_FF_ENABLED) == MEMS_ERROR) {
			return COMPONENT_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e00e      	b.n	80035c8 <LSM6DS3_X_Enable_Free_Fall_Detection+0xd0>
		}
		break;

	case INT2_PIN:
		if (LSM6DS3_ACC_GYRO_W_FFEvOnInt2((void*) handle,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2110      	movs	r1, #16
 80035ae:	0018      	movs	r0, r3
 80035b0:	f7fe ffc4 	bl	800253c <LSM6DS3_ACC_GYRO_W_FFEvOnInt2>
 80035b4:	1e03      	subs	r3, r0, #0
 80035b6:	d105      	bne.n	80035c4 <LSM6DS3_X_Enable_Free_Fall_Detection+0xcc>
				LSM6DS3_ACC_GYRO_INT2_FF_ENABLED) == MEMS_ERROR) {
			return COMPONENT_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e005      	b.n	80035c8 <LSM6DS3_X_Enable_Free_Fall_Detection+0xd0>
		}
		break;

	default:
		return COMPONENT_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e003      	b.n	80035c8 <LSM6DS3_X_Enable_Free_Fall_Detection+0xd0>
		break;
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	e000      	b.n	80035c6 <LSM6DS3_X_Enable_Free_Fall_Detection+0xce>
		break;
 80035c4:	46c0      	nop			; (mov r8, r8)
	}

	return COMPONENT_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	43d00000 	.word	0x43d00000

080035d4 <LSM6DS3_X_Disable_Free_Fall_Detection>:
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Disable_Free_Fall_Detection(
		DrvContextTypeDef *handle) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

	/* Disable free fall event on INT1 pin */
	if (LSM6DS3_ACC_GYRO_W_FFEvOnInt1((void*) handle,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2100      	movs	r1, #0
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7fe fe85 	bl	80022f0 <LSM6DS3_ACC_GYRO_W_FFEvOnInt1>
 80035e6:	1e03      	subs	r3, r0, #0
 80035e8:	d101      	bne.n	80035ee <LSM6DS3_X_Disable_Free_Fall_Detection+0x1a>
			LSM6DS3_ACC_GYRO_INT1_FF_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e01b      	b.n	8003626 <LSM6DS3_X_Disable_Free_Fall_Detection+0x52>
	}

	/* Disable free fall event on INT2 pin */
	if (LSM6DS3_ACC_GYRO_W_FFEvOnInt2((void*) handle,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2100      	movs	r1, #0
 80035f2:	0018      	movs	r0, r3
 80035f4:	f7fe ffa2 	bl	800253c <LSM6DS3_ACC_GYRO_W_FFEvOnInt2>
 80035f8:	1e03      	subs	r3, r0, #0
 80035fa:	d101      	bne.n	8003600 <LSM6DS3_X_Disable_Free_Fall_Detection+0x2c>
			LSM6DS3_ACC_GYRO_INT2_FF_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e012      	b.n	8003626 <LSM6DS3_X_Disable_Free_Fall_Detection+0x52>
	}

	/* FF_DUR setting */
	if (LSM6DS3_ACC_GYRO_W_FF_Duration((void*) handle, 0x00) == MEMS_ERROR) {
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2100      	movs	r1, #0
 8003604:	0018      	movs	r0, r3
 8003606:	f7fe fd61 	bl	80020cc <LSM6DS3_ACC_GYRO_W_FF_Duration>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d101      	bne.n	8003612 <LSM6DS3_X_Disable_Free_Fall_Detection+0x3e>
		return COMPONENT_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e009      	b.n	8003626 <LSM6DS3_X_Disable_Free_Fall_Detection+0x52>
	}

	/* FF_THS setting */
	if (LSM6DS3_ACC_GYRO_W_FF_THS((void*) handle, LSM6DS3_ACC_GYRO_FF_THS_5)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2100      	movs	r1, #0
 8003616:	0018      	movs	r0, r3
 8003618:	f7fe fd27 	bl	800206a <LSM6DS3_ACC_GYRO_W_FF_THS>
 800361c:	1e03      	subs	r3, r0, #0
 800361e:	d101      	bne.n	8003624 <LSM6DS3_X_Disable_Free_Fall_Detection+0x50>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <LSM6DS3_X_Disable_Free_Fall_Detection+0x52>
	}

	return COMPONENT_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	b002      	add	sp, #8
 800362c:	bd80      	pop	{r7, pc}

0800362e <LSM6DS3_X_Get_Free_Fall_Detection_Status>:
 * @note This function is deprecated and has been replaced by LSM6DS3_X_Get_Event_Status
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_Free_Fall_Detection_Status(
		DrvContextTypeDef *handle, uint8_t *status) {
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_FF_EV_STATUS_t free_fall_status;

	if (LSM6DS3_ACC_GYRO_R_FF_EV_STATUS((void*) handle, &free_fall_status)
 8003638:	230f      	movs	r3, #15
 800363a:	18fa      	adds	r2, r7, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	0011      	movs	r1, r2
 8003640:	0018      	movs	r0, r3
 8003642:	f7fd ff85 	bl	8001550 <LSM6DS3_ACC_GYRO_R_FF_EV_STATUS>
 8003646:	1e03      	subs	r3, r0, #0
 8003648:	d101      	bne.n	800364e <LSM6DS3_X_Get_Free_Fall_Detection_Status+0x20>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e011      	b.n	8003672 <LSM6DS3_X_Get_Free_Fall_Detection_Status+0x44>
	}

	switch (free_fall_status) {
 800364e:	230f      	movs	r3, #15
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <LSM6DS3_X_Get_Free_Fall_Detection_Status+0x36>
 8003658:	2b20      	cmp	r3, #32
 800365a:	d107      	bne.n	800366c <LSM6DS3_X_Get_Free_Fall_Detection_Status+0x3e>
	case LSM6DS3_ACC_GYRO_FF_EV_STATUS_DETECTED:
		*status = 1;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
		break;
 8003662:	e005      	b.n	8003670 <LSM6DS3_X_Get_Free_Fall_Detection_Status+0x42>
	case LSM6DS3_ACC_GYRO_FF_EV_STATUS_NOT_DETECTED:
		*status = 0;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
		break;
 800366a:	e001      	b.n	8003670 <LSM6DS3_X_Get_Free_Fall_Detection_Status+0x42>
	default:
		return COMPONENT_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <LSM6DS3_X_Get_Free_Fall_Detection_Status+0x44>
	}

	return COMPONENT_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	0018      	movs	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	b004      	add	sp, #16
 8003678:	bd80      	pop	{r7, pc}

0800367a <LSM6DS3_X_Set_Free_Fall_Threshold>:
 * @param thr the threshold to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_Free_Fall_Threshold(
		DrvContextTypeDef *handle, uint8_t thr) {
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	000a      	movs	r2, r1
 8003684:	1cfb      	adds	r3, r7, #3
 8003686:	701a      	strb	r2, [r3, #0]

	if (LSM6DS3_ACC_GYRO_W_FF_THS((void*) handle,
 8003688:	1cfb      	adds	r3, r7, #3
 800368a:	781a      	ldrb	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	0011      	movs	r1, r2
 8003690:	0018      	movs	r0, r3
 8003692:	f7fe fcea 	bl	800206a <LSM6DS3_ACC_GYRO_W_FF_THS>
 8003696:	1e03      	subs	r3, r0, #0
 8003698:	d101      	bne.n	800369e <LSM6DS3_X_Set_Free_Fall_Threshold+0x24>
			(LSM6DS3_ACC_GYRO_FF_THS_t) thr) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <LSM6DS3_X_Set_Free_Fall_Threshold+0x26>
	}

	return COMPONENT_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b002      	add	sp, #8
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <LSM6DS3_X_Enable_Pedometer>:
 * @param handle the device handle
 * @note  This function sets the LSM6DS3 accelerometer ODR to 26Hz and the LSM6DS3 accelerometer full scale to 2g
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Enable_Pedometer(DrvContextTypeDef *handle) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

	/* Output Data Rate selection */
	if (LSM6DS3_X_Set_ODR_Value(handle, 26.0f) == COMPONENT_ERROR) {
 80036b0:	4a1e      	ldr	r2, [pc, #120]	; (800372c <LSM6DS3_X_Enable_Pedometer+0x84>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	1c11      	adds	r1, r2, #0
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7ff fb46 	bl	8002d48 <LSM6DS3_X_Set_ODR_Value>
 80036bc:	0003      	movs	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <LSM6DS3_X_Enable_Pedometer+0x1e>
		return COMPONENT_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e02e      	b.n	8003724 <LSM6DS3_X_Enable_Pedometer+0x7c>
	}

	/* Full scale selection. */
	if (LSM6DS3_ACC_GYRO_W_FS_XL((void*) handle, LSM6DS3_ACC_GYRO_FS_XL_2g)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2100      	movs	r1, #0
 80036ca:	0018      	movs	r0, r3
 80036cc:	f7fd facf 	bl	8000c6e <LSM6DS3_ACC_GYRO_W_FS_XL>
 80036d0:	1e03      	subs	r3, r0, #0
 80036d2:	d101      	bne.n	80036d8 <LSM6DS3_X_Enable_Pedometer+0x30>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e025      	b.n	8003724 <LSM6DS3_X_Enable_Pedometer+0x7c>
	}

	/* Set pedometer threshold. */
	if (LSM6DS3_X_Set_Pedometer_Threshold(handle,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2117      	movs	r1, #23
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 f8b3 	bl	8003848 <LSM6DS3_X_Set_Pedometer_Threshold>
 80036e2:	0003      	movs	r3, r0
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <LSM6DS3_X_Enable_Pedometer+0x44>
			LSM6DS3_PEDOMETER_THRESHOLD_MID_HIGH) == COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e01b      	b.n	8003724 <LSM6DS3_X_Enable_Pedometer+0x7c>
	}

	/* Enable embedded functionalities. */
	if (LSM6DS3_ACC_GYRO_W_FUNC_EN((void*) handle,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2104      	movs	r1, #4
 80036f0:	0018      	movs	r0, r3
 80036f2:	f7fd fee1 	bl	80014b8 <LSM6DS3_ACC_GYRO_W_FUNC_EN>
 80036f6:	1e03      	subs	r3, r0, #0
 80036f8:	d101      	bne.n	80036fe <LSM6DS3_X_Enable_Pedometer+0x56>
			LSM6DS3_ACC_GYRO_FUNC_EN_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e012      	b.n	8003724 <LSM6DS3_X_Enable_Pedometer+0x7c>
	}

	/* Enable pedometer algorithm. */
	if (LSM6DS3_ACC_GYRO_W_PEDO_EN((void*) handle,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2140      	movs	r1, #64	; 0x40
 8003702:	0018      	movs	r0, r3
 8003704:	f7fe fa4d 	bl	8001ba2 <LSM6DS3_ACC_GYRO_W_PEDO_EN>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	d101      	bne.n	8003710 <LSM6DS3_X_Enable_Pedometer+0x68>
			LSM6DS3_ACC_GYRO_PEDO_EN_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e009      	b.n	8003724 <LSM6DS3_X_Enable_Pedometer+0x7c>
	}

	/* Enable pedometer on INT1. */
	if (LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1((void*) handle,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2180      	movs	r1, #128	; 0x80
 8003714:	0018      	movs	r0, r3
 8003716:	f7fd fcf6 	bl	8001106 <LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1>
 800371a:	1e03      	subs	r3, r0, #0
 800371c:	d101      	bne.n	8003722 <LSM6DS3_X_Enable_Pedometer+0x7a>
			LSM6DS3_ACC_GYRO_INT1_PEDO_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <LSM6DS3_X_Enable_Pedometer+0x7c>
	}

	return COMPONENT_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b002      	add	sp, #8
 800372a:	bd80      	pop	{r7, pc}
 800372c:	41d00000 	.word	0x41d00000

08003730 <LSM6DS3_X_Disable_Pedometer>:
 * @brief Disable the pedometer feature for LSM6DS3 accelerometer sensor禁用LSM6DS3加速度计传感器的计步器功能
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Disable_Pedometer(DrvContextTypeDef *handle) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

	/* Disable pedometer on INT1. */
	if (LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1((void*) handle,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2100      	movs	r1, #0
 800373c:	0018      	movs	r0, r3
 800373e:	f7fd fce2 	bl	8001106 <LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d101      	bne.n	800374a <LSM6DS3_X_Disable_Pedometer+0x1a>
			LSM6DS3_ACC_GYRO_INT1_PEDO_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e01c      	b.n	8003784 <LSM6DS3_X_Disable_Pedometer+0x54>
	}

	/* Disable pedometer algorithm. */
	if (LSM6DS3_ACC_GYRO_W_PEDO_EN((void*) handle,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2100      	movs	r1, #0
 800374e:	0018      	movs	r0, r3
 8003750:	f7fe fa27 	bl	8001ba2 <LSM6DS3_ACC_GYRO_W_PEDO_EN>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d101      	bne.n	800375c <LSM6DS3_X_Disable_Pedometer+0x2c>
			LSM6DS3_ACC_GYRO_PEDO_EN_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e013      	b.n	8003784 <LSM6DS3_X_Disable_Pedometer+0x54>
	}

	/* Disable embedded functionalities. */
	if (LSM6DS3_ACC_GYRO_W_FUNC_EN((void*) handle,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2100      	movs	r1, #0
 8003760:	0018      	movs	r0, r3
 8003762:	f7fd fea9 	bl	80014b8 <LSM6DS3_ACC_GYRO_W_FUNC_EN>
 8003766:	1e03      	subs	r3, r0, #0
 8003768:	d101      	bne.n	800376e <LSM6DS3_X_Disable_Pedometer+0x3e>
			LSM6DS3_ACC_GYRO_FUNC_EN_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e00a      	b.n	8003784 <LSM6DS3_X_Disable_Pedometer+0x54>
	}

	/* Reset pedometer threshold. */
	if (LSM6DS3_X_Set_Pedometer_Threshold(handle, 0x0) == COMPONENT_ERROR) {
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2100      	movs	r1, #0
 8003772:	0018      	movs	r0, r3
 8003774:	f000 f868 	bl	8003848 <LSM6DS3_X_Set_Pedometer_Threshold>
 8003778:	0003      	movs	r3, r0
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <LSM6DS3_X_Disable_Pedometer+0x52>
		return COMPONENT_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <LSM6DS3_X_Disable_Pedometer+0x54>
	}

	return COMPONENT_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}

0800378c <LSM6DS3_X_Get_Pedometer_Status>:
 * @note This function is deprecated and has been replaced by LSM6DS3_X_Get_Event_Status
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_Pedometer_Status(
		DrvContextTypeDef *handle, uint8_t *status) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_t pedometer_status;

	if (LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS((void*) handle, &pedometer_status)
 8003796:	230f      	movs	r3, #15
 8003798:	18fa      	adds	r2, r7, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	0011      	movs	r1, r2
 800379e:	0018      	movs	r0, r3
 80037a0:	f7fe f8d4 	bl	800194c <LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS>
 80037a4:	1e03      	subs	r3, r0, #0
 80037a6:	d101      	bne.n	80037ac <LSM6DS3_X_Get_Pedometer_Status+0x20>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e011      	b.n	80037d0 <LSM6DS3_X_Get_Pedometer_Status+0x44>
	}

	switch (pedometer_status) {
 80037ac:	230f      	movs	r3, #15
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <LSM6DS3_X_Get_Pedometer_Status+0x36>
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d107      	bne.n	80037ca <LSM6DS3_X_Get_Pedometer_Status+0x3e>
	case LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_DETECTED:
		*status = 1;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
		break;
 80037c0:	e005      	b.n	80037ce <LSM6DS3_X_Get_Pedometer_Status+0x42>
	case LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_NOT_DETECTED:
		*status = 0;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
		break;
 80037c8:	e001      	b.n	80037ce <LSM6DS3_X_Get_Pedometer_Status+0x42>
	default:
		return COMPONENT_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <LSM6DS3_X_Get_Pedometer_Status+0x44>
	}

	return COMPONENT_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b004      	add	sp, #16
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <LSM6DS3_X_Get_Step_Count>:
 * @param step_count the pointer to the step counter
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_Step_Count(DrvContextTypeDef *handle,
		uint16_t *step_count) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]

	if (LSM6DS3_ACC_GYRO_Get_GetStepCounter((void*) handle,
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0011      	movs	r1, r2
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fe ff86 	bl	80026fa <LSM6DS3_ACC_GYRO_Get_GetStepCounter>
 80037ee:	1e03      	subs	r3, r0, #0
 80037f0:	d101      	bne.n	80037f6 <LSM6DS3_X_Get_Step_Count+0x1e>
			(uint8_t*) step_count) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <LSM6DS3_X_Get_Step_Count+0x20>
	}

	return COMPONENT_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b002      	add	sp, #8
 80037fe:	bd80      	pop	{r7, pc}

08003800 <LSM6DS3_X_Enable_Step_Counter_Reset>:
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Enable_Step_Counter_Reset(
		DrvContextTypeDef *handle) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

	if (LSM6DS3_ACC_GYRO_W_PedoStepReset((void*) handle,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2102      	movs	r1, #2
 800380c:	0018      	movs	r0, r3
 800380e:	f7fd fe22 	bl	8001456 <LSM6DS3_ACC_GYRO_W_PedoStepReset>
 8003812:	1e03      	subs	r3, r0, #0
 8003814:	d101      	bne.n	800381a <LSM6DS3_X_Enable_Step_Counter_Reset+0x1a>
			LSM6DS3_ACC_GYRO_PEDO_RST_STEP_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <LSM6DS3_X_Enable_Step_Counter_Reset+0x1c>
	}

	return COMPONENT_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}

08003824 <LSM6DS3_X_Disable_Step_Counter_Reset>:
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Disable_Step_Counter_Reset(
		DrvContextTypeDef *handle) {
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

	if (LSM6DS3_ACC_GYRO_W_PedoStepReset((void*) handle,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2100      	movs	r1, #0
 8003830:	0018      	movs	r0, r3
 8003832:	f7fd fe10 	bl	8001456 <LSM6DS3_ACC_GYRO_W_PedoStepReset>
 8003836:	1e03      	subs	r3, r0, #0
 8003838:	d101      	bne.n	800383e <LSM6DS3_X_Disable_Step_Counter_Reset+0x1a>
			LSM6DS3_ACC_GYRO_PEDO_RST_STEP_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <LSM6DS3_X_Disable_Step_Counter_Reset+0x1c>
	}

	return COMPONENT_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}

08003848 <LSM6DS3_X_Set_Pedometer_Threshold>:
 * @param thr the threshold to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_Pedometer_Threshold(
		DrvContextTypeDef *handle, uint8_t thr) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	000a      	movs	r2, r1
 8003852:	1cfb      	adds	r3, r7, #3
 8003854:	701a      	strb	r2, [r3, #0]

	if (LSM6DS3_ACC_GYRO_W_PedoThreshold((void*) handle, thr) == MEMS_ERROR) {
 8003856:	1cfb      	adds	r3, r7, #3
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	0011      	movs	r1, r2
 800385e:	0018      	movs	r0, r3
 8003860:	f7fe ff97 	bl	8002792 <LSM6DS3_ACC_GYRO_W_PedoThreshold>
 8003864:	1e03      	subs	r3, r0, #0
 8003866:	d101      	bne.n	800386c <LSM6DS3_X_Set_Pedometer_Threshold+0x24>
		return COMPONENT_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <LSM6DS3_X_Set_Pedometer_Threshold+0x26>
	}

	return COMPONENT_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <LSM6DS3_X_Enable_Tilt_Detection>:
 * @note  This function sets the LSM6DS3 accelerometer ODR to 26Hz and the LSM6DS3 accelerometer full scale to 2g
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Enable_Tilt_Detection(
		DrvContextTypeDef *handle, SensorIntPin_t int_pin) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	000a      	movs	r2, r1
 8003882:	1cfb      	adds	r3, r7, #3
 8003884:	701a      	strb	r2, [r3, #0]

	/* Output Data Rate selection */
	if (LSM6DS3_X_Set_ODR_Value(handle, 26.0f) == COMPONENT_ERROR) {
 8003886:	4a24      	ldr	r2, [pc, #144]	; (8003918 <LSM6DS3_X_Enable_Tilt_Detection+0xa0>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	1c11      	adds	r1, r2, #0
 800388c:	0018      	movs	r0, r3
 800388e:	f7ff fa5b 	bl	8002d48 <LSM6DS3_X_Set_ODR_Value>
 8003892:	0003      	movs	r3, r0
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <LSM6DS3_X_Enable_Tilt_Detection+0x24>
		return COMPONENT_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e039      	b.n	8003910 <LSM6DS3_X_Enable_Tilt_Detection+0x98>
	}

	/* Full scale selection */
	if (LSM6DS3_ACC_GYRO_W_FS_XL((void*) handle, LSM6DS3_ACC_GYRO_FS_XL_2g)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2100      	movs	r1, #0
 80038a0:	0018      	movs	r0, r3
 80038a2:	f7fd f9e4 	bl	8000c6e <LSM6DS3_ACC_GYRO_W_FS_XL>
 80038a6:	1e03      	subs	r3, r0, #0
 80038a8:	d101      	bne.n	80038ae <LSM6DS3_X_Enable_Tilt_Detection+0x36>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e030      	b.n	8003910 <LSM6DS3_X_Enable_Tilt_Detection+0x98>
	}

	/* Enable embedded functionalities */
	if (LSM6DS3_ACC_GYRO_W_FUNC_EN((void*) handle,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2104      	movs	r1, #4
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7fd fe00 	bl	80014b8 <LSM6DS3_ACC_GYRO_W_FUNC_EN>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d101      	bne.n	80038c0 <LSM6DS3_X_Enable_Tilt_Detection+0x48>
			LSM6DS3_ACC_GYRO_FUNC_EN_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e027      	b.n	8003910 <LSM6DS3_X_Enable_Tilt_Detection+0x98>
	}

	/* Enable tilt calculation. */
	if (LSM6DS3_ACC_GYRO_W_TILT_EN((void*) handle,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2120      	movs	r1, #32
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7fe f93b 	bl	8001b40 <LSM6DS3_ACC_GYRO_W_TILT_EN>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d101      	bne.n	80038d2 <LSM6DS3_X_Enable_Tilt_Detection+0x5a>
			LSM6DS3_ACC_GYRO_TILT_EN_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e01e      	b.n	8003910 <LSM6DS3_X_Enable_Tilt_Detection+0x98>
	}

	/* Enable tilt detection on either INT1 or INT2 pin */
	switch (int_pin) {
 80038d2:	1cfb      	adds	r3, r7, #3
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <LSM6DS3_X_Enable_Tilt_Detection+0x68>
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d009      	beq.n	80038f2 <LSM6DS3_X_Enable_Tilt_Detection+0x7a>
 80038de:	e011      	b.n	8003904 <LSM6DS3_X_Enable_Tilt_Detection+0x8c>
	case INT1_PIN:
		if (LSM6DS3_ACC_GYRO_W_TiltEvOnInt1((void*) handle,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2102      	movs	r1, #2
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7fe fc70 	bl	80021ca <LSM6DS3_ACC_GYRO_W_TiltEvOnInt1>
 80038ea:	1e03      	subs	r3, r0, #0
 80038ec:	d10c      	bne.n	8003908 <LSM6DS3_X_Enable_Tilt_Detection+0x90>
				LSM6DS3_ACC_GYRO_INT1_TILT_ENABLED) == MEMS_ERROR) {
			return COMPONENT_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00e      	b.n	8003910 <LSM6DS3_X_Enable_Tilt_Detection+0x98>
		}
		break;

	case INT2_PIN:
		if (LSM6DS3_ACC_GYRO_W_TiltEvOnInt2((void*) handle,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2102      	movs	r1, #2
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7fe fd8d 	bl	8002416 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt2>
 80038fc:	1e03      	subs	r3, r0, #0
 80038fe:	d105      	bne.n	800390c <LSM6DS3_X_Enable_Tilt_Detection+0x94>
				LSM6DS3_ACC_GYRO_INT2_TILT_ENABLED) == MEMS_ERROR) {
			return COMPONENT_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e005      	b.n	8003910 <LSM6DS3_X_Enable_Tilt_Detection+0x98>
		}
		break;

	default:
		return COMPONENT_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e003      	b.n	8003910 <LSM6DS3_X_Enable_Tilt_Detection+0x98>
		break;
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	e000      	b.n	800390e <LSM6DS3_X_Enable_Tilt_Detection+0x96>
		break;
 800390c:	46c0      	nop			; (mov r8, r8)
	}

	return COMPONENT_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b002      	add	sp, #8
 8003916:	bd80      	pop	{r7, pc}
 8003918:	41d00000 	.word	0x41d00000

0800391c <LSM6DS3_X_Disable_Tilt_Detection>:
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Disable_Tilt_Detection(
		DrvContextTypeDef *handle) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

	/* Disable tilt event on INT1. */
	if (LSM6DS3_ACC_GYRO_W_TiltEvOnInt1((void*) handle,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2100      	movs	r1, #0
 8003928:	0018      	movs	r0, r3
 800392a:	f7fe fc4e 	bl	80021ca <LSM6DS3_ACC_GYRO_W_TiltEvOnInt1>
 800392e:	1e03      	subs	r3, r0, #0
 8003930:	d101      	bne.n	8003936 <LSM6DS3_X_Disable_Tilt_Detection+0x1a>
			LSM6DS3_ACC_GYRO_INT1_TILT_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e01b      	b.n	800396e <LSM6DS3_X_Disable_Tilt_Detection+0x52>
	}

	/* Disable tilt event on INT2. */
	if (LSM6DS3_ACC_GYRO_W_TiltEvOnInt2((void*) handle,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2100      	movs	r1, #0
 800393a:	0018      	movs	r0, r3
 800393c:	f7fe fd6b 	bl	8002416 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt2>
 8003940:	1e03      	subs	r3, r0, #0
 8003942:	d101      	bne.n	8003948 <LSM6DS3_X_Disable_Tilt_Detection+0x2c>
			LSM6DS3_ACC_GYRO_INT2_TILT_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e012      	b.n	800396e <LSM6DS3_X_Disable_Tilt_Detection+0x52>
	}

	/* Disable tilt calculation. */
	if (LSM6DS3_ACC_GYRO_W_TILT_EN((void*) handle,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2100      	movs	r1, #0
 800394c:	0018      	movs	r0, r3
 800394e:	f7fe f8f7 	bl	8001b40 <LSM6DS3_ACC_GYRO_W_TILT_EN>
 8003952:	1e03      	subs	r3, r0, #0
 8003954:	d101      	bne.n	800395a <LSM6DS3_X_Disable_Tilt_Detection+0x3e>
			LSM6DS3_ACC_GYRO_TILT_EN_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e009      	b.n	800396e <LSM6DS3_X_Disable_Tilt_Detection+0x52>
	}

	/* Disable embedded functionalities */
	if (LSM6DS3_ACC_GYRO_W_FUNC_EN((void*) handle,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2100      	movs	r1, #0
 800395e:	0018      	movs	r0, r3
 8003960:	f7fd fdaa 	bl	80014b8 <LSM6DS3_ACC_GYRO_W_FUNC_EN>
 8003964:	1e03      	subs	r3, r0, #0
 8003966:	d101      	bne.n	800396c <LSM6DS3_X_Disable_Tilt_Detection+0x50>
			LSM6DS3_ACC_GYRO_FUNC_EN_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <LSM6DS3_X_Disable_Tilt_Detection+0x52>
	}

	return COMPONENT_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b002      	add	sp, #8
 8003974:	bd80      	pop	{r7, pc}

08003976 <LSM6DS3_X_Get_Tilt_Detection_Status>:
 * @note This function is deprecated and has been replaced by LSM6DS3_X_Get_Event_Status
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_Tilt_Detection_Status(
		DrvContextTypeDef *handle, uint8_t *status) {
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_TILT_EV_STATUS_t tilt_status;

	if (LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS((void*) handle, &tilt_status)
 8003980:	230f      	movs	r3, #15
 8003982:	18fa      	adds	r2, r7, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	0011      	movs	r1, r2
 8003988:	0018      	movs	r0, r3
 800398a:	f7fd fffa 	bl	8001982 <LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS>
 800398e:	1e03      	subs	r3, r0, #0
 8003990:	d101      	bne.n	8003996 <LSM6DS3_X_Get_Tilt_Detection_Status+0x20>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e011      	b.n	80039ba <LSM6DS3_X_Get_Tilt_Detection_Status+0x44>
	}

	switch (tilt_status) {
 8003996:	230f      	movs	r3, #15
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <LSM6DS3_X_Get_Tilt_Detection_Status+0x36>
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d107      	bne.n	80039b4 <LSM6DS3_X_Get_Tilt_Detection_Status+0x3e>
	case LSM6DS3_ACC_GYRO_TILT_EV_STATUS_DETECTED:
		*status = 1;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
		break;
 80039aa:	e005      	b.n	80039b8 <LSM6DS3_X_Get_Tilt_Detection_Status+0x42>
	case LSM6DS3_ACC_GYRO_TILT_EV_STATUS_NOT_DETECTED:
		*status = 0;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
		break;
 80039b2:	e001      	b.n	80039b8 <LSM6DS3_X_Get_Tilt_Detection_Status+0x42>
	default:
		return COMPONENT_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <LSM6DS3_X_Get_Tilt_Detection_Status+0x44>
	}

	return COMPONENT_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	0018      	movs	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	b004      	add	sp, #16
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <LSM6DS3_X_Enable_Wake_Up_Detection>:
 * @note  This function sets the LSM6DS3 accelerometer ODR to 416Hz and the LSM6DS3 accelerometer full scale to 2g
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Enable_Wake_Up_Detection(
		DrvContextTypeDef *handle, SensorIntPin_t int_pin) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	000a      	movs	r2, r1
 80039ce:	1cfb      	adds	r3, r7, #3
 80039d0:	701a      	strb	r2, [r3, #0]

	/* Output Data Rate selection */
	if (LSM6DS3_X_Set_ODR_Value(handle, 416.0f) == COMPONENT_ERROR) {
 80039d2:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <LSM6DS3_X_Enable_Wake_Up_Detection+0xa0>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	1c11      	adds	r1, r2, #0
 80039d8:	0018      	movs	r0, r3
 80039da:	f7ff f9b5 	bl	8002d48 <LSM6DS3_X_Set_ODR_Value>
 80039de:	0003      	movs	r3, r0
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <LSM6DS3_X_Enable_Wake_Up_Detection+0x24>
		return COMPONENT_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e039      	b.n	8003a5c <LSM6DS3_X_Enable_Wake_Up_Detection+0x98>
	}

	/* Full scale selection */
	if (LSM6DS3_ACC_GYRO_W_FS_XL((void*) handle, LSM6DS3_ACC_GYRO_FS_XL_2g)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2100      	movs	r1, #0
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7fd f93e 	bl	8000c6e <LSM6DS3_ACC_GYRO_W_FS_XL>
 80039f2:	1e03      	subs	r3, r0, #0
 80039f4:	d101      	bne.n	80039fa <LSM6DS3_X_Enable_Wake_Up_Detection+0x36>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e030      	b.n	8003a5c <LSM6DS3_X_Enable_Wake_Up_Detection+0x98>
	}

	/* WAKE_DUR setting */
	if (LSM6DS3_ACC_GYRO_W_WAKE_DUR((void*) handle, 0x00) == MEMS_ERROR) {
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2100      	movs	r1, #0
 80039fe:	0018      	movs	r0, r3
 8003a00:	f7fe faf7 	bl	8001ff2 <LSM6DS3_ACC_GYRO_W_WAKE_DUR>
 8003a04:	1e03      	subs	r3, r0, #0
 8003a06:	d101      	bne.n	8003a0c <LSM6DS3_X_Enable_Wake_Up_Detection+0x48>
		return COMPONENT_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e027      	b.n	8003a5c <LSM6DS3_X_Enable_Wake_Up_Detection+0x98>
	}

	/* Set wake up threshold. */
	if (LSM6DS3_ACC_GYRO_W_WK_THS((void*) handle, 0x02) == MEMS_ERROR) {
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2102      	movs	r1, #2
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7fe fa16 	bl	8001e42 <LSM6DS3_ACC_GYRO_W_WK_THS>
 8003a16:	1e03      	subs	r3, r0, #0
 8003a18:	d101      	bne.n	8003a1e <LSM6DS3_X_Enable_Wake_Up_Detection+0x5a>
		return COMPONENT_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e01e      	b.n	8003a5c <LSM6DS3_X_Enable_Wake_Up_Detection+0x98>
	}

	/* Enable wake up detection on either INT1 or INT2 pin */
	switch (int_pin) {
 8003a1e:	1cfb      	adds	r3, r7, #3
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <LSM6DS3_X_Enable_Wake_Up_Detection+0x68>
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d009      	beq.n	8003a3e <LSM6DS3_X_Enable_Wake_Up_Detection+0x7a>
 8003a2a:	e011      	b.n	8003a50 <LSM6DS3_X_Enable_Wake_Up_Detection+0x8c>
	case INT1_PIN:
		if (LSM6DS3_ACC_GYRO_W_WUEvOnInt1((void*) handle,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2120      	movs	r1, #32
 8003a30:	0018      	movs	r0, r3
 8003a32:	f7fe fc8e 	bl	8002352 <LSM6DS3_ACC_GYRO_W_WUEvOnInt1>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d10c      	bne.n	8003a54 <LSM6DS3_X_Enable_Wake_Up_Detection+0x90>
				LSM6DS3_ACC_GYRO_INT1_WU_ENABLED) == MEMS_ERROR) {
			return COMPONENT_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00e      	b.n	8003a5c <LSM6DS3_X_Enable_Wake_Up_Detection+0x98>
		}
		break;

	case INT2_PIN:
		if (LSM6DS3_ACC_GYRO_W_WUEvOnInt2((void*) handle,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2120      	movs	r1, #32
 8003a42:	0018      	movs	r0, r3
 8003a44:	f7fe fdab 	bl	800259e <LSM6DS3_ACC_GYRO_W_WUEvOnInt2>
 8003a48:	1e03      	subs	r3, r0, #0
 8003a4a:	d105      	bne.n	8003a58 <LSM6DS3_X_Enable_Wake_Up_Detection+0x94>
				LSM6DS3_ACC_GYRO_INT2_WU_ENABLED) == MEMS_ERROR) {
			return COMPONENT_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e005      	b.n	8003a5c <LSM6DS3_X_Enable_Wake_Up_Detection+0x98>
		}
		break;

	default:
		return COMPONENT_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e003      	b.n	8003a5c <LSM6DS3_X_Enable_Wake_Up_Detection+0x98>
		break;
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	e000      	b.n	8003a5a <LSM6DS3_X_Enable_Wake_Up_Detection+0x96>
		break;
 8003a58:	46c0      	nop			; (mov r8, r8)
	}

	return COMPONENT_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b002      	add	sp, #8
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	43d00000 	.word	0x43d00000

08003a68 <LSM6DS3_X_Disable_Wake_Up_Detection>:
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Disable_Wake_Up_Detection(
		DrvContextTypeDef *handle) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

	/* Disable wake up event on INT1. */
	if (LSM6DS3_ACC_GYRO_W_WUEvOnInt1((void*) handle,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2100      	movs	r1, #0
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7fe fc6c 	bl	8002352 <LSM6DS3_ACC_GYRO_W_WUEvOnInt1>
 8003a7a:	1e03      	subs	r3, r0, #0
 8003a7c:	d101      	bne.n	8003a82 <LSM6DS3_X_Disable_Wake_Up_Detection+0x1a>
			LSM6DS3_ACC_GYRO_INT1_WU_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e01b      	b.n	8003aba <LSM6DS3_X_Disable_Wake_Up_Detection+0x52>
	}

	/* Disable wake up event on INT2. */
	if (LSM6DS3_ACC_GYRO_W_WUEvOnInt2((void*) handle,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2100      	movs	r1, #0
 8003a86:	0018      	movs	r0, r3
 8003a88:	f7fe fd89 	bl	800259e <LSM6DS3_ACC_GYRO_W_WUEvOnInt2>
 8003a8c:	1e03      	subs	r3, r0, #0
 8003a8e:	d101      	bne.n	8003a94 <LSM6DS3_X_Disable_Wake_Up_Detection+0x2c>
			LSM6DS3_ACC_GYRO_INT2_WU_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e012      	b.n	8003aba <LSM6DS3_X_Disable_Wake_Up_Detection+0x52>
	}

	/* WU_DUR setting */
	if (LSM6DS3_ACC_GYRO_W_WAKE_DUR((void*) handle, 0x00) == MEMS_ERROR) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2100      	movs	r1, #0
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7fe faaa 	bl	8001ff2 <LSM6DS3_ACC_GYRO_W_WAKE_DUR>
 8003a9e:	1e03      	subs	r3, r0, #0
 8003aa0:	d101      	bne.n	8003aa6 <LSM6DS3_X_Disable_Wake_Up_Detection+0x3e>
		return COMPONENT_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e009      	b.n	8003aba <LSM6DS3_X_Disable_Wake_Up_Detection+0x52>
	}

	/* WU_THS setting */
	if (LSM6DS3_ACC_GYRO_W_WK_THS((void*) handle, 0x00) == MEMS_ERROR) {
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f7fe f9c9 	bl	8001e42 <LSM6DS3_ACC_GYRO_W_WK_THS>
 8003ab0:	1e03      	subs	r3, r0, #0
 8003ab2:	d101      	bne.n	8003ab8 <LSM6DS3_X_Disable_Wake_Up_Detection+0x50>
		return COMPONENT_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <LSM6DS3_X_Disable_Wake_Up_Detection+0x52>
	}

	return COMPONENT_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	0018      	movs	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b002      	add	sp, #8
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <LSM6DS3_X_Get_Wake_Up_Detection_Status>:
 * @note This function is deprecated and has been replaced by LSM6DS3_X_Get_Event_Status
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_Wake_Up_Detection_Status(
		DrvContextTypeDef *handle, uint8_t *status) {
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_WU_EV_STATUS_t wake_up_status;

	if (LSM6DS3_ACC_GYRO_R_WU_EV_STATUS((void*) handle, &wake_up_status)
 8003acc:	230f      	movs	r3, #15
 8003ace:	18fa      	adds	r2, r7, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0011      	movs	r1, r2
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7fd fd20 	bl	800151a <LSM6DS3_ACC_GYRO_R_WU_EV_STATUS>
 8003ada:	1e03      	subs	r3, r0, #0
 8003adc:	d101      	bne.n	8003ae2 <LSM6DS3_X_Get_Wake_Up_Detection_Status+0x20>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e011      	b.n	8003b06 <LSM6DS3_X_Get_Wake_Up_Detection_Status+0x44>
	}

	switch (wake_up_status) {
 8003ae2:	230f      	movs	r3, #15
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <LSM6DS3_X_Get_Wake_Up_Detection_Status+0x36>
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d107      	bne.n	8003b00 <LSM6DS3_X_Get_Wake_Up_Detection_Status+0x3e>
	case LSM6DS3_ACC_GYRO_WU_EV_STATUS_DETECTED:
		*status = 1;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
		break;
 8003af6:	e005      	b.n	8003b04 <LSM6DS3_X_Get_Wake_Up_Detection_Status+0x42>
	case LSM6DS3_ACC_GYRO_WU_EV_STATUS_NOT_DETECTED:
		*status = 0;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
		break;
 8003afe:	e001      	b.n	8003b04 <LSM6DS3_X_Get_Wake_Up_Detection_Status+0x42>
	default:
		return COMPONENT_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <LSM6DS3_X_Get_Wake_Up_Detection_Status+0x44>
	}

	return COMPONENT_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b004      	add	sp, #16
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <LSM6DS3_X_Set_Wake_Up_Threshold>:
 * @param thr the threshold to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_Wake_Up_Threshold(
		DrvContextTypeDef *handle, uint8_t thr) {
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	000a      	movs	r2, r1
 8003b18:	1cfb      	adds	r3, r7, #3
 8003b1a:	701a      	strb	r2, [r3, #0]

	if (LSM6DS3_ACC_GYRO_W_WK_THS((void*) handle, thr) == MEMS_ERROR) {
 8003b1c:	1cfb      	adds	r3, r7, #3
 8003b1e:	781a      	ldrb	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	0011      	movs	r1, r2
 8003b24:	0018      	movs	r0, r3
 8003b26:	f7fe f98c 	bl	8001e42 <LSM6DS3_ACC_GYRO_W_WK_THS>
 8003b2a:	1e03      	subs	r3, r0, #0
 8003b2c:	d101      	bne.n	8003b32 <LSM6DS3_X_Set_Wake_Up_Threshold+0x24>
		return COMPONENT_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <LSM6DS3_X_Set_Wake_Up_Threshold+0x26>
	}

	return COMPONENT_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <LSM6DS3_X_Enable_Single_Tap_Detection>:
 * @note  This function sets the LSM6DS3 accelerometer ODR to 416Hz and the LSM6DS3 accelerometer full scale to 2g
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Enable_Single_Tap_Detection(
		DrvContextTypeDef *handle, SensorIntPin_t int_pin) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	000a      	movs	r2, r1
 8003b46:	1cfb      	adds	r3, r7, #3
 8003b48:	701a      	strb	r2, [r3, #0]

	/* Output Data Rate selection */
	if (LSM6DS3_X_Set_ODR_Value(handle, 416.0f) == COMPONENT_ERROR) {
 8003b4a:	4a38      	ldr	r2, [pc, #224]	; (8003c2c <LSM6DS3_X_Enable_Single_Tap_Detection+0xf0>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	1c11      	adds	r1, r2, #0
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff f8f9 	bl	8002d48 <LSM6DS3_X_Set_ODR_Value>
 8003b56:	0003      	movs	r3, r0
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <LSM6DS3_X_Enable_Single_Tap_Detection+0x24>
		return COMPONENT_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e060      	b.n	8003c22 <LSM6DS3_X_Enable_Single_Tap_Detection+0xe6>
	}

	/* Full scale selection */
	if (LSM6DS3_ACC_GYRO_W_FS_XL((void*) handle, LSM6DS3_ACC_GYRO_FS_XL_2g)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2100      	movs	r1, #0
 8003b64:	0018      	movs	r0, r3
 8003b66:	f7fd f882 	bl	8000c6e <LSM6DS3_ACC_GYRO_W_FS_XL>
 8003b6a:	1e03      	subs	r3, r0, #0
 8003b6c:	d101      	bne.n	8003b72 <LSM6DS3_X_Enable_Single_Tap_Detection+0x36>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e057      	b.n	8003c22 <LSM6DS3_X_Enable_Single_Tap_Detection+0xe6>
	}

	/* Enable X direction in tap recognition. */
	if (LSM6DS3_ACC_GYRO_W_TAP_X_EN((void*) handle,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2108      	movs	r1, #8
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7fd ffb1 	bl	8001ade <LSM6DS3_ACC_GYRO_W_TAP_X_EN>
 8003b7c:	1e03      	subs	r3, r0, #0
 8003b7e:	d101      	bne.n	8003b84 <LSM6DS3_X_Enable_Single_Tap_Detection+0x48>
			LSM6DS3_ACC_GYRO_TAP_X_EN_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e04e      	b.n	8003c22 <LSM6DS3_X_Enable_Single_Tap_Detection+0xe6>
	}

	/* Enable Y direction in tap recognition. */
	if (LSM6DS3_ACC_GYRO_W_TAP_Y_EN((void*) handle,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2104      	movs	r1, #4
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7fd ff77 	bl	8001a7c <LSM6DS3_ACC_GYRO_W_TAP_Y_EN>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d101      	bne.n	8003b96 <LSM6DS3_X_Enable_Single_Tap_Detection+0x5a>
			LSM6DS3_ACC_GYRO_TAP_Y_EN_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e045      	b.n	8003c22 <LSM6DS3_X_Enable_Single_Tap_Detection+0xe6>
	}

	/* Enable Z direction in tap recognition. */
	if (LSM6DS3_ACC_GYRO_W_TAP_Z_EN((void*) handle,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2102      	movs	r1, #2
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f7fd ff3d 	bl	8001a1a <LSM6DS3_ACC_GYRO_W_TAP_Z_EN>
 8003ba0:	1e03      	subs	r3, r0, #0
 8003ba2:	d101      	bne.n	8003ba8 <LSM6DS3_X_Enable_Single_Tap_Detection+0x6c>
			LSM6DS3_ACC_GYRO_TAP_Z_EN_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e03c      	b.n	8003c22 <LSM6DS3_X_Enable_Single_Tap_Detection+0xe6>
	}

	/* Set tap threshold. */
	if (LSM6DS3_X_Set_Tap_Threshold(handle, LSM6DS3_TAP_THRESHOLD_MID_LOW)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2108      	movs	r1, #8
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 f9d2 	bl	8003f56 <LSM6DS3_X_Set_Tap_Threshold>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <LSM6DS3_X_Enable_Single_Tap_Detection+0x80>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e032      	b.n	8003c22 <LSM6DS3_X_Enable_Single_Tap_Detection+0xe6>
	}

	/* Set tap shock time window. */
	if (LSM6DS3_X_Set_Tap_Shock_Time(handle, LSM6DS3_TAP_SHOCK_TIME_MID_HIGH)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f000 f9df 	bl	8003f84 <LSM6DS3_X_Set_Tap_Shock_Time>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <LSM6DS3_X_Enable_Single_Tap_Detection+0x94>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e028      	b.n	8003c22 <LSM6DS3_X_Enable_Single_Tap_Detection+0xe6>
	}

	/* Set tap quiet time window. */
	if (LSM6DS3_X_Set_Tap_Quiet_Time(handle, LSM6DS3_TAP_QUIET_TIME_MID_LOW)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f000 f9ec 	bl	8003fb2 <LSM6DS3_X_Set_Tap_Quiet_Time>
 8003bda:	0003      	movs	r3, r0
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <LSM6DS3_X_Enable_Single_Tap_Detection+0xa8>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e01e      	b.n	8003c22 <LSM6DS3_X_Enable_Single_Tap_Detection+0xe6>
	/* _NOTE_: Tap duration time window - don't care for single tap. */

	/* _NOTE_: Single/Double Tap event - don't care of this flag for single tap. */

	/* Enable single tap on either INT1 or INT2 pin */
	switch (int_pin) {
 8003be4:	1cfb      	adds	r3, r7, #3
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <LSM6DS3_X_Enable_Single_Tap_Detection+0xb6>
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d009      	beq.n	8003c04 <LSM6DS3_X_Enable_Single_Tap_Detection+0xc8>
 8003bf0:	e011      	b.n	8003c16 <LSM6DS3_X_Enable_Single_Tap_Detection+0xda>
	case INT1_PIN:
		if (LSM6DS3_ACC_GYRO_W_SingleTapOnInt1((void*) handle,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2140      	movs	r1, #64	; 0x40
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7fe fbdc 	bl	80023b4 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt1>
 8003bfc:	1e03      	subs	r3, r0, #0
 8003bfe:	d10c      	bne.n	8003c1a <LSM6DS3_X_Enable_Single_Tap_Detection+0xde>
				LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_ENABLED) == MEMS_ERROR) {
			return COMPONENT_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e00e      	b.n	8003c22 <LSM6DS3_X_Enable_Single_Tap_Detection+0xe6>
		}
		break;

	case INT2_PIN:
		if (LSM6DS3_ACC_GYRO_W_SingleTapOnInt2((void*) handle,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2140      	movs	r1, #64	; 0x40
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7fe fcf9 	bl	8002600 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt2>
 8003c0e:	1e03      	subs	r3, r0, #0
 8003c10:	d105      	bne.n	8003c1e <LSM6DS3_X_Enable_Single_Tap_Detection+0xe2>
				LSM6DS3_ACC_GYRO_INT2_SINGLE_TAP_ENABLED) == MEMS_ERROR) {
			return COMPONENT_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e005      	b.n	8003c22 <LSM6DS3_X_Enable_Single_Tap_Detection+0xe6>
		}
		break;

	default:
		return COMPONENT_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e003      	b.n	8003c22 <LSM6DS3_X_Enable_Single_Tap_Detection+0xe6>
		break;
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	e000      	b.n	8003c20 <LSM6DS3_X_Enable_Single_Tap_Detection+0xe4>
		break;
 8003c1e:	46c0      	nop			; (mov r8, r8)
	}

	return COMPONENT_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	0018      	movs	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b002      	add	sp, #8
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	43d00000 	.word	0x43d00000

08003c30 <LSM6DS3_X_Disable_Single_Tap_Detection>:
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Disable_Single_Tap_Detection(
		DrvContextTypeDef *handle) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

	/* Disable single tap interrupt on INT1 pin. */
	if (LSM6DS3_ACC_GYRO_W_SingleTapOnInt1((void*) handle,
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f7fe fbb9 	bl	80023b4 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt1>
 8003c42:	1e03      	subs	r3, r0, #0
 8003c44:	d101      	bne.n	8003c4a <LSM6DS3_X_Disable_Single_Tap_Detection+0x1a>
			LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e042      	b.n	8003cd0 <LSM6DS3_X_Disable_Single_Tap_Detection+0xa0>
	}

	/* Disable single tap interrupt on INT2 pin. */
	if (LSM6DS3_ACC_GYRO_W_SingleTapOnInt2((void*) handle,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f7fe fcd6 	bl	8002600 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt2>
 8003c54:	1e03      	subs	r3, r0, #0
 8003c56:	d101      	bne.n	8003c5c <LSM6DS3_X_Disable_Single_Tap_Detection+0x2c>
			LSM6DS3_ACC_GYRO_INT2_SINGLE_TAP_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e039      	b.n	8003cd0 <LSM6DS3_X_Disable_Single_Tap_Detection+0xa0>
	}

	/* Reset tap threshold. */
	if (LSM6DS3_X_Set_Tap_Threshold(handle, 0x0) == COMPONENT_ERROR) {
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2100      	movs	r1, #0
 8003c60:	0018      	movs	r0, r3
 8003c62:	f000 f978 	bl	8003f56 <LSM6DS3_X_Set_Tap_Threshold>
 8003c66:	0003      	movs	r3, r0
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <LSM6DS3_X_Disable_Single_Tap_Detection+0x40>
		return COMPONENT_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e02f      	b.n	8003cd0 <LSM6DS3_X_Disable_Single_Tap_Detection+0xa0>
	}

	/* Reset tap shock time window. */
	if (LSM6DS3_X_Set_Tap_Shock_Time(handle, 0x0) == COMPONENT_ERROR) {
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2100      	movs	r1, #0
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 f985 	bl	8003f84 <LSM6DS3_X_Set_Tap_Shock_Time>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <LSM6DS3_X_Disable_Single_Tap_Detection+0x54>
		return COMPONENT_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e025      	b.n	8003cd0 <LSM6DS3_X_Disable_Single_Tap_Detection+0xa0>
	}

	/* Reset tap quiet time window. */
	if (LSM6DS3_X_Set_Tap_Quiet_Time(handle, 0x0) == COMPONENT_ERROR) {
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2100      	movs	r1, #0
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f000 f992 	bl	8003fb2 <LSM6DS3_X_Set_Tap_Quiet_Time>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <LSM6DS3_X_Disable_Single_Tap_Detection+0x68>
		return COMPONENT_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e01b      	b.n	8003cd0 <LSM6DS3_X_Disable_Single_Tap_Detection+0xa0>
	/* _NOTE_: Tap duration time window - don't care for single tap. */

	/* _NOTE_: Single/Double Tap event - don't care of this flag for single tap. */

	/* Disable Z direction in tap recognition. */
	if (LSM6DS3_ACC_GYRO_W_TAP_Z_EN((void*) handle,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7fd febc 	bl	8001a1a <LSM6DS3_ACC_GYRO_W_TAP_Z_EN>
 8003ca2:	1e03      	subs	r3, r0, #0
 8003ca4:	d101      	bne.n	8003caa <LSM6DS3_X_Disable_Single_Tap_Detection+0x7a>
			LSM6DS3_ACC_GYRO_TAP_Z_EN_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e012      	b.n	8003cd0 <LSM6DS3_X_Disable_Single_Tap_Detection+0xa0>
	}

	/* Disable Y direction in tap recognition. */
	if (LSM6DS3_ACC_GYRO_W_TAP_Y_EN((void*) handle,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2100      	movs	r1, #0
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f7fd fee4 	bl	8001a7c <LSM6DS3_ACC_GYRO_W_TAP_Y_EN>
 8003cb4:	1e03      	subs	r3, r0, #0
 8003cb6:	d101      	bne.n	8003cbc <LSM6DS3_X_Disable_Single_Tap_Detection+0x8c>
			LSM6DS3_ACC_GYRO_TAP_Y_EN_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e009      	b.n	8003cd0 <LSM6DS3_X_Disable_Single_Tap_Detection+0xa0>
	}

	/* Disable X direction in tap recognition. */
	if (LSM6DS3_ACC_GYRO_W_TAP_X_EN((void*) handle,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f7fd ff0c 	bl	8001ade <LSM6DS3_ACC_GYRO_W_TAP_X_EN>
 8003cc6:	1e03      	subs	r3, r0, #0
 8003cc8:	d101      	bne.n	8003cce <LSM6DS3_X_Disable_Single_Tap_Detection+0x9e>
			LSM6DS3_ACC_GYRO_TAP_X_EN_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <LSM6DS3_X_Disable_Single_Tap_Detection+0xa0>
	}

	return COMPONENT_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <LSM6DS3_X_Get_Single_Tap_Detection_Status>:
 * @note This function is deprecated and has been replaced by LSM6DS3_X_Get_Event_Status
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_Single_Tap_Detection_Status(
		DrvContextTypeDef *handle, uint8_t *status) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_t tap_status;

	if (LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS((void*) handle, &tap_status)
 8003ce2:	230f      	movs	r3, #15
 8003ce4:	18fa      	adds	r2, r7, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	0011      	movs	r1, r2
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7fd fc66 	bl	80015bc <LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS>
 8003cf0:	1e03      	subs	r3, r0, #0
 8003cf2:	d101      	bne.n	8003cf8 <LSM6DS3_X_Get_Single_Tap_Detection_Status+0x20>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e011      	b.n	8003d1c <LSM6DS3_X_Get_Single_Tap_Detection_Status+0x44>
	}

	switch (tap_status) {
 8003cf8:	230f      	movs	r3, #15
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <LSM6DS3_X_Get_Single_Tap_Detection_Status+0x36>
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d107      	bne.n	8003d16 <LSM6DS3_X_Get_Single_Tap_Detection_Status+0x3e>
	case LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_DETECTED:
		*status = 1;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
		break;
 8003d0c:	e005      	b.n	8003d1a <LSM6DS3_X_Get_Single_Tap_Detection_Status+0x42>

	case LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_NOT_DETECTED:
		*status = 0;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
		break;
 8003d14:	e001      	b.n	8003d1a <LSM6DS3_X_Get_Single_Tap_Detection_Status+0x42>

	default:
		return COMPONENT_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <LSM6DS3_X_Get_Single_Tap_Detection_Status+0x44>
	}

	return COMPONENT_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b004      	add	sp, #16
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <LSM6DS3_X_Enable_Double_Tap_Detection>:
 * @note  This function sets the LSM6DS3 accelerometer ODR to 416Hz and the LSM6DS3 accelerometer full scale to 2g
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Enable_Double_Tap_Detection(
		DrvContextTypeDef *handle, SensorIntPin_t int_pin) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	000a      	movs	r2, r1
 8003d2e:	1cfb      	adds	r3, r7, #3
 8003d30:	701a      	strb	r2, [r3, #0]

	/* Output Data Rate selection */
	if (LSM6DS3_X_Set_ODR_Value(handle, 416.0f) == COMPONENT_ERROR) {
 8003d32:	4a41      	ldr	r2, [pc, #260]	; (8003e38 <LSM6DS3_X_Enable_Double_Tap_Detection+0x114>)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	1c11      	adds	r1, r2, #0
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f7ff f805 	bl	8002d48 <LSM6DS3_X_Set_ODR_Value>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <LSM6DS3_X_Enable_Double_Tap_Detection+0x24>
		return COMPONENT_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e073      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
	}

	/* Full scale selection */
	if (LSM6DS3_ACC_GYRO_W_FS_XL((void*) handle, LSM6DS3_ACC_GYRO_FS_XL_2g)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7fc ff8e 	bl	8000c6e <LSM6DS3_ACC_GYRO_W_FS_XL>
 8003d52:	1e03      	subs	r3, r0, #0
 8003d54:	d101      	bne.n	8003d5a <LSM6DS3_X_Enable_Double_Tap_Detection+0x36>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e06a      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
	}

	/* Enable X direction in tap recognition. */
	if (LSM6DS3_ACC_GYRO_W_TAP_X_EN((void*) handle,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2108      	movs	r1, #8
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7fd febd 	bl	8001ade <LSM6DS3_ACC_GYRO_W_TAP_X_EN>
 8003d64:	1e03      	subs	r3, r0, #0
 8003d66:	d101      	bne.n	8003d6c <LSM6DS3_X_Enable_Double_Tap_Detection+0x48>
			LSM6DS3_ACC_GYRO_TAP_X_EN_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e061      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
	}

	/* Enable Y direction in tap recognition. */
	if (LSM6DS3_ACC_GYRO_W_TAP_Y_EN((void*) handle,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2104      	movs	r1, #4
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7fd fe83 	bl	8001a7c <LSM6DS3_ACC_GYRO_W_TAP_Y_EN>
 8003d76:	1e03      	subs	r3, r0, #0
 8003d78:	d101      	bne.n	8003d7e <LSM6DS3_X_Enable_Double_Tap_Detection+0x5a>
			LSM6DS3_ACC_GYRO_TAP_Y_EN_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e058      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
	}

	/* Enable Z direction in tap recognition. */
	if (LSM6DS3_ACC_GYRO_W_TAP_Z_EN((void*) handle,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2102      	movs	r1, #2
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7fd fe49 	bl	8001a1a <LSM6DS3_ACC_GYRO_W_TAP_Z_EN>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d101      	bne.n	8003d90 <LSM6DS3_X_Enable_Double_Tap_Detection+0x6c>
			LSM6DS3_ACC_GYRO_TAP_Z_EN_ENABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e04f      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
	}

	/* Set tap threshold. */
	if (LSM6DS3_X_Set_Tap_Threshold(handle, LSM6DS3_TAP_THRESHOLD_MID_LOW)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2108      	movs	r1, #8
 8003d94:	0018      	movs	r0, r3
 8003d96:	f000 f8de 	bl	8003f56 <LSM6DS3_X_Set_Tap_Threshold>
 8003d9a:	0003      	movs	r3, r0
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <LSM6DS3_X_Enable_Double_Tap_Detection+0x80>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e045      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
	}

	/* Set tap shock time window. */
	if (LSM6DS3_X_Set_Tap_Shock_Time(handle, LSM6DS3_TAP_SHOCK_TIME_HIGH)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2103      	movs	r1, #3
 8003da8:	0018      	movs	r0, r3
 8003daa:	f000 f8eb 	bl	8003f84 <LSM6DS3_X_Set_Tap_Shock_Time>
 8003dae:	0003      	movs	r3, r0
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <LSM6DS3_X_Enable_Double_Tap_Detection+0x94>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e03b      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
	}

	/* Set tap quiet time window. */
	if (LSM6DS3_X_Set_Tap_Quiet_Time(handle, LSM6DS3_TAP_QUIET_TIME_HIGH)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2103      	movs	r1, #3
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f000 f8f8 	bl	8003fb2 <LSM6DS3_X_Set_Tap_Quiet_Time>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <LSM6DS3_X_Enable_Double_Tap_Detection+0xa8>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e031      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
	}

	/* Set tap duration time window. */
	if (LSM6DS3_X_Set_Tap_Duration_Time(handle, LSM6DS3_TAP_DURATION_TIME_MID)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2108      	movs	r1, #8
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f000 f905 	bl	8003fe0 <LSM6DS3_X_Set_Tap_Duration_Time>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <LSM6DS3_X_Enable_Double_Tap_Detection+0xbc>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e027      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
	}

	/* Single and double tap enabled. */
	if (LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV((void*) handle,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2180      	movs	r1, #128	; 0x80
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7fe f867 	bl	8001eb8 <LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV>
 8003dea:	1e03      	subs	r3, r0, #0
 8003dec:	d101      	bne.n	8003df2 <LSM6DS3_X_Enable_Double_Tap_Detection+0xce>
			LSM6DS3_ACC_GYRO_SINGLE_DOUBLE_TAP_DOUBLE_TAP) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e01e      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
	}

	/* Enable double tap on either INT1 or INT2 pin */
	switch (int_pin) {
 8003df2:	1cfb      	adds	r3, r7, #3
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <LSM6DS3_X_Enable_Double_Tap_Detection+0xdc>
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d009      	beq.n	8003e12 <LSM6DS3_X_Enable_Double_Tap_Detection+0xee>
 8003dfe:	e011      	b.n	8003e24 <LSM6DS3_X_Enable_Double_Tap_Detection+0x100>
	case INT1_PIN:
		if (LSM6DS3_ACC_GYRO_W_TapEvOnInt1((void*) handle,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2108      	movs	r1, #8
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7fe fa42 	bl	800228e <LSM6DS3_ACC_GYRO_W_TapEvOnInt1>
 8003e0a:	1e03      	subs	r3, r0, #0
 8003e0c:	d10c      	bne.n	8003e28 <LSM6DS3_X_Enable_Double_Tap_Detection+0x104>
				LSM6DS3_ACC_GYRO_INT1_TAP_ENABLED) == MEMS_ERROR) {
			return COMPONENT_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e00e      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
		}
		break;

	case INT2_PIN:
		if (LSM6DS3_ACC_GYRO_W_TapEvOnInt2((void*) handle,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2108      	movs	r1, #8
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7fe fb5f 	bl	80024da <LSM6DS3_ACC_GYRO_W_TapEvOnInt2>
 8003e1c:	1e03      	subs	r3, r0, #0
 8003e1e:	d105      	bne.n	8003e2c <LSM6DS3_X_Enable_Double_Tap_Detection+0x108>
				LSM6DS3_ACC_GYRO_INT2_TAP_ENABLED) == MEMS_ERROR) {
			return COMPONENT_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e005      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
		}
		break;

	default:
		return COMPONENT_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e003      	b.n	8003e30 <LSM6DS3_X_Enable_Double_Tap_Detection+0x10c>
		break;
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	e000      	b.n	8003e2e <LSM6DS3_X_Enable_Double_Tap_Detection+0x10a>
		break;
 8003e2c:	46c0      	nop			; (mov r8, r8)
	}

	return COMPONENT_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	0018      	movs	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b002      	add	sp, #8
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	43d00000 	.word	0x43d00000

08003e3c <LSM6DS3_X_Disable_Double_Tap_Detection>:
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Disable_Double_Tap_Detection(
		DrvContextTypeDef *handle) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

	/* Disable double tap interrupt on INT1 pin. */
	if (LSM6DS3_ACC_GYRO_W_TapEvOnInt1((void*) handle,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2100      	movs	r1, #0
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f7fe fa20 	bl	800228e <LSM6DS3_ACC_GYRO_W_TapEvOnInt1>
 8003e4e:	1e03      	subs	r3, r0, #0
 8003e50:	d101      	bne.n	8003e56 <LSM6DS3_X_Disable_Double_Tap_Detection+0x1a>
			LSM6DS3_ACC_GYRO_INT1_TAP_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e055      	b.n	8003f02 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc6>
	}

	/* Disable double tap interrupt on INT2 pin. */
	if (LSM6DS3_ACC_GYRO_W_TapEvOnInt2((void*) handle,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2100      	movs	r1, #0
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f7fe fb3d 	bl	80024da <LSM6DS3_ACC_GYRO_W_TapEvOnInt2>
 8003e60:	1e03      	subs	r3, r0, #0
 8003e62:	d101      	bne.n	8003e68 <LSM6DS3_X_Disable_Double_Tap_Detection+0x2c>
			LSM6DS3_ACC_GYRO_INT2_TAP_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e04c      	b.n	8003f02 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc6>
	}

	/* Reset tap threshold. */
	if (LSM6DS3_X_Set_Tap_Threshold(handle, 0x0) == COMPONENT_ERROR) {
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f000 f872 	bl	8003f56 <LSM6DS3_X_Set_Tap_Threshold>
 8003e72:	0003      	movs	r3, r0
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <LSM6DS3_X_Disable_Double_Tap_Detection+0x40>
		return COMPONENT_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e042      	b.n	8003f02 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc6>
	}

	/* Reset tap shock time window. */
	if (LSM6DS3_X_Set_Tap_Shock_Time(handle, 0x0) == COMPONENT_ERROR) {
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2100      	movs	r1, #0
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 f87f 	bl	8003f84 <LSM6DS3_X_Set_Tap_Shock_Time>
 8003e86:	0003      	movs	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <LSM6DS3_X_Disable_Double_Tap_Detection+0x54>
		return COMPONENT_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e038      	b.n	8003f02 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc6>
	}

	/* Reset tap quiet time window. */
	if (LSM6DS3_X_Set_Tap_Quiet_Time(handle, 0x0) == COMPONENT_ERROR) {
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2100      	movs	r1, #0
 8003e94:	0018      	movs	r0, r3
 8003e96:	f000 f88c 	bl	8003fb2 <LSM6DS3_X_Set_Tap_Quiet_Time>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <LSM6DS3_X_Disable_Double_Tap_Detection+0x68>
		return COMPONENT_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e02e      	b.n	8003f02 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc6>
	}

	/* Reset tap duration time window. */
	if (LSM6DS3_X_Set_Tap_Duration_Time(handle, 0x0) == COMPONENT_ERROR) {
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f000 f899 	bl	8003fe0 <LSM6DS3_X_Set_Tap_Duration_Time>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <LSM6DS3_X_Disable_Double_Tap_Detection+0x7c>
		return COMPONENT_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e024      	b.n	8003f02 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc6>
	}

	/* Only single tap enabled. */
	if (LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV((void*) handle,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2100      	movs	r1, #0
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f7fd fffb 	bl	8001eb8 <LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV>
 8003ec2:	1e03      	subs	r3, r0, #0
 8003ec4:	d101      	bne.n	8003eca <LSM6DS3_X_Disable_Double_Tap_Detection+0x8e>
			LSM6DS3_ACC_GYRO_SINGLE_DOUBLE_TAP_SINGLE_TAP) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e01b      	b.n	8003f02 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc6>
	}

	/* Disable Z direction in tap recognition. */
	if (LSM6DS3_ACC_GYRO_W_TAP_Z_EN((void*) handle,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2100      	movs	r1, #0
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7fd fda3 	bl	8001a1a <LSM6DS3_ACC_GYRO_W_TAP_Z_EN>
 8003ed4:	1e03      	subs	r3, r0, #0
 8003ed6:	d101      	bne.n	8003edc <LSM6DS3_X_Disable_Double_Tap_Detection+0xa0>
			LSM6DS3_ACC_GYRO_TAP_Z_EN_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e012      	b.n	8003f02 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc6>
	}

	/* Disable Y direction in tap recognition. */
	if (LSM6DS3_ACC_GYRO_W_TAP_Y_EN((void*) handle,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2100      	movs	r1, #0
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7fd fdcb 	bl	8001a7c <LSM6DS3_ACC_GYRO_W_TAP_Y_EN>
 8003ee6:	1e03      	subs	r3, r0, #0
 8003ee8:	d101      	bne.n	8003eee <LSM6DS3_X_Disable_Double_Tap_Detection+0xb2>
			LSM6DS3_ACC_GYRO_TAP_Y_EN_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e009      	b.n	8003f02 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc6>
	}

	/* Disable X direction in tap recognition. */
	if (LSM6DS3_ACC_GYRO_W_TAP_X_EN((void*) handle,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7fd fdf3 	bl	8001ade <LSM6DS3_ACC_GYRO_W_TAP_X_EN>
 8003ef8:	1e03      	subs	r3, r0, #0
 8003efa:	d101      	bne.n	8003f00 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc4>
			LSM6DS3_ACC_GYRO_TAP_X_EN_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc6>
	}

	return COMPONENT_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b002      	add	sp, #8
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <LSM6DS3_X_Get_Double_Tap_Detection_Status>:
 * @note This function is deprecated and has been replaced by LSM6DS3_X_Get_Event_Status
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_Double_Tap_Detection_Status(
		DrvContextTypeDef *handle, uint8_t *status) {
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_t tap_status;

	if (LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS((void*) handle, &tap_status)
 8003f14:	230f      	movs	r3, #15
 8003f16:	18fa      	adds	r2, r7, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7fd fb32 	bl	8001586 <LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS>
 8003f22:	1e03      	subs	r3, r0, #0
 8003f24:	d101      	bne.n	8003f2a <LSM6DS3_X_Get_Double_Tap_Detection_Status+0x20>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e011      	b.n	8003f4e <LSM6DS3_X_Get_Double_Tap_Detection_Status+0x44>
	}

	switch (tap_status) {
 8003f2a:	230f      	movs	r3, #15
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <LSM6DS3_X_Get_Double_Tap_Detection_Status+0x36>
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d107      	bne.n	8003f48 <LSM6DS3_X_Get_Double_Tap_Detection_Status+0x3e>
	case LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_DETECTED:
		*status = 1;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	701a      	strb	r2, [r3, #0]
		break;
 8003f3e:	e005      	b.n	8003f4c <LSM6DS3_X_Get_Double_Tap_Detection_Status+0x42>

	case LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_NOT_DETECTED:
		*status = 0;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
		break;
 8003f46:	e001      	b.n	8003f4c <LSM6DS3_X_Get_Double_Tap_Detection_Status+0x42>

	default:
		return COMPONENT_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <LSM6DS3_X_Get_Double_Tap_Detection_Status+0x44>
	}

	return COMPONENT_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b004      	add	sp, #16
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <LSM6DS3_X_Set_Tap_Threshold>:
 * @param thr the threshold to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_Tap_Threshold(DrvContextTypeDef *handle,
		uint8_t thr) {
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	000a      	movs	r2, r1
 8003f60:	1cfb      	adds	r3, r7, #3
 8003f62:	701a      	strb	r2, [r3, #0]

	if (LSM6DS3_ACC_GYRO_W_TAP_THS((void*) handle, thr) == MEMS_ERROR) {
 8003f64:	1cfb      	adds	r3, r7, #3
 8003f66:	781a      	ldrb	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0011      	movs	r1, r2
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7fd fe49 	bl	8001c04 <LSM6DS3_ACC_GYRO_W_TAP_THS>
 8003f72:	1e03      	subs	r3, r0, #0
 8003f74:	d101      	bne.n	8003f7a <LSM6DS3_X_Set_Tap_Threshold+0x24>
		return COMPONENT_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <LSM6DS3_X_Set_Tap_Threshold+0x26>
	}

	return COMPONENT_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b002      	add	sp, #8
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <LSM6DS3_X_Set_Tap_Shock_Time>:
 * @param time the shock time window to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_Tap_Shock_Time(DrvContextTypeDef *handle,
		uint8_t time) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	000a      	movs	r2, r1
 8003f8e:	1cfb      	adds	r3, r7, #3
 8003f90:	701a      	strb	r2, [r3, #0]

	if (LSM6DS3_ACC_GYRO_W_SHOCK_Duration((void*) handle, time) == MEMS_ERROR) {
 8003f92:	1cfb      	adds	r3, r7, #3
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0011      	movs	r1, r2
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7fd fe9e 	bl	8001cdc <LSM6DS3_ACC_GYRO_W_SHOCK_Duration>
 8003fa0:	1e03      	subs	r3, r0, #0
 8003fa2:	d101      	bne.n	8003fa8 <LSM6DS3_X_Set_Tap_Shock_Time+0x24>
		return COMPONENT_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <LSM6DS3_X_Set_Tap_Shock_Time+0x26>
	}

	return COMPONENT_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b002      	add	sp, #8
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <LSM6DS3_X_Set_Tap_Quiet_Time>:
 * @param time the quiet time window to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_Tap_Quiet_Time(DrvContextTypeDef *handle,
		uint8_t time) {
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	000a      	movs	r2, r1
 8003fbc:	1cfb      	adds	r3, r7, #3
 8003fbe:	701a      	strb	r2, [r3, #0]

	if (LSM6DS3_ACC_GYRO_W_QUIET_Duration((void*) handle, time) == MEMS_ERROR) {
 8003fc0:	1cfb      	adds	r3, r7, #3
 8003fc2:	781a      	ldrb	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7fd fec2 	bl	8001d52 <LSM6DS3_ACC_GYRO_W_QUIET_Duration>
 8003fce:	1e03      	subs	r3, r0, #0
 8003fd0:	d101      	bne.n	8003fd6 <LSM6DS3_X_Set_Tap_Quiet_Time+0x24>
		return COMPONENT_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <LSM6DS3_X_Set_Tap_Quiet_Time+0x26>
	}

	return COMPONENT_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <LSM6DS3_X_Set_Tap_Duration_Time>:
 * @param time the duration of the time window to be set
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_Tap_Duration_Time(
		DrvContextTypeDef *handle, uint8_t time) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	000a      	movs	r2, r1
 8003fea:	1cfb      	adds	r3, r7, #3
 8003fec:	701a      	strb	r2, [r3, #0]

	if (LSM6DS3_ACC_GYRO_W_DUR((void*) handle, time) == MEMS_ERROR) {
 8003fee:	1cfb      	adds	r3, r7, #3
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	0011      	movs	r1, r2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f7fd fee7 	bl	8001dca <LSM6DS3_ACC_GYRO_W_DUR>
 8003ffc:	1e03      	subs	r3, r0, #0
 8003ffe:	d101      	bne.n	8004004 <LSM6DS3_X_Set_Tap_Duration_Time+0x24>
		return COMPONENT_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <LSM6DS3_X_Set_Tap_Duration_Time+0x26>
	}

	return COMPONENT_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b002      	add	sp, #8
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <LSM6DS3_X_Enable_6D_Orientation>:
 * @note  This function sets the LSM6DS3 accelerometer ODR to 416Hz and the LSM6DS3 accelerometer full scale to 2g
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Enable_6D_Orientation(
		DrvContextTypeDef *handle, SensorIntPin_t int_pin) {
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	000a      	movs	r2, r1
 800401a:	1cfb      	adds	r3, r7, #3
 800401c:	701a      	strb	r2, [r3, #0]

	/* Output Data Rate selection */
	if (LSM6DS3_X_Set_ODR_Value(handle, 416.0f) == COMPONENT_ERROR) {
 800401e:	4a20      	ldr	r2, [pc, #128]	; (80040a0 <LSM6DS3_X_Enable_6D_Orientation+0x90>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1c11      	adds	r1, r2, #0
 8004024:	0018      	movs	r0, r3
 8004026:	f7fe fe8f 	bl	8002d48 <LSM6DS3_X_Set_ODR_Value>
 800402a:	0003      	movs	r3, r0
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <LSM6DS3_X_Enable_6D_Orientation+0x24>
		return COMPONENT_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e030      	b.n	8004096 <LSM6DS3_X_Enable_6D_Orientation+0x86>
	}

	/* Full scale selection. */
	if (LSM6DS3_ACC_GYRO_W_FS_XL((void*) handle, LSM6DS3_ACC_GYRO_FS_XL_2g)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2100      	movs	r1, #0
 8004038:	0018      	movs	r0, r3
 800403a:	f7fc fe18 	bl	8000c6e <LSM6DS3_ACC_GYRO_W_FS_XL>
 800403e:	1e03      	subs	r3, r0, #0
 8004040:	d101      	bne.n	8004046 <LSM6DS3_X_Enable_6D_Orientation+0x36>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e027      	b.n	8004096 <LSM6DS3_X_Enable_6D_Orientation+0x86>
	}

	/* Set 6D threshold. */
	if (LSM6DS3_ACC_GYRO_W_SIXD_THS((void*) handle,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2140      	movs	r1, #64	; 0x40
 800404a:	0018      	movs	r0, r3
 800404c:	f7fd fe15 	bl	8001c7a <LSM6DS3_ACC_GYRO_W_SIXD_THS>
 8004050:	1e03      	subs	r3, r0, #0
 8004052:	d101      	bne.n	8004058 <LSM6DS3_X_Enable_6D_Orientation+0x48>
			LSM6DS3_ACC_GYRO_SIXD_THS_60_degree) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e01e      	b.n	8004096 <LSM6DS3_X_Enable_6D_Orientation+0x86>
	}

	/* Enable 6D orientation on either INT1 or INT2 pin */
	switch (int_pin) {
 8004058:	1cfb      	adds	r3, r7, #3
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <LSM6DS3_X_Enable_6D_Orientation+0x56>
 8004060:	2b01      	cmp	r3, #1
 8004062:	d009      	beq.n	8004078 <LSM6DS3_X_Enable_6D_Orientation+0x68>
 8004064:	e011      	b.n	800408a <LSM6DS3_X_Enable_6D_Orientation+0x7a>
	case INT1_PIN:
		if (LSM6DS3_ACC_GYRO_W_6DEvOnInt1((void*) handle,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2104      	movs	r1, #4
 800406a:	0018      	movs	r0, r3
 800406c:	f7fe f8de 	bl	800222c <LSM6DS3_ACC_GYRO_W_6DEvOnInt1>
 8004070:	1e03      	subs	r3, r0, #0
 8004072:	d10c      	bne.n	800408e <LSM6DS3_X_Enable_6D_Orientation+0x7e>
				LSM6DS3_ACC_GYRO_INT1_6D_ENABLED) == MEMS_ERROR) {
			return COMPONENT_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e00e      	b.n	8004096 <LSM6DS3_X_Enable_6D_Orientation+0x86>
		}
		break;

	case INT2_PIN:
		if (LSM6DS3_ACC_GYRO_W_6DEvOnInt2((void*) handle,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2104      	movs	r1, #4
 800407c:	0018      	movs	r0, r3
 800407e:	f7fe f9fb 	bl	8002478 <LSM6DS3_ACC_GYRO_W_6DEvOnInt2>
 8004082:	1e03      	subs	r3, r0, #0
 8004084:	d105      	bne.n	8004092 <LSM6DS3_X_Enable_6D_Orientation+0x82>
				LSM6DS3_ACC_GYRO_INT2_6D_ENABLED) == MEMS_ERROR) {
			return COMPONENT_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e005      	b.n	8004096 <LSM6DS3_X_Enable_6D_Orientation+0x86>
		}
		break;

	default:
		return COMPONENT_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e003      	b.n	8004096 <LSM6DS3_X_Enable_6D_Orientation+0x86>
		break;
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	e000      	b.n	8004094 <LSM6DS3_X_Enable_6D_Orientation+0x84>
		break;
 8004092:	46c0      	nop			; (mov r8, r8)
	}

	return COMPONENT_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b002      	add	sp, #8
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	43d00000 	.word	0x43d00000

080040a4 <LSM6DS3_X_Disable_6D_Orientation>:
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Disable_6D_Orientation(
		DrvContextTypeDef *handle) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

	/* Disable 6D orientation interrupt on INT1 pin. */
	if (LSM6DS3_ACC_GYRO_W_6DEvOnInt1((void*) handle,
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2100      	movs	r1, #0
 80040b0:	0018      	movs	r0, r3
 80040b2:	f7fe f8bb 	bl	800222c <LSM6DS3_ACC_GYRO_W_6DEvOnInt1>
 80040b6:	1e03      	subs	r3, r0, #0
 80040b8:	d101      	bne.n	80040be <LSM6DS3_X_Disable_6D_Orientation+0x1a>
			LSM6DS3_ACC_GYRO_INT1_6D_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e012      	b.n	80040e4 <LSM6DS3_X_Disable_6D_Orientation+0x40>
	}

	/* Disable 6D orientation interrupt on INT2 pin. */
	if (LSM6DS3_ACC_GYRO_W_6DEvOnInt2((void*) handle,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2100      	movs	r1, #0
 80040c2:	0018      	movs	r0, r3
 80040c4:	f7fe f9d8 	bl	8002478 <LSM6DS3_ACC_GYRO_W_6DEvOnInt2>
 80040c8:	1e03      	subs	r3, r0, #0
 80040ca:	d101      	bne.n	80040d0 <LSM6DS3_X_Disable_6D_Orientation+0x2c>
			LSM6DS3_ACC_GYRO_INT2_6D_DISABLED) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e009      	b.n	80040e4 <LSM6DS3_X_Disable_6D_Orientation+0x40>
	}

	/* Reset 6D threshold. */
	if (LSM6DS3_ACC_GYRO_W_SIXD_THS((void*) handle,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2100      	movs	r1, #0
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7fd fdd0 	bl	8001c7a <LSM6DS3_ACC_GYRO_W_SIXD_THS>
 80040da:	1e03      	subs	r3, r0, #0
 80040dc:	d101      	bne.n	80040e2 <LSM6DS3_X_Disable_6D_Orientation+0x3e>
			LSM6DS3_ACC_GYRO_SIXD_THS_80_degree) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <LSM6DS3_X_Disable_6D_Orientation+0x40>
	}

	return COMPONENT_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b002      	add	sp, #8
 80040ea:	bd80      	pop	{r7, pc}

080040ec <LSM6DS3_X_Get_6D_Orientation_Status>:
 * @note This function is deprecated and has been replaced by LSM6DS3_X_Get_Event_Status
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_6D_Orientation_Status(
		DrvContextTypeDef *handle, uint8_t *status) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_D6D_EV_STATUS_t status_raw;

	if (LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS((void*) handle, &status_raw)
 80040f6:	230f      	movs	r3, #15
 80040f8:	18fa      	adds	r2, r7, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	0011      	movs	r1, r2
 80040fe:	0018      	movs	r0, r3
 8004100:	f7fd fb19 	bl	8001736 <LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS>
 8004104:	1e03      	subs	r3, r0, #0
 8004106:	d101      	bne.n	800410c <LSM6DS3_X_Get_6D_Orientation_Status+0x20>
			== MEMS_ERROR) {
		return COMPONENT_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e011      	b.n	8004130 <LSM6DS3_X_Get_6D_Orientation_Status+0x44>
	}

	switch (status_raw) {
 800410c:	230f      	movs	r3, #15
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <LSM6DS3_X_Get_6D_Orientation_Status+0x36>
 8004116:	2b40      	cmp	r3, #64	; 0x40
 8004118:	d107      	bne.n	800412a <LSM6DS3_X_Get_6D_Orientation_Status+0x3e>
	case LSM6DS3_ACC_GYRO_D6D_EV_STATUS_DETECTED:
		*status = 1;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
		break;
 8004120:	e005      	b.n	800412e <LSM6DS3_X_Get_6D_Orientation_Status+0x42>
	case LSM6DS3_ACC_GYRO_D6D_EV_STATUS_NOT_DETECTED:
		*status = 0;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
		break;
 8004128:	e001      	b.n	800412e <LSM6DS3_X_Get_6D_Orientation_Status+0x42>
	default:
		return COMPONENT_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <LSM6DS3_X_Get_6D_Orientation_Status+0x44>
	}

	return COMPONENT_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b004      	add	sp, #16
 8004136:	bd80      	pop	{r7, pc}

08004138 <LSM6DS3_X_Get_6D_Orientation_XL>:
 * @param xl the pointer to the 6D orientation XL axis
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_6D_Orientation_XL(
		DrvContextTypeDef *handle, uint8_t *xl) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_DSD_XL_t xl_raw;

	if (LSM6DS3_ACC_GYRO_R_DSD_XL((void*) handle, &xl_raw) == MEMS_ERROR) {
 8004142:	230f      	movs	r3, #15
 8004144:	18fa      	adds	r2, r7, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0011      	movs	r1, r2
 800414a:	0018      	movs	r0, r3
 800414c:	f7fd fa51 	bl	80015f2 <LSM6DS3_ACC_GYRO_R_DSD_XL>
 8004150:	1e03      	subs	r3, r0, #0
 8004152:	d101      	bne.n	8004158 <LSM6DS3_X_Get_6D_Orientation_XL+0x20>
		return COMPONENT_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e011      	b.n	800417c <LSM6DS3_X_Get_6D_Orientation_XL+0x44>
	}

	switch (xl_raw) {
 8004158:	230f      	movs	r3, #15
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <LSM6DS3_X_Get_6D_Orientation_XL+0x36>
 8004162:	2b01      	cmp	r3, #1
 8004164:	d107      	bne.n	8004176 <LSM6DS3_X_Get_6D_Orientation_XL+0x3e>
	case LSM6DS3_ACC_GYRO_DSD_XL_DETECTED:
		*xl = 1;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2201      	movs	r2, #1
 800416a:	701a      	strb	r2, [r3, #0]
		break;
 800416c:	e005      	b.n	800417a <LSM6DS3_X_Get_6D_Orientation_XL+0x42>
	case LSM6DS3_ACC_GYRO_DSD_XL_NOT_DETECTED:
		*xl = 0;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
		break;
 8004174:	e001      	b.n	800417a <LSM6DS3_X_Get_6D_Orientation_XL+0x42>
	default:
		return COMPONENT_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <LSM6DS3_X_Get_6D_Orientation_XL+0x44>
	}

	return COMPONENT_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	0018      	movs	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	b004      	add	sp, #16
 8004182:	bd80      	pop	{r7, pc}

08004184 <LSM6DS3_X_Get_6D_Orientation_XH>:
 * @param xh the pointer to the 6D orientation XH axis
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_6D_Orientation_XH(
		DrvContextTypeDef *handle, uint8_t *xh) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_DSD_XH_t xh_raw;

	if (LSM6DS3_ACC_GYRO_R_DSD_XH((void*) handle, &xh_raw) == MEMS_ERROR) {
 800418e:	230f      	movs	r3, #15
 8004190:	18fa      	adds	r2, r7, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	0011      	movs	r1, r2
 8004196:	0018      	movs	r0, r3
 8004198:	f7fd fa46 	bl	8001628 <LSM6DS3_ACC_GYRO_R_DSD_XH>
 800419c:	1e03      	subs	r3, r0, #0
 800419e:	d101      	bne.n	80041a4 <LSM6DS3_X_Get_6D_Orientation_XH+0x20>
		return COMPONENT_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e011      	b.n	80041c8 <LSM6DS3_X_Get_6D_Orientation_XH+0x44>
	}

	switch (xh_raw) {
 80041a4:	230f      	movs	r3, #15
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <LSM6DS3_X_Get_6D_Orientation_XH+0x36>
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d107      	bne.n	80041c2 <LSM6DS3_X_Get_6D_Orientation_XH+0x3e>
	case LSM6DS3_ACC_GYRO_DSD_XH_DETECTED:
		*xh = 1;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
		break;
 80041b8:	e005      	b.n	80041c6 <LSM6DS3_X_Get_6D_Orientation_XH+0x42>
	case LSM6DS3_ACC_GYRO_DSD_XH_NOT_DETECTED:
		*xh = 0;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
		break;
 80041c0:	e001      	b.n	80041c6 <LSM6DS3_X_Get_6D_Orientation_XH+0x42>
	default:
		return COMPONENT_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <LSM6DS3_X_Get_6D_Orientation_XH+0x44>
	}

	return COMPONENT_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b004      	add	sp, #16
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <LSM6DS3_X_Get_6D_Orientation_YL>:
 * @param yl the pointer to the 6D orientation YL axis
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_6D_Orientation_YL(
		DrvContextTypeDef *handle, uint8_t *yl) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_DSD_YL_t yl_raw;

	if (LSM6DS3_ACC_GYRO_R_DSD_YL((void*) handle, &yl_raw) == MEMS_ERROR) {
 80041da:	230f      	movs	r3, #15
 80041dc:	18fa      	adds	r2, r7, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0011      	movs	r1, r2
 80041e2:	0018      	movs	r0, r3
 80041e4:	f7fd fa3b 	bl	800165e <LSM6DS3_ACC_GYRO_R_DSD_YL>
 80041e8:	1e03      	subs	r3, r0, #0
 80041ea:	d101      	bne.n	80041f0 <LSM6DS3_X_Get_6D_Orientation_YL+0x20>
		return COMPONENT_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e011      	b.n	8004214 <LSM6DS3_X_Get_6D_Orientation_YL+0x44>
	}

	switch (yl_raw) {
 80041f0:	230f      	movs	r3, #15
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <LSM6DS3_X_Get_6D_Orientation_YL+0x36>
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d107      	bne.n	800420e <LSM6DS3_X_Get_6D_Orientation_YL+0x3e>
	case LSM6DS3_ACC_GYRO_DSD_YL_DETECTED:
		*yl = 1;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2201      	movs	r2, #1
 8004202:	701a      	strb	r2, [r3, #0]
		break;
 8004204:	e005      	b.n	8004212 <LSM6DS3_X_Get_6D_Orientation_YL+0x42>
	case LSM6DS3_ACC_GYRO_DSD_YL_NOT_DETECTED:
		*yl = 0;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
		break;
 800420c:	e001      	b.n	8004212 <LSM6DS3_X_Get_6D_Orientation_YL+0x42>
	default:
		return COMPONENT_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <LSM6DS3_X_Get_6D_Orientation_YL+0x44>
	}

	return COMPONENT_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	b004      	add	sp, #16
 800421a:	bd80      	pop	{r7, pc}

0800421c <LSM6DS3_X_Get_6D_Orientation_YH>:
 * @param yh the pointer to the 6D orientation YH axis
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_6D_Orientation_YH(
		DrvContextTypeDef *handle, uint8_t *yh) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_DSD_YH_t yh_raw;

	if (LSM6DS3_ACC_GYRO_R_DSD_YH((void*) handle, &yh_raw) == MEMS_ERROR) {
 8004226:	230f      	movs	r3, #15
 8004228:	18fa      	adds	r2, r7, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0011      	movs	r1, r2
 800422e:	0018      	movs	r0, r3
 8004230:	f7fd fa30 	bl	8001694 <LSM6DS3_ACC_GYRO_R_DSD_YH>
 8004234:	1e03      	subs	r3, r0, #0
 8004236:	d101      	bne.n	800423c <LSM6DS3_X_Get_6D_Orientation_YH+0x20>
		return COMPONENT_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e011      	b.n	8004260 <LSM6DS3_X_Get_6D_Orientation_YH+0x44>
	}

	switch (yh_raw) {
 800423c:	230f      	movs	r3, #15
 800423e:	18fb      	adds	r3, r7, r3
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <LSM6DS3_X_Get_6D_Orientation_YH+0x36>
 8004246:	2b08      	cmp	r3, #8
 8004248:	d107      	bne.n	800425a <LSM6DS3_X_Get_6D_Orientation_YH+0x3e>
	case LSM6DS3_ACC_GYRO_DSD_YH_DETECTED:
		*yh = 1;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2201      	movs	r2, #1
 800424e:	701a      	strb	r2, [r3, #0]
		break;
 8004250:	e005      	b.n	800425e <LSM6DS3_X_Get_6D_Orientation_YH+0x42>
	case LSM6DS3_ACC_GYRO_DSD_YH_NOT_DETECTED:
		*yh = 0;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
		break;
 8004258:	e001      	b.n	800425e <LSM6DS3_X_Get_6D_Orientation_YH+0x42>
	default:
		return COMPONENT_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <LSM6DS3_X_Get_6D_Orientation_YH+0x44>
	}

	return COMPONENT_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b004      	add	sp, #16
 8004266:	bd80      	pop	{r7, pc}

08004268 <LSM6DS3_X_Get_6D_Orientation_ZL>:
 * @param zl the pointer to the 6D orientation ZL axis
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_6D_Orientation_ZL(
		DrvContextTypeDef *handle, uint8_t *zl) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_DSD_ZL_t zl_raw;

	if (LSM6DS3_ACC_GYRO_R_DSD_ZL((void*) handle, &zl_raw) == MEMS_ERROR) {
 8004272:	230f      	movs	r3, #15
 8004274:	18fa      	adds	r2, r7, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	0011      	movs	r1, r2
 800427a:	0018      	movs	r0, r3
 800427c:	f7fd fa25 	bl	80016ca <LSM6DS3_ACC_GYRO_R_DSD_ZL>
 8004280:	1e03      	subs	r3, r0, #0
 8004282:	d101      	bne.n	8004288 <LSM6DS3_X_Get_6D_Orientation_ZL+0x20>
		return COMPONENT_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e011      	b.n	80042ac <LSM6DS3_X_Get_6D_Orientation_ZL+0x44>
	}

	switch (zl_raw) {
 8004288:	230f      	movs	r3, #15
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <LSM6DS3_X_Get_6D_Orientation_ZL+0x36>
 8004292:	2b10      	cmp	r3, #16
 8004294:	d107      	bne.n	80042a6 <LSM6DS3_X_Get_6D_Orientation_ZL+0x3e>
	case LSM6DS3_ACC_GYRO_DSD_ZL_DETECTED:
		*zl = 1;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2201      	movs	r2, #1
 800429a:	701a      	strb	r2, [r3, #0]
		break;
 800429c:	e005      	b.n	80042aa <LSM6DS3_X_Get_6D_Orientation_ZL+0x42>
	case LSM6DS3_ACC_GYRO_DSD_ZL_NOT_DETECTED:
		*zl = 0;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
		break;
 80042a4:	e001      	b.n	80042aa <LSM6DS3_X_Get_6D_Orientation_ZL+0x42>
	default:
		return COMPONENT_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <LSM6DS3_X_Get_6D_Orientation_ZL+0x44>
	}

	return COMPONENT_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	0018      	movs	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b004      	add	sp, #16
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <LSM6DS3_X_Get_6D_Orientation_ZH>:
 * @param zh the pointer to the 6D orientation ZH axis
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_6D_Orientation_ZH(
		DrvContextTypeDef *handle, uint8_t *zh) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_DSD_ZH_t zh_raw;

	if (LSM6DS3_ACC_GYRO_R_DSD_ZH((void*) handle, &zh_raw) == MEMS_ERROR) {
 80042be:	230f      	movs	r3, #15
 80042c0:	18fa      	adds	r2, r7, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	0011      	movs	r1, r2
 80042c6:	0018      	movs	r0, r3
 80042c8:	f7fd fa1a 	bl	8001700 <LSM6DS3_ACC_GYRO_R_DSD_ZH>
 80042cc:	1e03      	subs	r3, r0, #0
 80042ce:	d101      	bne.n	80042d4 <LSM6DS3_X_Get_6D_Orientation_ZH+0x20>
		return COMPONENT_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e011      	b.n	80042f8 <LSM6DS3_X_Get_6D_Orientation_ZH+0x44>
	}

	switch (zh_raw) {
 80042d4:	230f      	movs	r3, #15
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <LSM6DS3_X_Get_6D_Orientation_ZH+0x36>
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d107      	bne.n	80042f2 <LSM6DS3_X_Get_6D_Orientation_ZH+0x3e>
	case LSM6DS3_ACC_GYRO_DSD_ZH_DETECTED:
		*zh = 1;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
		break;
 80042e8:	e005      	b.n	80042f6 <LSM6DS3_X_Get_6D_Orientation_ZH+0x42>
	case LSM6DS3_ACC_GYRO_DSD_ZH_NOT_DETECTED:
		*zh = 0;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
		break;
 80042f0:	e001      	b.n	80042f6 <LSM6DS3_X_Get_6D_Orientation_ZH+0x42>
	default:
		return COMPONENT_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <LSM6DS3_X_Get_6D_Orientation_ZH+0x44>
	}

	return COMPONENT_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	0018      	movs	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b004      	add	sp, #16
 80042fe:	bd80      	pop	{r7, pc}

08004300 <LSM6DS3_X_Get_Event_Status>:
 * @param status the pointer to the status of all hardware events
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Get_Event_Status(DrvContextTypeDef *handle,
		ACCELERO_Event_Status_t *status) {
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
	uint8_t Wake_Up_Src = 0, Tap_Src = 0, D6D_Src = 0, Func_Src = 0,
 800430a:	240f      	movs	r4, #15
 800430c:	193b      	adds	r3, r7, r4
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	230e      	movs	r3, #14
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	230d      	movs	r3, #13
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	230c      	movs	r3, #12
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
			Md1_Cfg = 0, Md2_Cfg = 0, Int1_Ctrl = 0;
 800432a:	230b      	movs	r3, #11
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	230a      	movs	r3, #10
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	2309      	movs	r3, #9
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]

	memset((void*) status, 0x0, sizeof(ACCELERO_Event_Status_t));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2204      	movs	r2, #4
 8004346:	2100      	movs	r1, #0
 8004348:	0018      	movs	r0, r3
 800434a:	f005 f83e 	bl	80093ca <memset>

	if (LSM6DS3_X_Read_Reg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_SRC, &Wake_Up_Src)
 800434e:	193a      	adds	r2, r7, r4
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	211b      	movs	r1, #27
 8004354:	0018      	movs	r0, r3
 8004356:	f7fe fe43 	bl	8002fe0 <LSM6DS3_X_Read_Reg>
 800435a:	0003      	movs	r3, r0
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <LSM6DS3_X_Get_Event_Status+0x64>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0f6      	b.n	8004552 <LSM6DS3_X_Get_Event_Status+0x252>
	}

	if (LSM6DS3_X_Read_Reg(handle, LSM6DS3_ACC_GYRO_TAP_SRC, &Tap_Src)
 8004364:	230e      	movs	r3, #14
 8004366:	18fa      	adds	r2, r7, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	211c      	movs	r1, #28
 800436c:	0018      	movs	r0, r3
 800436e:	f7fe fe37 	bl	8002fe0 <LSM6DS3_X_Read_Reg>
 8004372:	0003      	movs	r3, r0
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <LSM6DS3_X_Get_Event_Status+0x7c>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0ea      	b.n	8004552 <LSM6DS3_X_Get_Event_Status+0x252>
	}

	if (LSM6DS3_X_Read_Reg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, &D6D_Src)
 800437c:	230d      	movs	r3, #13
 800437e:	18fa      	adds	r2, r7, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	211d      	movs	r1, #29
 8004384:	0018      	movs	r0, r3
 8004386:	f7fe fe2b 	bl	8002fe0 <LSM6DS3_X_Read_Reg>
 800438a:	0003      	movs	r3, r0
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <LSM6DS3_X_Get_Event_Status+0x94>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0de      	b.n	8004552 <LSM6DS3_X_Get_Event_Status+0x252>
	}

	if (LSM6DS3_X_Read_Reg(handle, LSM6DS3_ACC_GYRO_FUNC_SRC, &Func_Src)
 8004394:	230c      	movs	r3, #12
 8004396:	18fa      	adds	r2, r7, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2153      	movs	r1, #83	; 0x53
 800439c:	0018      	movs	r0, r3
 800439e:	f7fe fe1f 	bl	8002fe0 <LSM6DS3_X_Read_Reg>
 80043a2:	0003      	movs	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <LSM6DS3_X_Get_Event_Status+0xac>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0d2      	b.n	8004552 <LSM6DS3_X_Get_Event_Status+0x252>
	}

	if (LSM6DS3_X_Read_Reg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &Md1_Cfg)
 80043ac:	230b      	movs	r3, #11
 80043ae:	18fa      	adds	r2, r7, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	215e      	movs	r1, #94	; 0x5e
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7fe fe13 	bl	8002fe0 <LSM6DS3_X_Read_Reg>
 80043ba:	0003      	movs	r3, r0
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <LSM6DS3_X_Get_Event_Status+0xc4>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0c6      	b.n	8004552 <LSM6DS3_X_Get_Event_Status+0x252>
	}

	if (LSM6DS3_X_Read_Reg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &Md2_Cfg)
 80043c4:	230a      	movs	r3, #10
 80043c6:	18fa      	adds	r2, r7, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	215f      	movs	r1, #95	; 0x5f
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7fe fe07 	bl	8002fe0 <LSM6DS3_X_Read_Reg>
 80043d2:	0003      	movs	r3, r0
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <LSM6DS3_X_Get_Event_Status+0xdc>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0ba      	b.n	8004552 <LSM6DS3_X_Get_Event_Status+0x252>
	}

	if (LSM6DS3_X_Read_Reg(handle, LSM6DS3_ACC_GYRO_INT1_CTRL, &Int1_Ctrl)
 80043dc:	2309      	movs	r3, #9
 80043de:	18fa      	adds	r2, r7, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	210d      	movs	r1, #13
 80043e4:	0018      	movs	r0, r3
 80043e6:	f7fe fdfb 	bl	8002fe0 <LSM6DS3_X_Read_Reg>
 80043ea:	0003      	movs	r3, r0
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <LSM6DS3_X_Get_Event_Status+0xf4>
			== COMPONENT_ERROR) {
		return COMPONENT_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0ae      	b.n	8004552 <LSM6DS3_X_Get_Event_Status+0x252>
	}

	if ((Md1_Cfg & LSM6DS3_ACC_GYRO_INT1_FF_MASK)
 80043f4:	230b      	movs	r3, #11
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	001a      	movs	r2, r3
 80043fc:	2310      	movs	r3, #16
 80043fe:	4013      	ands	r3, r2
 8004400:	d106      	bne.n	8004410 <LSM6DS3_X_Get_Event_Status+0x110>
			|| (Md2_Cfg & LSM6DS3_ACC_GYRO_INT2_FF_MASK)) {
 8004402:	230a      	movs	r3, #10
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	001a      	movs	r2, r3
 800440a:	2310      	movs	r3, #16
 800440c:	4013      	ands	r3, r2
 800440e:	d00b      	beq.n	8004428 <LSM6DS3_X_Get_Event_Status+0x128>
		if ((Wake_Up_Src & LSM6DS3_ACC_GYRO_FF_EV_STATUS_MASK)) {
 8004410:	230f      	movs	r3, #15
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	001a      	movs	r2, r3
 8004418:	2320      	movs	r3, #32
 800441a:	4013      	ands	r3, r2
 800441c:	d004      	beq.n	8004428 <LSM6DS3_X_Get_Event_Status+0x128>
			status->FreeFallStatus = 1;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	2101      	movs	r1, #1
 8004424:	430a      	orrs	r2, r1
 8004426:	701a      	strb	r2, [r3, #0]
		}
	}

	if ((Md1_Cfg & LSM6DS3_ACC_GYRO_INT1_WU_MASK)
 8004428:	230b      	movs	r3, #11
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	001a      	movs	r2, r3
 8004430:	2320      	movs	r3, #32
 8004432:	4013      	ands	r3, r2
 8004434:	d106      	bne.n	8004444 <LSM6DS3_X_Get_Event_Status+0x144>
			|| (Md2_Cfg & LSM6DS3_ACC_GYRO_INT2_WU_MASK)) {
 8004436:	230a      	movs	r3, #10
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	001a      	movs	r2, r3
 800443e:	2320      	movs	r3, #32
 8004440:	4013      	ands	r3, r2
 8004442:	d00b      	beq.n	800445c <LSM6DS3_X_Get_Event_Status+0x15c>
		if ((Wake_Up_Src & LSM6DS3_ACC_GYRO_WU_EV_STATUS_MASK)) {
 8004444:	230f      	movs	r3, #15
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	001a      	movs	r2, r3
 800444c:	2308      	movs	r3, #8
 800444e:	4013      	ands	r3, r2
 8004450:	d004      	beq.n	800445c <LSM6DS3_X_Get_Event_Status+0x15c>
			status->WakeUpStatus = 1;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781a      	ldrb	r2, [r3, #0]
 8004456:	2108      	movs	r1, #8
 8004458:	430a      	orrs	r2, r1
 800445a:	701a      	strb	r2, [r3, #0]
		}
	}

	if ((Md1_Cfg & LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_MASK)
 800445c:	230b      	movs	r3, #11
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	001a      	movs	r2, r3
 8004464:	2340      	movs	r3, #64	; 0x40
 8004466:	4013      	ands	r3, r2
 8004468:	d106      	bne.n	8004478 <LSM6DS3_X_Get_Event_Status+0x178>
			|| (Md2_Cfg & LSM6DS3_ACC_GYRO_INT2_SINGLE_TAP_MASK)) {
 800446a:	230a      	movs	r3, #10
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	001a      	movs	r2, r3
 8004472:	2340      	movs	r3, #64	; 0x40
 8004474:	4013      	ands	r3, r2
 8004476:	d00b      	beq.n	8004490 <LSM6DS3_X_Get_Event_Status+0x190>
		if ((Tap_Src & LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_MASK)) {
 8004478:	230e      	movs	r3, #14
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	001a      	movs	r2, r3
 8004480:	2320      	movs	r3, #32
 8004482:	4013      	ands	r3, r2
 8004484:	d004      	beq.n	8004490 <LSM6DS3_X_Get_Event_Status+0x190>
			status->TapStatus = 1;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781a      	ldrb	r2, [r3, #0]
 800448a:	2102      	movs	r1, #2
 800448c:	430a      	orrs	r2, r1
 800448e:	701a      	strb	r2, [r3, #0]
		}
	}

	if ((Md1_Cfg & LSM6DS3_ACC_GYRO_INT1_TAP_MASK)
 8004490:	230b      	movs	r3, #11
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	001a      	movs	r2, r3
 8004498:	2308      	movs	r3, #8
 800449a:	4013      	ands	r3, r2
 800449c:	d106      	bne.n	80044ac <LSM6DS3_X_Get_Event_Status+0x1ac>
			|| (Md2_Cfg & LSM6DS3_ACC_GYRO_INT2_TAP_MASK)) {
 800449e:	230a      	movs	r3, #10
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	001a      	movs	r2, r3
 80044a6:	2308      	movs	r3, #8
 80044a8:	4013      	ands	r3, r2
 80044aa:	d00b      	beq.n	80044c4 <LSM6DS3_X_Get_Event_Status+0x1c4>
		if ((Tap_Src & LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_MASK)) {
 80044ac:	230e      	movs	r3, #14
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	001a      	movs	r2, r3
 80044b4:	2310      	movs	r3, #16
 80044b6:	4013      	ands	r3, r2
 80044b8:	d004      	beq.n	80044c4 <LSM6DS3_X_Get_Event_Status+0x1c4>
			status->DoubleTapStatus = 1;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781a      	ldrb	r2, [r3, #0]
 80044be:	2104      	movs	r1, #4
 80044c0:	430a      	orrs	r2, r1
 80044c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if ((Md1_Cfg & LSM6DS3_ACC_GYRO_INT1_6D_MASK)
 80044c4:	230b      	movs	r3, #11
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	001a      	movs	r2, r3
 80044cc:	2304      	movs	r3, #4
 80044ce:	4013      	ands	r3, r2
 80044d0:	d106      	bne.n	80044e0 <LSM6DS3_X_Get_Event_Status+0x1e0>
			|| (Md2_Cfg & LSM6DS3_ACC_GYRO_INT2_6D_MASK)) {
 80044d2:	230a      	movs	r3, #10
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	001a      	movs	r2, r3
 80044da:	2304      	movs	r3, #4
 80044dc:	4013      	ands	r3, r2
 80044de:	d00b      	beq.n	80044f8 <LSM6DS3_X_Get_Event_Status+0x1f8>
		if ((D6D_Src & LSM6DS3_ACC_GYRO_D6D_EV_STATUS_MASK)) {
 80044e0:	230d      	movs	r3, #13
 80044e2:	18fb      	adds	r3, r7, r3
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	001a      	movs	r2, r3
 80044e8:	2340      	movs	r3, #64	; 0x40
 80044ea:	4013      	ands	r3, r2
 80044ec:	d004      	beq.n	80044f8 <LSM6DS3_X_Get_Event_Status+0x1f8>
			status->D6DOrientationStatus = 1;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	2140      	movs	r1, #64	; 0x40
 80044f4:	430a      	orrs	r2, r1
 80044f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if ((Int1_Ctrl & LSM6DS3_ACC_GYRO_INT1_PEDO_MASK)) {
 80044f8:	2309      	movs	r3, #9
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b25b      	sxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	da0b      	bge.n	800451c <LSM6DS3_X_Get_Event_Status+0x21c>
		if ((Func_Src & LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_MASK)) {
 8004504:	230c      	movs	r3, #12
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	001a      	movs	r2, r3
 800450c:	2310      	movs	r3, #16
 800450e:	4013      	ands	r3, r2
 8004510:	d004      	beq.n	800451c <LSM6DS3_X_Get_Event_Status+0x21c>
			status->StepStatus = 1;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	2110      	movs	r1, #16
 8004518:	430a      	orrs	r2, r1
 800451a:	701a      	strb	r2, [r3, #0]
		}
	}

	if ((Md1_Cfg & LSM6DS3_ACC_GYRO_INT1_TILT_MASK)
 800451c:	230b      	movs	r3, #11
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	001a      	movs	r2, r3
 8004524:	2302      	movs	r3, #2
 8004526:	4013      	ands	r3, r2
 8004528:	d106      	bne.n	8004538 <LSM6DS3_X_Get_Event_Status+0x238>
			|| (Md2_Cfg & LSM6DS3_ACC_GYRO_INT2_TILT_MASK)) {
 800452a:	230a      	movs	r3, #10
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	001a      	movs	r2, r3
 8004532:	2302      	movs	r3, #2
 8004534:	4013      	ands	r3, r2
 8004536:	d00b      	beq.n	8004550 <LSM6DS3_X_Get_Event_Status+0x250>
		if ((Func_Src & LSM6DS3_ACC_GYRO_TILT_EV_STATUS_MASK)) {
 8004538:	230c      	movs	r3, #12
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	001a      	movs	r2, r3
 8004540:	2320      	movs	r3, #32
 8004542:	4013      	ands	r3, r2
 8004544:	d004      	beq.n	8004550 <LSM6DS3_X_Get_Event_Status+0x250>
			status->TiltStatus = 1;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	2120      	movs	r1, #32
 800454c:	430a      	orrs	r2, r1
 800454e:	701a      	strb	r2, [r3, #0]
		}
	}

	return COMPONENT_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	0018      	movs	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	b005      	add	sp, #20
 8004558:	bd90      	pop	{r4, r7, pc}
	...

0800455c <LSM6DS3_FIFO_Set_ODR_Value>:
 * @param odr Output data rate
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_Set_ODR_Value(DrvContextTypeDef *handle,
		float odr) {
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_ODR_FIFO_t new_odr;

	new_odr =
			(odr <= 10.0f) ? LSM6DS3_ACC_GYRO_ODR_FIFO_10Hz :
 8004566:	492e      	ldr	r1, [pc, #184]	; (8004620 <LSM6DS3_FIFO_Set_ODR_Value+0xc4>)
 8004568:	6838      	ldr	r0, [r7, #0]
 800456a:	f7fb ff65 	bl	8000438 <__aeabi_fcmple>
 800456e:	1e03      	subs	r3, r0, #0
 8004570:	d001      	beq.n	8004576 <LSM6DS3_FIFO_Set_ODR_Value+0x1a>
 8004572:	2308      	movs	r3, #8
 8004574:	e040      	b.n	80045f8 <LSM6DS3_FIFO_Set_ODR_Value+0x9c>
 8004576:	492b      	ldr	r1, [pc, #172]	; (8004624 <LSM6DS3_FIFO_Set_ODR_Value+0xc8>)
 8004578:	6838      	ldr	r0, [r7, #0]
 800457a:	f7fb ff5d 	bl	8000438 <__aeabi_fcmple>
 800457e:	1e03      	subs	r3, r0, #0
 8004580:	d001      	beq.n	8004586 <LSM6DS3_FIFO_Set_ODR_Value+0x2a>
 8004582:	2310      	movs	r3, #16
 8004584:	e038      	b.n	80045f8 <LSM6DS3_FIFO_Set_ODR_Value+0x9c>
 8004586:	4928      	ldr	r1, [pc, #160]	; (8004628 <LSM6DS3_FIFO_Set_ODR_Value+0xcc>)
 8004588:	6838      	ldr	r0, [r7, #0]
 800458a:	f7fb ff55 	bl	8000438 <__aeabi_fcmple>
 800458e:	1e03      	subs	r3, r0, #0
 8004590:	d001      	beq.n	8004596 <LSM6DS3_FIFO_Set_ODR_Value+0x3a>
 8004592:	2318      	movs	r3, #24
 8004594:	e030      	b.n	80045f8 <LSM6DS3_FIFO_Set_ODR_Value+0x9c>
 8004596:	4925      	ldr	r1, [pc, #148]	; (800462c <LSM6DS3_FIFO_Set_ODR_Value+0xd0>)
 8004598:	6838      	ldr	r0, [r7, #0]
 800459a:	f7fb ff4d 	bl	8000438 <__aeabi_fcmple>
 800459e:	1e03      	subs	r3, r0, #0
 80045a0:	d001      	beq.n	80045a6 <LSM6DS3_FIFO_Set_ODR_Value+0x4a>
 80045a2:	2320      	movs	r3, #32
 80045a4:	e028      	b.n	80045f8 <LSM6DS3_FIFO_Set_ODR_Value+0x9c>
 80045a6:	4922      	ldr	r1, [pc, #136]	; (8004630 <LSM6DS3_FIFO_Set_ODR_Value+0xd4>)
 80045a8:	6838      	ldr	r0, [r7, #0]
 80045aa:	f7fb ff45 	bl	8000438 <__aeabi_fcmple>
 80045ae:	1e03      	subs	r3, r0, #0
 80045b0:	d001      	beq.n	80045b6 <LSM6DS3_FIFO_Set_ODR_Value+0x5a>
 80045b2:	2328      	movs	r3, #40	; 0x28
 80045b4:	e020      	b.n	80045f8 <LSM6DS3_FIFO_Set_ODR_Value+0x9c>
 80045b6:	491f      	ldr	r1, [pc, #124]	; (8004634 <LSM6DS3_FIFO_Set_ODR_Value+0xd8>)
 80045b8:	6838      	ldr	r0, [r7, #0]
 80045ba:	f7fb ff3d 	bl	8000438 <__aeabi_fcmple>
 80045be:	1e03      	subs	r3, r0, #0
 80045c0:	d001      	beq.n	80045c6 <LSM6DS3_FIFO_Set_ODR_Value+0x6a>
 80045c2:	2330      	movs	r3, #48	; 0x30
 80045c4:	e018      	b.n	80045f8 <LSM6DS3_FIFO_Set_ODR_Value+0x9c>
 80045c6:	491c      	ldr	r1, [pc, #112]	; (8004638 <LSM6DS3_FIFO_Set_ODR_Value+0xdc>)
 80045c8:	6838      	ldr	r0, [r7, #0]
 80045ca:	f7fb ff35 	bl	8000438 <__aeabi_fcmple>
 80045ce:	1e03      	subs	r3, r0, #0
 80045d0:	d001      	beq.n	80045d6 <LSM6DS3_FIFO_Set_ODR_Value+0x7a>
 80045d2:	2338      	movs	r3, #56	; 0x38
 80045d4:	e010      	b.n	80045f8 <LSM6DS3_FIFO_Set_ODR_Value+0x9c>
 80045d6:	4919      	ldr	r1, [pc, #100]	; (800463c <LSM6DS3_FIFO_Set_ODR_Value+0xe0>)
 80045d8:	6838      	ldr	r0, [r7, #0]
 80045da:	f7fb ff2d 	bl	8000438 <__aeabi_fcmple>
 80045de:	1e03      	subs	r3, r0, #0
 80045e0:	d001      	beq.n	80045e6 <LSM6DS3_FIFO_Set_ODR_Value+0x8a>
 80045e2:	2340      	movs	r3, #64	; 0x40
 80045e4:	e008      	b.n	80045f8 <LSM6DS3_FIFO_Set_ODR_Value+0x9c>
 80045e6:	4916      	ldr	r1, [pc, #88]	; (8004640 <LSM6DS3_FIFO_Set_ODR_Value+0xe4>)
 80045e8:	6838      	ldr	r0, [r7, #0]
 80045ea:	f7fb ff25 	bl	8000438 <__aeabi_fcmple>
 80045ee:	1e03      	subs	r3, r0, #0
 80045f0:	d001      	beq.n	80045f6 <LSM6DS3_FIFO_Set_ODR_Value+0x9a>
 80045f2:	2348      	movs	r3, #72	; 0x48
 80045f4:	e000      	b.n	80045f8 <LSM6DS3_FIFO_Set_ODR_Value+0x9c>
 80045f6:	2350      	movs	r3, #80	; 0x50
	new_odr =
 80045f8:	210f      	movs	r1, #15
 80045fa:	187a      	adds	r2, r7, r1
 80045fc:	7013      	strb	r3, [r2, #0]
			(odr <= 1600.0f) ? LSM6DS3_ACC_GYRO_ODR_FIFO_1600Hz :
			(odr <= 3300.0f) ?
					LSM6DS3_ACC_GYRO_ODR_FIFO_3300Hz :
					LSM6DS3_ACC_GYRO_ODR_FIFO_6600Hz;

	if (LSM6DS3_ACC_GYRO_W_ODR_FIFO(handle, new_odr) == MEMS_ERROR) {
 80045fe:	187b      	adds	r3, r7, r1
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0011      	movs	r1, r2
 8004606:	0018      	movs	r0, r3
 8004608:	f7fc fd1b 	bl	8001042 <LSM6DS3_ACC_GYRO_W_ODR_FIFO>
 800460c:	1e03      	subs	r3, r0, #0
 800460e:	d101      	bne.n	8004614 <LSM6DS3_FIFO_Set_ODR_Value+0xb8>
		return COMPONENT_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <LSM6DS3_FIFO_Set_ODR_Value+0xba>
	}

	return COMPONENT_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	0018      	movs	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	b004      	add	sp, #16
 800461c:	bd80      	pop	{r7, pc}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	41200000 	.word	0x41200000
 8004624:	41c80000 	.word	0x41c80000
 8004628:	42480000 	.word	0x42480000
 800462c:	42c80000 	.word	0x42c80000
 8004630:	43480000 	.word	0x43480000
 8004634:	43c80000 	.word	0x43c80000
 8004638:	44480000 	.word	0x44480000
 800463c:	44c80000 	.word	0x44c80000
 8004640:	454e4000 	.word	0x454e4000

08004644 <LSM6DS3_FIFO_Get_Full_Status>:
 *        1 ... detection happened
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_Get_Full_Status(DrvContextTypeDef *handle,
		uint8_t *status) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_FIFO_FULL_t status_raw;

	if (LSM6DS3_ACC_GYRO_R_FIFOFull(handle, &status_raw) == MEMS_ERROR) {
 800464e:	230f      	movs	r3, #15
 8004650:	18fa      	adds	r2, r7, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	0011      	movs	r1, r2
 8004656:	0018      	movs	r0, r3
 8004658:	f7fd f900 	bl	800185c <LSM6DS3_ACC_GYRO_R_FIFOFull>
 800465c:	1e03      	subs	r3, r0, #0
 800465e:	d101      	bne.n	8004664 <LSM6DS3_FIFO_Get_Full_Status+0x20>
		return COMPONENT_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e012      	b.n	800468a <LSM6DS3_FIFO_Get_Full_Status+0x46>
	}

	switch (status_raw) {
 8004664:	230f      	movs	r3, #15
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <LSM6DS3_FIFO_Get_Full_Status+0x30>
 800466e:	2b20      	cmp	r3, #32
 8004670:	d004      	beq.n	800467c <LSM6DS3_FIFO_Get_Full_Status+0x38>
 8004672:	e007      	b.n	8004684 <LSM6DS3_FIFO_Get_Full_Status+0x40>
	case LSM6DS3_ACC_GYRO_FIFO_FULL_FIFO_NOT_FULL:
		*status = 0;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2200      	movs	r2, #0
 8004678:	701a      	strb	r2, [r3, #0]
		break;
 800467a:	e005      	b.n	8004688 <LSM6DS3_FIFO_Get_Full_Status+0x44>
	case LSM6DS3_ACC_GYRO_FIFO_FULL_FIFO_FULL:
		*status = 1;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]
		break;
 8004682:	e001      	b.n	8004688 <LSM6DS3_FIFO_Get_Full_Status+0x44>
	default:
		return COMPONENT_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <LSM6DS3_FIFO_Get_Full_Status+0x46>
	}

	return COMPONENT_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	0018      	movs	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	b004      	add	sp, #16
 8004690:	bd80      	pop	{r7, pc}

08004692 <LSM6DS3_FIFO_Get_Empty_Status>:
 *        1 ... FIFO is empty
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_Get_Empty_Status(DrvContextTypeDef *handle,
		uint8_t *status) {
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_FIFO_EMPTY_t status_raw;

	if (LSM6DS3_ACC_GYRO_R_FIFOEmpty(handle, &status_raw) == MEMS_ERROR) {
 800469c:	230f      	movs	r3, #15
 800469e:	18fa      	adds	r2, r7, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	0011      	movs	r1, r2
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7fd f8be 	bl	8001826 <LSM6DS3_ACC_GYRO_R_FIFOEmpty>
 80046aa:	1e03      	subs	r3, r0, #0
 80046ac:	d101      	bne.n	80046b2 <LSM6DS3_FIFO_Get_Empty_Status+0x20>
		return COMPONENT_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e012      	b.n	80046d8 <LSM6DS3_FIFO_Get_Empty_Status+0x46>
	}

	switch (status_raw) {
 80046b2:	230f      	movs	r3, #15
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <LSM6DS3_FIFO_Get_Empty_Status+0x30>
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d004      	beq.n	80046ca <LSM6DS3_FIFO_Get_Empty_Status+0x38>
 80046c0:	e007      	b.n	80046d2 <LSM6DS3_FIFO_Get_Empty_Status+0x40>
	case LSM6DS3_ACC_GYRO_FIFO_EMPTY_FIFO_NOT_EMPTY:
		*status = 0;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]
		break;
 80046c8:	e005      	b.n	80046d6 <LSM6DS3_FIFO_Get_Empty_Status+0x44>
	case LSM6DS3_ACC_GYRO_FIFO_EMPTY_FIFO_EMPTY:
		*status = 1;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2201      	movs	r2, #1
 80046ce:	701a      	strb	r2, [r3, #0]
		break;
 80046d0:	e001      	b.n	80046d6 <LSM6DS3_FIFO_Get_Empty_Status+0x44>
	default:
		return COMPONENT_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <LSM6DS3_FIFO_Get_Empty_Status+0x46>
	}

	return COMPONENT_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	b004      	add	sp, #16
 80046de:	bd80      	pop	{r7, pc}

080046e0 <LSM6DS3_FIFO_Get_Overrun_Status>:
 *        1 ... at least 1 sample overrun
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_Get_Overrun_Status(
		DrvContextTypeDef *handle, uint8_t *status) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]

	LSM6DS3_ACC_GYRO_OVERRUN_t status_raw;

	if (LSM6DS3_ACC_GYRO_R_OVERRUN(handle, &status_raw) == MEMS_ERROR) {
 80046ea:	230f      	movs	r3, #15
 80046ec:	18fa      	adds	r2, r7, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0011      	movs	r1, r2
 80046f2:	0018      	movs	r0, r3
 80046f4:	f7fd f8cd 	bl	8001892 <LSM6DS3_ACC_GYRO_R_OVERRUN>
 80046f8:	1e03      	subs	r3, r0, #0
 80046fa:	d101      	bne.n	8004700 <LSM6DS3_FIFO_Get_Overrun_Status+0x20>
		return COMPONENT_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e012      	b.n	8004726 <LSM6DS3_FIFO_Get_Overrun_Status+0x46>
	}

	switch (status_raw) {
 8004700:	230f      	movs	r3, #15
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <LSM6DS3_FIFO_Get_Overrun_Status+0x30>
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d004      	beq.n	8004718 <LSM6DS3_FIFO_Get_Overrun_Status+0x38>
 800470e:	e007      	b.n	8004720 <LSM6DS3_FIFO_Get_Overrun_Status+0x40>
	case LSM6DS3_ACC_GYRO_OVERRUN_NO_OVERRUN:
		*status = 0;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
		break;
 8004716:	e005      	b.n	8004724 <LSM6DS3_FIFO_Get_Overrun_Status+0x44>
	case LSM6DS3_ACC_GYRO_OVERRUN_OVERRUN:
		*status = 1;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
		break;
 800471e:	e001      	b.n	8004724 <LSM6DS3_FIFO_Get_Overrun_Status+0x44>
	default:
		return COMPONENT_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <LSM6DS3_FIFO_Get_Overrun_Status+0x46>
	}

	return COMPONENT_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	0018      	movs	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	b004      	add	sp, #16
 800472c:	bd80      	pop	{r7, pc}

0800472e <LSM6DS3_FIFO_Get_Pattern>:
 * @param *pattern Pointer where the pattern is stored
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_Get_Pattern(DrvContextTypeDef *handle,
		uint16_t *pattern) {
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]

	if (LSM6DS3_ACC_GYRO_R_FIFOPattern(handle, pattern) == MEMS_ERROR) {
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0011      	movs	r1, r2
 800473e:	0018      	movs	r0, r3
 8004740:	f7fd f8c2 	bl	80018c8 <LSM6DS3_ACC_GYRO_R_FIFOPattern>
 8004744:	1e03      	subs	r3, r0, #0
 8004746:	d101      	bne.n	800474c <LSM6DS3_FIFO_Get_Pattern+0x1e>
		return COMPONENT_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <LSM6DS3_FIFO_Get_Pattern+0x20>
	}

	return COMPONENT_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	0018      	movs	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	b002      	add	sp, #8
 8004754:	bd80      	pop	{r7, pc}

08004756 <LSM6DS3_FIFO_Get_Data>:
 * @param *aData Pointer to the array where the data are stored
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_Get_Data(DrvContextTypeDef *handle,
		uint8_t *aData) {
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]

	if (LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, aData) == MEMS_ERROR) {
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0011      	movs	r1, r2
 8004766:	0018      	movs	r0, r3
 8004768:	f7fd ff7b 	bl	8002662 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d101      	bne.n	8004774 <LSM6DS3_FIFO_Get_Data+0x1e>
		return COMPONENT_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <LSM6DS3_FIFO_Get_Data+0x20>
	}

	return COMPONENT_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b002      	add	sp, #8
 800477c:	bd80      	pop	{r7, pc}

0800477e <LSM6DS3_FIFO_Get_Num_Of_Samples>:
 * @param *nSamples Number of unread FIFO samples
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_Get_Num_Of_Samples(
		DrvContextTypeDef *handle, uint16_t *nSamples) {
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]

	if (LSM6DS3_ACC_GYRO_R_FIFONumOfEntries(handle, nSamples) == MEMS_ERROR) {
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0011      	movs	r1, r2
 800478e:	0018      	movs	r0, r3
 8004790:	f7fd f807 	bl	80017a2 <LSM6DS3_ACC_GYRO_R_FIFONumOfEntries>
 8004794:	1e03      	subs	r3, r0, #0
 8004796:	d101      	bne.n	800479c <LSM6DS3_FIFO_Get_Num_Of_Samples+0x1e>
		return COMPONENT_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <LSM6DS3_FIFO_Get_Num_Of_Samples+0x20>
	}

	return COMPONENT_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b002      	add	sp, #8
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <LSM6DS3_FIFO_X_Set_Decimation>:
 * @param decimation FIFO decimation for accelerometer
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_X_Set_Decimation(DrvContextTypeDef *handle,
		uint8_t decimation) {
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	000a      	movs	r2, r1
 80047b0:	1cfb      	adds	r3, r7, #3
 80047b2:	701a      	strb	r2, [r3, #0]

	/* Verify that the passed parameter contains one of the valid values. */
	switch ((LSM6DS3_ACC_GYRO_DEC_FIFO_XL_t) decimation) {
 80047b4:	1cfb      	adds	r3, r7, #3
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	3300      	adds	r3, #0
 80047ba:	2b07      	cmp	r3, #7
 80047bc:	d901      	bls.n	80047c2 <LSM6DS3_FIFO_X_Set_Decimation+0x1c>
	case LSM6DS3_ACC_GYRO_DEC_FIFO_XL_DECIMATION_BY_8:
	case LSM6DS3_ACC_GYRO_DEC_FIFO_XL_DECIMATION_BY_16:
	case LSM6DS3_ACC_GYRO_DEC_FIFO_XL_DECIMATION_BY_32:
		break;
	default:
		return COMPONENT_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e00c      	b.n	80047dc <LSM6DS3_FIFO_X_Set_Decimation+0x36>
		break;
 80047c2:	46c0      	nop			; (mov r8, r8)
	}

	if (LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL(handle,
 80047c4:	1cfb      	adds	r3, r7, #3
 80047c6:	781a      	ldrb	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0011      	movs	r1, r2
 80047cc:	0018      	movs	r0, r3
 80047ce:	f7fc fbd6 	bl	8000f7e <LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL>
 80047d2:	1e03      	subs	r3, r0, #0
 80047d4:	d101      	bne.n	80047da <LSM6DS3_FIFO_X_Set_Decimation+0x34>
			(LSM6DS3_ACC_GYRO_DEC_FIFO_XL_t) decimation) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <LSM6DS3_FIFO_X_Set_Decimation+0x36>
	}

	return COMPONENT_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <LSM6DS3_FIFO_X_Get_Axis>:
 * @param acceleration the pointer to the acceleration value
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_X_Get_Axis(DrvContextTypeDef *handle,
		int32_t *acceleration) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]

	uint8_t aData[2];
	int16_t rawData = 0;
 80047ee:	230e      	movs	r3, #14
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	2200      	movs	r2, #0
 80047f4:	801a      	strh	r2, [r3, #0]
	float sensitivity = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]

	/* Read single axis raw data from LSM6DS3 FIFO output registers. */
	if (LSM6DS3_FIFO_Get_Data(handle, aData) == COMPONENT_ERROR) {
 80047fa:	230c      	movs	r3, #12
 80047fc:	18fa      	adds	r2, r7, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0011      	movs	r1, r2
 8004802:	0018      	movs	r0, r3
 8004804:	f7ff ffa7 	bl	8004756 <LSM6DS3_FIFO_Get_Data>
 8004808:	0003      	movs	r3, r0
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <LSM6DS3_FIFO_X_Get_Axis+0x2e>
		return COMPONENT_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e02c      	b.n	800486c <LSM6DS3_FIFO_X_Get_Axis+0x88>
	}

	rawData = (aData[1] << 8) | aData[0];
 8004812:	220c      	movs	r2, #12
 8004814:	18bb      	adds	r3, r7, r2
 8004816:	785b      	ldrb	r3, [r3, #1]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	b219      	sxth	r1, r3
 800481c:	18bb      	adds	r3, r7, r2
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	b21a      	sxth	r2, r3
 8004822:	230e      	movs	r3, #14
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	430a      	orrs	r2, r1
 8004828:	801a      	strh	r2, [r3, #0]

	/* Get LSM6DS3 actual sensitivity. */
	if (LSM6DS3_X_Get_Sensitivity(handle, &sensitivity) == COMPONENT_ERROR) {
 800482a:	2308      	movs	r3, #8
 800482c:	18fa      	adds	r2, r7, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0011      	movs	r1, r2
 8004832:	0018      	movs	r0, r3
 8004834:	f7fe f9a2 	bl	8002b7c <LSM6DS3_X_Get_Sensitivity>
 8004838:	0003      	movs	r3, r0
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <LSM6DS3_FIFO_X_Get_Axis+0x5e>
		return COMPONENT_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e014      	b.n	800486c <LSM6DS3_FIFO_X_Get_Axis+0x88>
	}

	/* Calculate the acceleration. */
	*acceleration = (int32_t) (rawData * sensitivity);
 8004842:	230e      	movs	r3, #14
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	2200      	movs	r2, #0
 8004848:	5e9b      	ldrsh	r3, [r3, r2]
 800484a:	0018      	movs	r0, r3
 800484c:	f7fc f90c 	bl	8000a68 <__aeabi_i2f>
 8004850:	1c02      	adds	r2, r0, #0
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	1c19      	adds	r1, r3, #0
 8004856:	1c10      	adds	r0, r2, #0
 8004858:	f7fb ffb4 	bl	80007c4 <__aeabi_fmul>
 800485c:	1c03      	adds	r3, r0, #0
 800485e:	1c18      	adds	r0, r3, #0
 8004860:	f7fc f8e2 	bl	8000a28 <__aeabi_f2iz>
 8004864:	0002      	movs	r2, r0
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	601a      	str	r2, [r3, #0]

	return COMPONENT_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	b004      	add	sp, #16
 8004872:	bd80      	pop	{r7, pc}

08004874 <LSM6DS3_FIFO_Set_Mode>:
 * @param mode FIFO mode
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_Set_Mode(DrvContextTypeDef *handle,
		uint8_t mode) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	000a      	movs	r2, r1
 800487e:	1cfb      	adds	r3, r7, #3
 8004880:	701a      	strb	r2, [r3, #0]

	/* Verify that the passed parameter contains one of the valid values. */
	switch ((LSM6DS3_ACC_GYRO_FIFO_MODE_t) mode) {
 8004882:	1cfb      	adds	r3, r7, #3
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d804      	bhi.n	8004894 <LSM6DS3_FIFO_Set_Mode+0x20>
 800488a:	009a      	lsls	r2, r3, #2
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <LSM6DS3_FIFO_Set_Mode+0x48>)
 800488e:	18d3      	adds	r3, r2, r3
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	469f      	mov	pc, r3
	case LSM6DS3_ACC_GYRO_FIFO_MODE_DYN_STREAM_2: /* Continuous mode. */
	case LSM6DS3_ACC_GYRO_FIFO_MODE_BTS: /* Bypass to Continuous mode. */
	case LSM6DS3_ACC_GYRO_FIFO_MODE_STF: /* Continuous to FIFO mode. */
		break;
	default:
		return COMPONENT_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e00c      	b.n	80048b2 <LSM6DS3_FIFO_Set_Mode+0x3e>
		break;
 8004898:	46c0      	nop			; (mov r8, r8)
	}

	if (LSM6DS3_ACC_GYRO_W_FIFO_MODE(handle,
 800489a:	1cfb      	adds	r3, r7, #3
 800489c:	781a      	ldrb	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	0011      	movs	r1, r2
 80048a2:	0018      	movs	r0, r3
 80048a4:	f7fc fb9c 	bl	8000fe0 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>
 80048a8:	1e03      	subs	r3, r0, #0
 80048aa:	d101      	bne.n	80048b0 <LSM6DS3_FIFO_Set_Mode+0x3c>
			(LSM6DS3_ACC_GYRO_FIFO_MODE_t) mode) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <LSM6DS3_FIFO_Set_Mode+0x3e>
	}

	return COMPONENT_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b002      	add	sp, #8
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	0800a1ec 	.word	0x0800a1ec

080048c0 <LSM6DS3_FIFO_Set_INT1_FIFO_Full>:
 * @param status FIFO_FULL interrupt on INT1 pin enable/disable
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_Set_INT1_FIFO_Full(
		DrvContextTypeDef *handle, uint8_t status) {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	000a      	movs	r2, r1
 80048ca:	1cfb      	adds	r3, r7, #3
 80048cc:	701a      	strb	r2, [r3, #0]

	/* Verify that the passed parameter contains one of the valid values. */
	switch ((LSM6DS3_ACC_GYRO_INT1_FSS5_t) status) {
 80048ce:	1cfb      	adds	r3, r7, #3
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <LSM6DS3_FIFO_Set_INT1_FIFO_Full+0x1e>
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d001      	beq.n	80048de <LSM6DS3_FIFO_Set_INT1_FIFO_Full+0x1e>
	case LSM6DS3_ACC_GYRO_INT1_FSS5_DISABLED:
	case LSM6DS3_ACC_GYRO_INT1_FSS5_ENABLED:
		break;
	default:
		return COMPONENT_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e00c      	b.n	80048f8 <LSM6DS3_FIFO_Set_INT1_FIFO_Full+0x38>
		break;
 80048de:	46c0      	nop			; (mov r8, r8)
	}

	if (LSM6DS3_ACC_GYRO_W_FSS5_on_INT1(handle,
 80048e0:	1cfb      	adds	r3, r7, #3
 80048e2:	781a      	ldrb	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0011      	movs	r1, r2
 80048e8:	0018      	movs	r0, r3
 80048ea:	f7fc fbdb 	bl	80010a4 <LSM6DS3_ACC_GYRO_W_FSS5_on_INT1>
 80048ee:	1e03      	subs	r3, r0, #0
 80048f0:	d101      	bne.n	80048f6 <LSM6DS3_FIFO_Set_INT1_FIFO_Full+0x36>
			(LSM6DS3_ACC_GYRO_INT1_FSS5_t) status) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <LSM6DS3_FIFO_Set_INT1_FIFO_Full+0x38>
	}

	return COMPONENT_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b002      	add	sp, #8
 80048fe:	bd80      	pop	{r7, pc}

08004900 <LSM6DS3_FIFO_Set_Watermark_Level>:
 * @param watermark FIFO watermark level
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_Set_Watermark_Level(
		DrvContextTypeDef *handle, uint16_t watermark) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	000a      	movs	r2, r1
 800490a:	1cbb      	adds	r3, r7, #2
 800490c:	801a      	strh	r2, [r3, #0]

	if (LSM6DS3_ACC_GYRO_W_FIFO_Watermark(handle, watermark) == MEMS_ERROR) {
 800490e:	1cbb      	adds	r3, r7, #2
 8004910:	881a      	ldrh	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	0011      	movs	r1, r2
 8004916:	0018      	movs	r0, r3
 8004918:	f7fc fabe 	bl	8000e98 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark>
 800491c:	1e03      	subs	r3, r0, #0
 800491e:	d101      	bne.n	8004924 <LSM6DS3_FIFO_Set_Watermark_Level+0x24>
		return COMPONENT_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <LSM6DS3_FIFO_Set_Watermark_Level+0x26>
	}

	return COMPONENT_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	0018      	movs	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	b002      	add	sp, #8
 800492c:	bd80      	pop	{r7, pc}

0800492e <LSM6DS3_FIFO_Set_Stop_On_Fth>:
 * @param status FIFO stop on FTH interrupt enable/disable
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_FIFO_Set_Stop_On_Fth(DrvContextTypeDef *handle,
		uint8_t status) {
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	000a      	movs	r2, r1
 8004938:	1cfb      	adds	r3, r7, #3
 800493a:	701a      	strb	r2, [r3, #0]

	/* Verify that the passed parameter contains one of the valid values. */
	switch ((LSM6DS3_ACC_GYRO_STOP_ON_FTH_t) status) {
 800493c:	1cfb      	adds	r3, r7, #3
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	3300      	adds	r3, #0
 8004942:	2b01      	cmp	r3, #1
 8004944:	d901      	bls.n	800494a <LSM6DS3_FIFO_Set_Stop_On_Fth+0x1c>
	case LSM6DS3_ACC_GYRO_STOP_ON_FTH_DISABLED:
	case LSM6DS3_ACC_GYRO_STOP_ON_FTH_ENABLED:
		break;
	default:
		return COMPONENT_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e00c      	b.n	8004964 <LSM6DS3_FIFO_Set_Stop_On_Fth+0x36>
		break;
 800494a:	46c0      	nop			; (mov r8, r8)
	}

	if (LSM6DS3_ACC_GYRO_W_STOP_ON_FTH(handle,
 800494c:	1cfb      	adds	r3, r7, #3
 800494e:	781a      	ldrb	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	0011      	movs	r1, r2
 8004954:	0018      	movs	r0, r3
 8004956:	f7fc fc38 	bl	80011ca <LSM6DS3_ACC_GYRO_W_STOP_ON_FTH>
 800495a:	1e03      	subs	r3, r0, #0
 800495c:	d101      	bne.n	8004962 <LSM6DS3_FIFO_Set_Stop_On_Fth+0x34>
			(LSM6DS3_ACC_GYRO_STOP_ON_FTH_t) status) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <LSM6DS3_FIFO_Set_Stop_On_Fth+0x36>
	}

	return COMPONENT_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	0018      	movs	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	b002      	add	sp, #8
 800496a:	bd80      	pop	{r7, pc}

0800496c <LSM6DS3_X_Set_Interrupt_Latch>:
 * @param status interrupt latch enable/disable
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_Interrupt_Latch(DrvContextTypeDef *handle,
		uint8_t status) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	000a      	movs	r2, r1
 8004976:	1cfb      	adds	r3, r7, #3
 8004978:	701a      	strb	r2, [r3, #0]

	return LSM6DS3_Set_Interrupt_Latch(handle, status);
 800497a:	1cfb      	adds	r3, r7, #3
 800497c:	781a      	ldrb	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0011      	movs	r1, r2
 8004982:	0018      	movs	r0, r3
 8004984:	f7fe fbf4 	bl	8003170 <LSM6DS3_Set_Interrupt_Latch>
 8004988:	0003      	movs	r3, r0
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	b002      	add	sp, #8
 8004990:	bd80      	pop	{r7, pc}

08004992 <LSM6DS3_X_Set_SelfTest>:
 * @param status self-test enable/disable
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS3_X_Set_SelfTest(DrvContextTypeDef *handle,
		uint8_t status) {
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	000a      	movs	r2, r1
 800499c:	1cfb      	adds	r3, r7, #3
 800499e:	701a      	strb	r2, [r3, #0]

	/* Verify that the passed parameter contains one of the valid values. */
	switch ((LSM6DS3_ACC_GYRO_ST_XL_t) status) {
 80049a0:	1cfb      	adds	r3, r7, #3
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	3300      	adds	r3, #0
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d901      	bls.n	80049ae <LSM6DS3_X_Set_SelfTest+0x1c>
	case LSM6DS3_ACC_GYRO_ST_XL_POS_SIGN_TEST:
	case LSM6DS3_ACC_GYRO_ST_XL_NEG_SIGN_TEST:
	case LSM6DS3_ACC_GYRO_ST_XL_NA:
		break;
	default:
		return COMPONENT_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e00c      	b.n	80049c8 <LSM6DS3_X_Set_SelfTest+0x36>
		break;
 80049ae:	46c0      	nop			; (mov r8, r8)
	}

	if (LSM6DS3_ACC_GYRO_W_SelfTest_XL(handle,
 80049b0:	1cfb      	adds	r3, r7, #3
 80049b2:	781a      	ldrb	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	0011      	movs	r1, r2
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7fc fc37 	bl	800122c <LSM6DS3_ACC_GYRO_W_SelfTest_XL>
 80049be:	1e03      	subs	r3, r0, #0
 80049c0:	d101      	bne.n	80049c6 <LSM6DS3_X_Set_SelfTest+0x34>
			(LSM6DS3_ACC_GYRO_ST_XL_t) status) == MEMS_ERROR) {
		return COMPONENT_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <LSM6DS3_X_Set_SelfTest+0x36>
	}

	return COMPONENT_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b002      	add	sp, #8
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <Sensor_IO_Write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Sensor_IO_Write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer, uint16_t nBytesToWrite)
{
 80049d0:	b5b0      	push	{r4, r5, r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af04      	add	r7, sp, #16
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	0008      	movs	r0, r1
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	0019      	movs	r1, r3
 80049de:	240b      	movs	r4, #11
 80049e0:	193b      	adds	r3, r7, r4
 80049e2:	1c02      	adds	r2, r0, #0
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	2508      	movs	r5, #8
 80049e8:	197b      	adds	r3, r7, r5
 80049ea:	1c0a      	adds	r2, r1, #0
 80049ec:	801a      	strh	r2, [r3, #0]
	return 	HAL_I2C_Mem_Write(&hi2c2, LSM6DS3_ACC_GYRO_I2C_ADDRESS_HIGH, WriteAddr, I2C_MEMADD_SIZE_8BIT, pBuffer, nBytesToWrite, 100);
 80049ee:	193b      	adds	r3, r7, r4
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	4808      	ldr	r0, [pc, #32]	; (8004a18 <Sensor_IO_Write+0x48>)
 80049f6:	2364      	movs	r3, #100	; 0x64
 80049f8:	9302      	str	r3, [sp, #8]
 80049fa:	197b      	adds	r3, r7, r5
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2301      	movs	r3, #1
 8004a06:	21d6      	movs	r1, #214	; 0xd6
 8004a08:	f001 fc40 	bl	800628c <HAL_I2C_Mem_Write>
 8004a0c:	0003      	movs	r3, r0
}
 8004a0e:	0018      	movs	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b004      	add	sp, #16
 8004a14:	bdb0      	pop	{r4, r5, r7, pc}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	200003a8 	.word	0x200003a8

08004a1c <Sensor_IO_Read>:
uint8_t Sensor_IO_Read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer, uint16_t nBytesToRead)
{
 8004a1c:	b590      	push	{r4, r7, lr}
 8004a1e:	b089      	sub	sp, #36	; 0x24
 8004a20:	af04      	add	r7, sp, #16
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	0008      	movs	r0, r1
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	0019      	movs	r1, r3
 8004a2a:	240b      	movs	r4, #11
 8004a2c:	193b      	adds	r3, r7, r4
 8004a2e:	1c02      	adds	r2, r0, #0
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	2008      	movs	r0, #8
 8004a34:	183b      	adds	r3, r7, r0
 8004a36:	1c0a      	adds	r2, r1, #0
 8004a38:	801a      	strh	r2, [r3, #0]
	return HAL_I2C_Mem_Read(&hi2c2,LSM6DS3_ACC_GYRO_I2C_ADDRESS_HIGH, ReadAddr, nBytesToRead, pBuffer, nBytesToRead, 100);
 8004a3a:	193b      	adds	r3, r7, r4
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	0004      	movs	r4, r0
 8004a42:	183b      	adds	r3, r7, r0
 8004a44:	8819      	ldrh	r1, [r3, #0]
 8004a46:	4808      	ldr	r0, [pc, #32]	; (8004a68 <Sensor_IO_Read+0x4c>)
 8004a48:	2364      	movs	r3, #100	; 0x64
 8004a4a:	9302      	str	r3, [sp, #8]
 8004a4c:	193b      	adds	r3, r7, r4
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	000b      	movs	r3, r1
 8004a58:	21d6      	movs	r1, #214	; 0xd6
 8004a5a:	f001 fd45 	bl	80064e8 <HAL_I2C_Mem_Read>
 8004a5e:	0003      	movs	r3, r0
}
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b005      	add	sp, #20
 8004a66:	bd90      	pop	{r4, r7, pc}
 8004a68:	200003a8 	.word	0x200003a8

08004a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a72:	f001 f82b 	bl	8005acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a76:	f000 f84d 	bl	8004b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a7a:	f000 f939 	bl	8004cf0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8004a7e:	f000 f8a9 	bl	8004bd4 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8004a82:	f000 f8e7 	bl	8004c54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SAO_GPIO_Port, SAO_Pin, SET);//     I2C
 8004a86:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <main+0x9c>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	2140      	movs	r1, #64	; 0x40
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f001 fb05 	bl	800609c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, SET);
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	481c      	ldr	r0, [pc, #112]	; (8004b08 <main+0x9c>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	f001 fafe 	bl	800609c <HAL_GPIO_WritePin>
  LSM6DS3_X_Drv.Init(&lsm6ds3);
  LSM6DS3_X_Drv.Sensor_Enable(&lsm6ds3);*/


    /* Initialize all sensors */
  initializeAllSensors();
 8004aa0:	f000 f9d0 	bl	8004e44 <initializeAllSensors>
  /* Enable all sensors */
  enableAllSensors();
 8004aa4:	f000 f9dc 	bl	8004e60 <enableAllSensors>

  /* Enable 6D orientation */
  BSP_ACCELERO_Enable_6D_Orientation_Ext(LSM6DS3_X_0_handle, INT1_PIN);
 8004aa8:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <main+0xa0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2100      	movs	r1, #0
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 fae7 	bl	8005082 <BSP_ACCELERO_Enable_6D_Orientation_Ext>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	 if (mems_int1_detected != 0)
 8004ab4:	4b16      	ldr	r3, [pc, #88]	; (8004b10 <main+0xa4>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0fa      	beq.n	8004ab4 <main+0x48>
	  	    {
	  	      if (BSP_ACCELERO_Get_Event_Status_Ext(LSM6DS3_X_0_handle, &status) == COMPONENT_OK)
 8004abe:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <main+0xa0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	1d3a      	adds	r2, r7, #4
 8004ac4:	0011      	movs	r1, r2
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f000 fe3c 	bl	8005744 <BSP_ACCELERO_Get_Event_Status_Ext>
 8004acc:	1e03      	subs	r3, r0, #0
 8004ace:	d117      	bne.n	8004b00 <main+0x94>
	  	      {
	  	        if (status.D6DOrientationStatus != 0)
 8004ad0:	1d3b      	adds	r3, r7, #4
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2240      	movs	r2, #64	; 0x40
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d010      	beq.n	8004b00 <main+0x94>
	  	        {
	  	          sendOrientation();
 8004ade:	f000 fc49 	bl	8005374 <sendOrientation>
	  	        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004ae2:	23a0      	movs	r3, #160	; 0xa0
 8004ae4:	05db      	lsls	r3, r3, #23
 8004ae6:	2120      	movs	r1, #32
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f001 faf4 	bl	80060d6 <HAL_GPIO_TogglePin>
	  	          HAL_Delay(ORIENTATION_CHANGE_INDICATION_DELAY);
 8004aee:	2064      	movs	r0, #100	; 0x64
 8004af0:	f001 f870 	bl	8005bd4 <HAL_Delay>
	  	        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004af4:	23a0      	movs	r3, #160	; 0xa0
 8004af6:	05db      	lsls	r3, r3, #23
 8004af8:	2120      	movs	r1, #32
 8004afa:	0018      	movs	r0, r3
 8004afc:	f001 faeb 	bl	80060d6 <HAL_GPIO_TogglePin>
	  	        }
	  	      }
	  	    mems_int1_detected = 0;
 8004b00:	4b03      	ldr	r3, [pc, #12]	; (8004b10 <main+0xa4>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
	  	 if (mems_int1_detected != 0)
 8004b06:	e7d5      	b.n	8004ab4 <main+0x48>
 8004b08:	50000400 	.word	0x50000400
 8004b0c:	200002b4 	.word	0x200002b4
 8004b10:	200001b0 	.word	0x200001b0

08004b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b14:	b590      	push	{r4, r7, lr}
 8004b16:	b0a1      	sub	sp, #132	; 0x84
 8004b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b1a:	2448      	movs	r4, #72	; 0x48
 8004b1c:	193b      	adds	r3, r7, r4
 8004b1e:	0018      	movs	r0, r3
 8004b20:	2338      	movs	r3, #56	; 0x38
 8004b22:	001a      	movs	r2, r3
 8004b24:	2100      	movs	r1, #0
 8004b26:	f004 fc50 	bl	80093ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b2a:	2338      	movs	r3, #56	; 0x38
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	0018      	movs	r0, r3
 8004b30:	2310      	movs	r3, #16
 8004b32:	001a      	movs	r2, r3
 8004b34:	2100      	movs	r1, #0
 8004b36:	f004 fc48 	bl	80093ca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	2334      	movs	r3, #52	; 0x34
 8004b40:	001a      	movs	r2, r3
 8004b42:	2100      	movs	r1, #0
 8004b44:	f004 fc41 	bl	80093ca <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f002 f8d5 	bl	8006cfc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b52:	193b      	adds	r3, r7, r4
 8004b54:	2202      	movs	r2, #2
 8004b56:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b58:	193b      	adds	r3, r7, r4
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	0052      	lsls	r2, r2, #1
 8004b5e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004b60:	193b      	adds	r3, r7, r4
 8004b62:	2200      	movs	r2, #0
 8004b64:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b66:	193b      	adds	r3, r7, r4
 8004b68:	2240      	movs	r2, #64	; 0x40
 8004b6a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004b6c:	193b      	adds	r3, r7, r4
 8004b6e:	2200      	movs	r2, #0
 8004b70:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b72:	193b      	adds	r3, r7, r4
 8004b74:	0018      	movs	r0, r3
 8004b76:	f002 f90d 	bl	8006d94 <HAL_RCC_OscConfig>
 8004b7a:	1e03      	subs	r3, r0, #0
 8004b7c:	d001      	beq.n	8004b82 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8004b7e:	f000 fe41 	bl	8005804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b82:	2138      	movs	r1, #56	; 0x38
 8004b84:	187b      	adds	r3, r7, r1
 8004b86:	2207      	movs	r2, #7
 8004b88:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004b8a:	187b      	adds	r3, r7, r1
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b90:	187b      	adds	r3, r7, r1
 8004b92:	2200      	movs	r2, #0
 8004b94:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b96:	187b      	adds	r3, r7, r1
 8004b98:	2200      	movs	r2, #0
 8004b9a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004b9c:	187b      	adds	r3, r7, r1
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f002 fc17 	bl	80073d4 <HAL_RCC_ClockConfig>
 8004ba6:	1e03      	subs	r3, r0, #0
 8004ba8:	d001      	beq.n	8004bae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004baa:	f000 fe2b 	bl	8005804 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f002 fdb3 	bl	8007728 <HAL_RCCEx_PeriphCLKConfig>
 8004bc2:	1e03      	subs	r3, r0, #0
 8004bc4:	d001      	beq.n	8004bca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8004bc6:	f000 fe1d 	bl	8005804 <Error_Handler>
  }
}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	b021      	add	sp, #132	; 0x84
 8004bd0:	bd90      	pop	{r4, r7, pc}
	...

08004bd4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004bd8:	4b1b      	ldr	r3, [pc, #108]	; (8004c48 <MX_I2C2_Init+0x74>)
 8004bda:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <MX_I2C2_Init+0x78>)
 8004bdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8004bde:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <MX_I2C2_Init+0x74>)
 8004be0:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <MX_I2C2_Init+0x7c>)
 8004be2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004be4:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <MX_I2C2_Init+0x74>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bea:	4b17      	ldr	r3, [pc, #92]	; (8004c48 <MX_I2C2_Init+0x74>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004bf0:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <MX_I2C2_Init+0x74>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <MX_I2C2_Init+0x74>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004bfc:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <MX_I2C2_Init+0x74>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c02:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <MX_I2C2_Init+0x74>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c08:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <MX_I2C2_Init+0x74>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <MX_I2C2_Init+0x74>)
 8004c10:	0018      	movs	r0, r3
 8004c12:	f001 faa5 	bl	8006160 <HAL_I2C_Init>
 8004c16:	1e03      	subs	r3, r0, #0
 8004c18:	d001      	beq.n	8004c1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004c1a:	f000 fdf3 	bl	8005804 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <MX_I2C2_Init+0x74>)
 8004c20:	2100      	movs	r1, #0
 8004c22:	0018      	movs	r0, r3
 8004c24:	f001 ffd2 	bl	8006bcc <HAL_I2CEx_ConfigAnalogFilter>
 8004c28:	1e03      	subs	r3, r0, #0
 8004c2a:	d001      	beq.n	8004c30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004c2c:	f000 fdea 	bl	8005804 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <MX_I2C2_Init+0x74>)
 8004c32:	2100      	movs	r1, #0
 8004c34:	0018      	movs	r0, r3
 8004c36:	f002 f815 	bl	8006c64 <HAL_I2CEx_ConfigDigitalFilter>
 8004c3a:	1e03      	subs	r3, r0, #0
 8004c3c:	d001      	beq.n	8004c42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004c3e:	f000 fde1 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	200003a8 	.word	0x200003a8
 8004c4c:	40005800 	.word	0x40005800
 8004c50:	00303d5b 	.word	0x00303d5b

08004c54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c58:	4b23      	ldr	r3, [pc, #140]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004c5a:	4a24      	ldr	r2, [pc, #144]	; (8004cec <MX_USART2_UART_Init+0x98>)
 8004c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004c5e:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004c60:	22e1      	movs	r2, #225	; 0xe1
 8004c62:	0252      	lsls	r2, r2, #9
 8004c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c66:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c72:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c78:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004c7a:	220c      	movs	r2, #12
 8004c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c84:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c8a:	4b17      	ldr	r3, [pc, #92]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c90:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c96:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c9c:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f002 fefa 	bl	8007a98 <HAL_UART_Init>
 8004ca4:	1e03      	subs	r3, r0, #0
 8004ca6:	d001      	beq.n	8004cac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004ca8:	f000 fdac 	bl	8005804 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004cac:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004cae:	2100      	movs	r1, #0
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f004 fa6b 	bl	800918c <HAL_UARTEx_SetTxFifoThreshold>
 8004cb6:	1e03      	subs	r3, r0, #0
 8004cb8:	d001      	beq.n	8004cbe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004cba:	f000 fda3 	bl	8005804 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f004 faa2 	bl	800920c <HAL_UARTEx_SetRxFifoThreshold>
 8004cc8:	1e03      	subs	r3, r0, #0
 8004cca:	d001      	beq.n	8004cd0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004ccc:	f000 fd9a 	bl	8005804 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <MX_USART2_UART_Init+0x94>)
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f004 fa20 	bl	8009118 <HAL_UARTEx_DisableFifoMode>
 8004cd8:	1e03      	subs	r3, r0, #0
 8004cda:	d001      	beq.n	8004ce0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004cdc:	f000 fd92 	bl	8005804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004ce0:	46c0      	nop			; (mov r8, r8)
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	200003f4 	.word	0x200003f4
 8004cec:	40004400 	.word	0x40004400

08004cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004cf0:	b590      	push	{r4, r7, lr}
 8004cf2:	b08b      	sub	sp, #44	; 0x2c
 8004cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf6:	2414      	movs	r4, #20
 8004cf8:	193b      	adds	r3, r7, r4
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	2314      	movs	r3, #20
 8004cfe:	001a      	movs	r2, r3
 8004d00:	2100      	movs	r1, #0
 8004d02:	f004 fb62 	bl	80093ca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d06:	4b48      	ldr	r3, [pc, #288]	; (8004e28 <MX_GPIO_Init+0x138>)
 8004d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d0a:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <MX_GPIO_Init+0x138>)
 8004d0c:	2104      	movs	r1, #4
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	635a      	str	r2, [r3, #52]	; 0x34
 8004d12:	4b45      	ldr	r3, [pc, #276]	; (8004e28 <MX_GPIO_Init+0x138>)
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d16:	2204      	movs	r2, #4
 8004d18:	4013      	ands	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d1e:	4b42      	ldr	r3, [pc, #264]	; (8004e28 <MX_GPIO_Init+0x138>)
 8004d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d22:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <MX_GPIO_Init+0x138>)
 8004d24:	2101      	movs	r1, #1
 8004d26:	430a      	orrs	r2, r1
 8004d28:	635a      	str	r2, [r3, #52]	; 0x34
 8004d2a:	4b3f      	ldr	r3, [pc, #252]	; (8004e28 <MX_GPIO_Init+0x138>)
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2e:	2201      	movs	r2, #1
 8004d30:	4013      	ands	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d36:	4b3c      	ldr	r3, [pc, #240]	; (8004e28 <MX_GPIO_Init+0x138>)
 8004d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d3a:	4b3b      	ldr	r3, [pc, #236]	; (8004e28 <MX_GPIO_Init+0x138>)
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	635a      	str	r2, [r3, #52]	; 0x34
 8004d42:	4b39      	ldr	r3, [pc, #228]	; (8004e28 <MX_GPIO_Init+0x138>)
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	2202      	movs	r2, #2
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d4e:	4b36      	ldr	r3, [pc, #216]	; (8004e28 <MX_GPIO_Init+0x138>)
 8004d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d52:	4b35      	ldr	r3, [pc, #212]	; (8004e28 <MX_GPIO_Init+0x138>)
 8004d54:	2108      	movs	r1, #8
 8004d56:	430a      	orrs	r2, r1
 8004d58:	635a      	str	r2, [r3, #52]	; 0x34
 8004d5a:	4b33      	ldr	r3, [pc, #204]	; (8004e28 <MX_GPIO_Init+0x138>)
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	2208      	movs	r2, #8
 8004d60:	4013      	ands	r3, r2
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004d66:	23a0      	movs	r3, #160	; 0xa0
 8004d68:	05db      	lsls	r3, r3, #23
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2120      	movs	r1, #32
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f001 f994 	bl	800609c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|SAO_Pin, GPIO_PIN_RESET);
 8004d74:	492d      	ldr	r1, [pc, #180]	; (8004e2c <MX_GPIO_Init+0x13c>)
 8004d76:	4b2e      	ldr	r3, [pc, #184]	; (8004e30 <MX_GPIO_Init+0x140>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f001 f98e 	bl	800609c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8004d80:	193b      	adds	r3, r7, r4
 8004d82:	2280      	movs	r2, #128	; 0x80
 8004d84:	0192      	lsls	r2, r2, #6
 8004d86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d88:	193b      	adds	r3, r7, r4
 8004d8a:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <MX_GPIO_Init+0x144>)
 8004d8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d8e:	193b      	adds	r3, r7, r4
 8004d90:	2201      	movs	r2, #1
 8004d92:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8004d94:	193b      	adds	r3, r7, r4
 8004d96:	4a28      	ldr	r2, [pc, #160]	; (8004e38 <MX_GPIO_Init+0x148>)
 8004d98:	0019      	movs	r1, r3
 8004d9a:	0010      	movs	r0, r2
 8004d9c:	f001 f81a 	bl	8005dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004da0:	193b      	adds	r3, r7, r4
 8004da2:	2220      	movs	r2, #32
 8004da4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004da6:	193b      	adds	r3, r7, r4
 8004da8:	2201      	movs	r2, #1
 8004daa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dac:	193b      	adds	r3, r7, r4
 8004dae:	2200      	movs	r2, #0
 8004db0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db2:	193b      	adds	r3, r7, r4
 8004db4:	2200      	movs	r2, #0
 8004db6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004db8:	193a      	adds	r2, r7, r4
 8004dba:	23a0      	movs	r3, #160	; 0xa0
 8004dbc:	05db      	lsls	r3, r3, #23
 8004dbe:	0011      	movs	r1, r2
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f001 f807 	bl	8005dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin SAO_Pin */
  GPIO_InitStruct.Pin = CS_Pin|SAO_Pin;
 8004dc6:	0021      	movs	r1, r4
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <MX_GPIO_Init+0x13c>)
 8004dcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dce:	187b      	adds	r3, r7, r1
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd4:	187b      	adds	r3, r7, r1
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dda:	187b      	adds	r3, r7, r1
 8004ddc:	2200      	movs	r2, #0
 8004dde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de0:	000c      	movs	r4, r1
 8004de2:	187b      	adds	r3, r7, r1
 8004de4:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <MX_GPIO_Init+0x140>)
 8004de6:	0019      	movs	r1, r3
 8004de8:	0010      	movs	r0, r2
 8004dea:	f000 fff3 	bl	8005dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8004dee:	0021      	movs	r1, r4
 8004df0:	187b      	adds	r3, r7, r1
 8004df2:	22c0      	movs	r2, #192	; 0xc0
 8004df4:	0092      	lsls	r2, r2, #2
 8004df6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004df8:	187b      	adds	r3, r7, r1
 8004dfa:	4a10      	ldr	r2, [pc, #64]	; (8004e3c <MX_GPIO_Init+0x14c>)
 8004dfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfe:	187b      	adds	r3, r7, r1
 8004e00:	2200      	movs	r2, #0
 8004e02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	4a0e      	ldr	r2, [pc, #56]	; (8004e40 <MX_GPIO_Init+0x150>)
 8004e08:	0019      	movs	r1, r3
 8004e0a:	0010      	movs	r0, r2
 8004e0c:	f000 ffe2 	bl	8005dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004e10:	2200      	movs	r2, #0
 8004e12:	2100      	movs	r1, #0
 8004e14:	2007      	movs	r0, #7
 8004e16:	f000 ffab 	bl	8005d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004e1a:	2007      	movs	r0, #7
 8004e1c:	f000 ffbd 	bl	8005d9a <HAL_NVIC_EnableIRQ>

}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b00b      	add	sp, #44	; 0x2c
 8004e26:	bd90      	pop	{r4, r7, pc}
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	00008040 	.word	0x00008040
 8004e30:	50000400 	.word	0x50000400
 8004e34:	10110000 	.word	0x10110000
 8004e38:	50000800 	.word	0x50000800
 8004e3c:	10210000 	.word	0x10210000
 8004e40:	50000c00 	.word	0x50000c00

08004e44 <initializeAllSensors>:

/* USER CODE BEGIN 4 */
static DrvStatusTypeDef initializeAllSensors(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
	return BSP_ACCELERO_Init(LSM6DS3_X_0, &LSM6DS3_X_0_handle);
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <initializeAllSensors+0x18>)
 8004e4a:	0019      	movs	r1, r3
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f000 f815 	bl	8004e7c <BSP_ACCELERO_Init>
 8004e52:	0003      	movs	r3, r0
}
 8004e54:	0018      	movs	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	200002b4 	.word	0x200002b4

08004e60 <enableAllSensors>:
static DrvStatusTypeDef enableAllSensors(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  return BSP_ACCELERO_Sensor_Enable(LSM6DS3_X_0_handle);
 8004e64:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <enableAllSensors+0x18>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f000 f8e5 	bl	8005038 <BSP_ACCELERO_Sensor_Enable>
 8004e6e:	0003      	movs	r3, r0
}
 8004e70:	0018      	movs	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	200002b4 	.word	0x200002b4

08004e7c <BSP_ACCELERO_Init>:
DrvStatusTypeDef BSP_ACCELERO_Init(ACCELERO_ID_t id, void **handle)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	0002      	movs	r2, r0
 8004e84:	6039      	str	r1, [r7, #0]
 8004e86:	1dfb      	adds	r3, r7, #7
 8004e88:	701a      	strb	r2, [r3, #0]

  *handle = NULL;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
  {
    default:


    case LSM6DS3_X_0:
      return BSP_LSM6DS3_ACCELERO_Init(handle);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	0018      	movs	r0, r3
 8004e94:	f000 f806 	bl	8004ea4 <BSP_LSM6DS3_ACCELERO_Init>
 8004e98:	0003      	movs	r3, r0


  }

  return COMPONENT_ERROR;
}
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b002      	add	sp, #8
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <BSP_LSM6DS3_ACCELERO_Init>:
static DrvStatusTypeDef BSP_LSM6DS3_ACCELERO_Init(void **handle)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  ACCELERO_Drv_t *driver = NULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
  {
    return COMPONENT_ERROR;
  }
*/
  /* Setup sensor handle. */
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].who_am_i      = LSM6DS3_ACC_GYRO_WHO_AM_I;
 8004eb0:	4b2b      	ldr	r3, [pc, #172]	; (8004f60 <BSP_LSM6DS3_ACCELERO_Init+0xbc>)
 8004eb2:	2269      	movs	r2, #105	; 0x69
 8004eb4:	751a      	strb	r2, [r3, #20]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].ifType        = 0; /* I2C interface */
 8004eb6:	4b2a      	ldr	r3, [pc, #168]	; (8004f60 <BSP_LSM6DS3_ACCELERO_Init+0xbc>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	755a      	strb	r2, [r3, #21]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].address       = LSM6DS3_ACC_GYRO_I2C_ADDRESS_LOW;
 8004ebc:	4b28      	ldr	r3, [pc, #160]	; (8004f60 <BSP_LSM6DS3_ACCELERO_Init+0xbc>)
 8004ebe:	22d4      	movs	r2, #212	; 0xd4
 8004ec0:	759a      	strb	r2, [r3, #22]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].instance      = LSM6DS3_X_0;
 8004ec2:	4b27      	ldr	r3, [pc, #156]	; (8004f60 <BSP_LSM6DS3_ACCELERO_Init+0xbc>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	761a      	strb	r2, [r3, #24]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].isInitialized = 0;
 8004ec8:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <BSP_LSM6DS3_ACCELERO_Init+0xbc>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	765a      	strb	r2, [r3, #25]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].isEnabled     = 0;
 8004ece:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <BSP_LSM6DS3_ACCELERO_Init+0xbc>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	769a      	strb	r2, [r3, #26]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].isCombo       = 1;
 8004ed4:	4b22      	ldr	r3, [pc, #136]	; (8004f60 <BSP_LSM6DS3_ACCELERO_Init+0xbc>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	76da      	strb	r2, [r3, #27]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pData         = (void *)&ACCELERO_Data[ LSM6DS3_X_0 ];
 8004eda:	4b21      	ldr	r3, [pc, #132]	; (8004f60 <BSP_LSM6DS3_ACCELERO_Init+0xbc>)
 8004edc:	4a21      	ldr	r2, [pc, #132]	; (8004f64 <BSP_LSM6DS3_ACCELERO_Init+0xc0>)
 8004ede:	61da      	str	r2, [r3, #28]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pVTable       = (void *)&LSM6DS3_X_Drv;
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <BSP_LSM6DS3_ACCELERO_Init+0xbc>)
 8004ee2:	4a21      	ldr	r2, [pc, #132]	; (8004f68 <BSP_LSM6DS3_ACCELERO_Init+0xc4>)
 8004ee4:	621a      	str	r2, [r3, #32]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pExtVTable    = (void *)&LSM6DS3_X_ExtDrv;
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	; (8004f60 <BSP_LSM6DS3_ACCELERO_Init+0xbc>)
 8004ee8:	4a20      	ldr	r2, [pc, #128]	; (8004f6c <BSP_LSM6DS3_ACCELERO_Init+0xc8>)
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24

  ACCELERO_Data[ LSM6DS3_X_0 ].pComponentData = (void *)&LSM6DS3_X_0_Data;
 8004eec:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <BSP_LSM6DS3_ACCELERO_Init+0xcc>)
 8004eee:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <BSP_LSM6DS3_ACCELERO_Init+0xd0>)
 8004ef0:	609a      	str	r2, [r3, #8]
  ACCELERO_Data[ LSM6DS3_X_0 ].pExtData       = 0;
 8004ef2:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <BSP_LSM6DS3_ACCELERO_Init+0xcc>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	60da      	str	r2, [r3, #12]

  *handle = (void *)&ACCELERO_SensorHandle[ LSM6DS3_X_0 ];
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a1f      	ldr	r2, [pc, #124]	; (8004f78 <BSP_LSM6DS3_ACCELERO_Init+0xd4>)
 8004efc:	601a      	str	r2, [r3, #0]

  driver = (ACCELERO_Drv_t *)((DrvContextTypeDef *)(*handle))->pVTable;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	60fb      	str	r3, [r7, #12]

  if (driver->Init == NULL)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <BSP_LSM6DS3_ACCELERO_Init+0x82>
  {
    memset((*handle), 0, sizeof(DrvContextTypeDef));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2214      	movs	r2, #20
 8004f14:	2100      	movs	r1, #0
 8004f16:	0018      	movs	r0, r3
 8004f18:	f004 fa57 	bl	80093ca <memset>
    *handle = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
    return COMPONENT_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e017      	b.n	8004f56 <BSP_LSM6DS3_ACCELERO_Init+0xb2>
  }

  if (driver->Init((DrvContextTypeDef *)(*handle)) == COMPONENT_ERROR)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	0018      	movs	r0, r3
 8004f30:	4790      	blx	r2
 8004f32:	0003      	movs	r3, r0
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d10b      	bne.n	8004f50 <BSP_LSM6DS3_ACCELERO_Init+0xac>
  {
    memset((*handle), 0, sizeof(DrvContextTypeDef));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2214      	movs	r2, #20
 8004f3e:	2100      	movs	r1, #0
 8004f40:	0018      	movs	r0, r3
 8004f42:	f004 fa42 	bl	80093ca <memset>
    *handle = NULL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
    return COMPONENT_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e002      	b.n	8004f56 <BSP_LSM6DS3_ACCELERO_Init+0xb2>
  }

  /* Configure interrupt lines common for all sensors in DIL24 socket */
  DIL24_Sensor_IO_ITConfig();
 8004f50:	f000 f814 	bl	8004f7c <DIL24_Sensor_IO_ITConfig>

  return COMPONENT_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	0018      	movs	r0, r3
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b004      	add	sp, #16
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	200002b8 	.word	0x200002b8
 8004f64:	20000360 	.word	0x20000360
 8004f68:	200000d4 	.word	0x200000d4
 8004f6c:	20000000 	.word	0x20000000
 8004f70:	20000358 	.word	0x20000358
 8004f74:	20000398 	.word	0x20000398
 8004f78:	200002cc 	.word	0x200002cc

08004f7c <DIL24_Sensor_IO_ITConfig>:
DrvStatusTypeDef DIL24_Sensor_IO_ITConfig(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08c      	sub	sp, #48	; 0x30
 8004f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructureInt1;
  GPIO_InitTypeDef GPIO_InitStructureInt2;

  /* Enable INT1 GPIO clock */
  M_INT1_GPIO_CLK_ENABLE();
 8004f82:	4b2a      	ldr	r3, [pc, #168]	; (800502c <DIL24_Sensor_IO_ITConfig+0xb0>)
 8004f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f86:	4b29      	ldr	r3, [pc, #164]	; (800502c <DIL24_Sensor_IO_ITConfig+0xb0>)
 8004f88:	2108      	movs	r1, #8
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f8e:	4b27      	ldr	r3, [pc, #156]	; (800502c <DIL24_Sensor_IO_ITConfig+0xb0>)
 8004f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f92:	2208      	movs	r2, #8
 8004f94:	4013      	ands	r3, r2
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructureInt1.Pin = M_INT1_PIN;
 8004f9a:	211c      	movs	r1, #28
 8004f9c:	187b      	adds	r3, r7, r1
 8004f9e:	2280      	movs	r2, #128	; 0x80
 8004fa0:	0052      	lsls	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
  GPIO_InitStructureInt1.Mode = GPIO_MODE_IT_RISING;
 8004fa4:	187b      	adds	r3, r7, r1
 8004fa6:	4a22      	ldr	r2, [pc, #136]	; (8005030 <DIL24_Sensor_IO_ITConfig+0xb4>)
 8004fa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStructureInt1.Speed = GPIO_SPEED_FREQ_HIGH;
 8004faa:	187b      	adds	r3, r7, r1
 8004fac:	2202      	movs	r2, #2
 8004fae:	60da      	str	r2, [r3, #12]
  GPIO_InitStructureInt1.Pull  = GPIO_NOPULL;
 8004fb0:	187b      	adds	r3, r7, r1
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(M_INT1_GPIO_PORT, &GPIO_InitStructureInt1);
 8004fb6:	187b      	adds	r3, r7, r1
 8004fb8:	4a1e      	ldr	r2, [pc, #120]	; (8005034 <DIL24_Sensor_IO_ITConfig+0xb8>)
 8004fba:	0019      	movs	r1, r3
 8004fbc:	0010      	movs	r0, r2
 8004fbe:	f000 ff09 	bl	8005dd4 <HAL_GPIO_Init>

  /* Enable and set EXTI Interrupt priority */
  HAL_NVIC_SetPriority(M_INT1_EXTI_IRQn, 0x00, 0x00);
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	2007      	movs	r0, #7
 8004fc8:	f000 fed2 	bl	8005d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(M_INT1_EXTI_IRQn);
 8004fcc:	2007      	movs	r0, #7
 8004fce:	f000 fee4 	bl	8005d9a <HAL_NVIC_EnableIRQ>

  /* Enable INT2 GPIO clock */
  M_INT2_GPIO_CLK_ENABLE();
 8004fd2:	4b16      	ldr	r3, [pc, #88]	; (800502c <DIL24_Sensor_IO_ITConfig+0xb0>)
 8004fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd6:	4b15      	ldr	r3, [pc, #84]	; (800502c <DIL24_Sensor_IO_ITConfig+0xb0>)
 8004fd8:	2108      	movs	r1, #8
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	635a      	str	r2, [r3, #52]	; 0x34
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <DIL24_Sensor_IO_ITConfig+0xb0>)
 8004fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe2:	2208      	movs	r2, #8
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]

  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructureInt2.Pin = M_INT2_PIN;
 8004fea:	2108      	movs	r1, #8
 8004fec:	187b      	adds	r3, r7, r1
 8004fee:	2280      	movs	r2, #128	; 0x80
 8004ff0:	0092      	lsls	r2, r2, #2
 8004ff2:	601a      	str	r2, [r3, #0]
  GPIO_InitStructureInt2.Mode = GPIO_MODE_IT_RISING;
 8004ff4:	187b      	adds	r3, r7, r1
 8004ff6:	4a0e      	ldr	r2, [pc, #56]	; (8005030 <DIL24_Sensor_IO_ITConfig+0xb4>)
 8004ff8:	605a      	str	r2, [r3, #4]
  GPIO_InitStructureInt2.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ffa:	187b      	adds	r3, r7, r1
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	60da      	str	r2, [r3, #12]
  GPIO_InitStructureInt2.Pull  = GPIO_NOPULL;
 8005000:	187b      	adds	r3, r7, r1
 8005002:	2200      	movs	r2, #0
 8005004:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(M_INT2_GPIO_PORT, &GPIO_InitStructureInt2);
 8005006:	187b      	adds	r3, r7, r1
 8005008:	4a0a      	ldr	r2, [pc, #40]	; (8005034 <DIL24_Sensor_IO_ITConfig+0xb8>)
 800500a:	0019      	movs	r1, r3
 800500c:	0010      	movs	r0, r2
 800500e:	f000 fee1 	bl	8005dd4 <HAL_GPIO_Init>

  /* Enable and set EXTI Interrupt priority */
  HAL_NVIC_SetPriority(M_INT2_EXTI_IRQn, 0x00, 0x00);
 8005012:	2200      	movs	r2, #0
 8005014:	2100      	movs	r1, #0
 8005016:	2007      	movs	r0, #7
 8005018:	f000 feaa 	bl	8005d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(M_INT2_EXTI_IRQn);
 800501c:	2007      	movs	r0, #7
 800501e:	f000 febc 	bl	8005d9a <HAL_NVIC_EnableIRQ>

  return COMPONENT_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b00c      	add	sp, #48	; 0x30
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40021000 	.word	0x40021000
 8005030:	10110000 	.word	0x10110000
 8005034:	50000c00 	.word	0x50000c00

08005038 <BSP_ACCELERO_Sensor_Enable>:
DrvStatusTypeDef BSP_ACCELERO_Sensor_Enable(void *handle)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	60fb      	str	r3, [r7, #12]
  ACCELERO_Drv_t *driver = NULL;
 8005044:	2300      	movs	r3, #0
 8005046:	60bb      	str	r3, [r7, #8]

  if (ctx == NULL)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <BSP_ACCELERO_Sensor_Enable+0x1a>
  {
    return COMPONENT_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e013      	b.n	800507a <BSP_ACCELERO_Sensor_Enable+0x42>
  }

  driver = (ACCELERO_Drv_t *)ctx->pVTable;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	60bb      	str	r3, [r7, #8]

  if (driver->Sensor_Enable == NULL)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <BSP_ACCELERO_Sensor_Enable+0x2c>
  {
    return COMPONENT_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e00a      	b.n	800507a <BSP_ACCELERO_Sensor_Enable+0x42>
  }

  if (driver->Sensor_Enable(ctx) == COMPONENT_ERROR)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	0010      	movs	r0, r2
 800506c:	4798      	blx	r3
 800506e:	0003      	movs	r3, r0
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <BSP_ACCELERO_Sensor_Enable+0x40>
  {
    return COMPONENT_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <BSP_ACCELERO_Sensor_Enable+0x42>
  }

  return COMPONENT_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	0018      	movs	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	b004      	add	sp, #16
 8005080:	bd80      	pop	{r7, pc}

08005082 <BSP_ACCELERO_Enable_6D_Orientation_Ext>:
DrvStatusTypeDef BSP_ACCELERO_Enable_6D_Orientation_Ext(void *handle, SensorIntPin_t int_pin)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	000a      	movs	r2, r1
 800508c:	1cfb      	adds	r3, r7, #3
 800508e:	701a      	strb	r2, [r3, #0]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	60fb      	str	r3, [r7, #12]

  if (ctx == NULL)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <BSP_ACCELERO_Enable_6D_Orientation_Ext+0x1c>
  {
    return COMPONENT_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e01c      	b.n	80050d8 <BSP_ACCELERO_Enable_6D_Orientation_Ext+0x56>
  }

  if (ctx->pExtVTable == NULL)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <BSP_ACCELERO_Enable_6D_Orientation_Ext+0x28>
  {
    return COMPONENT_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e016      	b.n	80050d8 <BSP_ACCELERO_Enable_6D_Orientation_Ext+0x56>
  }

  /* At the moment this feature is only implemented for LSM6DS3 */
  if (ctx->who_am_i == LSM6DS3_ACC_GYRO_WHO_AM_I)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b69      	cmp	r3, #105	; 0x69
 80050b0:	d111      	bne.n	80050d6 <BSP_ACCELERO_Enable_6D_Orientation_Ext+0x54>
  {
    LSM6DS3_X_ExtDrv_t *extDriver = (LSM6DS3_X_ExtDrv_t *)ctx->pExtVTable;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	60bb      	str	r3, [r7, #8]

    if (extDriver->Enable_6D_Orientation == NULL)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <BSP_ACCELERO_Enable_6D_Orientation_Ext+0x42>
    {
      return COMPONENT_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e009      	b.n	80050d8 <BSP_ACCELERO_Enable_6D_Orientation_Ext+0x56>
    }

    else
    {
      return extDriver->Enable_6D_Orientation(ctx, int_pin);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	1cfa      	adds	r2, r7, #3
 80050ca:	7811      	ldrb	r1, [r2, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	0010      	movs	r0, r2
 80050d0:	4798      	blx	r3
 80050d2:	0003      	movs	r3, r0
 80050d4:	e000      	b.n	80050d8 <BSP_ACCELERO_Enable_6D_Orientation_Ext+0x56>
    }
  }

  else
  {
    return COMPONENT_ERROR;
 80050d6:	2301      	movs	r3, #1
  }
}
 80050d8:	0018      	movs	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	b004      	add	sp, #16
 80050de:	bd80      	pop	{r7, pc}

080050e0 <BSP_ACCELERO_Get_Instance>:
DrvStatusTypeDef BSP_ACCELERO_Get_Instance(void *handle, uint8_t *instance)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60fb      	str	r3, [r7, #12]

  if (ctx == NULL)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <BSP_ACCELERO_Get_Instance+0x18>
  {
    return COMPONENT_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e009      	b.n	800510c <BSP_ACCELERO_Get_Instance+0x2c>
  }

  if (instance == NULL)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <BSP_ACCELERO_Get_Instance+0x22>
  {
    return COMPONENT_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e004      	b.n	800510c <BSP_ACCELERO_Get_Instance+0x2c>
  }

  *instance = ctx->instance;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	791a      	ldrb	r2, [r3, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	701a      	strb	r2, [r3, #0]

  return COMPONENT_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	0018      	movs	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	b004      	add	sp, #16
 8005112:	bd80      	pop	{r7, pc}

08005114 <BSP_ACCELERO_Get_6D_Orientation_XL_Ext>:
DrvStatusTypeDef BSP_ACCELERO_Get_6D_Orientation_XL_Ext(void *handle, uint8_t *xl)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60fb      	str	r3, [r7, #12]

  if (ctx == NULL)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <BSP_ACCELERO_Get_6D_Orientation_XL_Ext+0x18>
  {
    return COMPONENT_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e020      	b.n	800516e <BSP_ACCELERO_Get_6D_Orientation_XL_Ext+0x5a>
  }

  if (ctx->pExtVTable == NULL)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <BSP_ACCELERO_Get_6D_Orientation_XL_Ext+0x24>
  {
    return COMPONENT_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e01a      	b.n	800516e <BSP_ACCELERO_Get_6D_Orientation_XL_Ext+0x5a>
  }

  if (xl == NULL)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <BSP_ACCELERO_Get_6D_Orientation_XL_Ext+0x2e>
  {
    return COMPONENT_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e015      	b.n	800516e <BSP_ACCELERO_Get_6D_Orientation_XL_Ext+0x5a>
  }

  /* At the moment this feature is only implemented for LSM6DS3 */
  if (ctx->who_am_i == LSM6DS3_ACC_GYRO_WHO_AM_I)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b69      	cmp	r3, #105	; 0x69
 8005148:	d110      	bne.n	800516c <BSP_ACCELERO_Get_6D_Orientation_XL_Ext+0x58>
  {
    LSM6DS3_X_ExtDrv_t *extDriver = (LSM6DS3_X_ExtDrv_t *)ctx->pExtVTable;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	60bb      	str	r3, [r7, #8]

    if (extDriver->Get_6D_Orientation_XL == NULL)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <BSP_ACCELERO_Get_6D_Orientation_XL_Ext+0x48>
    {
      return COMPONENT_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e008      	b.n	800516e <BSP_ACCELERO_Get_6D_Orientation_XL_Ext+0x5a>
    }

    else
    {
      return extDriver->Get_6D_Orientation_XL(ctx, xl);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	0010      	movs	r0, r2
 8005166:	4798      	blx	r3
 8005168:	0003      	movs	r3, r0
 800516a:	e000      	b.n	800516e <BSP_ACCELERO_Get_6D_Orientation_XL_Ext+0x5a>
    }
  }

  else
  {
    return COMPONENT_ERROR;
 800516c:	2301      	movs	r3, #1
  }
}
 800516e:	0018      	movs	r0, r3
 8005170:	46bd      	mov	sp, r7
 8005172:	b004      	add	sp, #16
 8005174:	bd80      	pop	{r7, pc}

08005176 <BSP_ACCELERO_Get_6D_Orientation_XH_Ext>:
DrvStatusTypeDef BSP_ACCELERO_Get_6D_Orientation_XH_Ext(void *handle, uint8_t *xh)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60fb      	str	r3, [r7, #12]

  if (ctx == NULL)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <BSP_ACCELERO_Get_6D_Orientation_XH_Ext+0x18>
  {
    return COMPONENT_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e022      	b.n	80051d4 <BSP_ACCELERO_Get_6D_Orientation_XH_Ext+0x5e>
  }

  if (ctx->pExtVTable == NULL)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <BSP_ACCELERO_Get_6D_Orientation_XH_Ext+0x24>
  {
    return COMPONENT_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e01c      	b.n	80051d4 <BSP_ACCELERO_Get_6D_Orientation_XH_Ext+0x5e>
  }

  if (xh == NULL)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <BSP_ACCELERO_Get_6D_Orientation_XH_Ext+0x2e>
  {
    return COMPONENT_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e017      	b.n	80051d4 <BSP_ACCELERO_Get_6D_Orientation_XH_Ext+0x5e>
  }

  /* At the moment this feature is only implemented for LSM6DS3 */
  if (ctx->who_am_i == LSM6DS3_ACC_GYRO_WHO_AM_I)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b69      	cmp	r3, #105	; 0x69
 80051aa:	d112      	bne.n	80051d2 <BSP_ACCELERO_Get_6D_Orientation_XH_Ext+0x5c>
  {
    LSM6DS3_X_ExtDrv_t *extDriver = (LSM6DS3_X_ExtDrv_t *)ctx->pExtVTable;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	60bb      	str	r3, [r7, #8]

    if (extDriver->Get_6D_Orientation_XH == NULL)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2280      	movs	r2, #128	; 0x80
 80051b6:	589b      	ldr	r3, [r3, r2]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <BSP_ACCELERO_Get_6D_Orientation_XH_Ext+0x4a>
    {
      return COMPONENT_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e009      	b.n	80051d4 <BSP_ACCELERO_Get_6D_Orientation_XH_Ext+0x5e>
    }

    else
    {
      return extDriver->Get_6D_Orientation_XH(ctx, xh);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2280      	movs	r2, #128	; 0x80
 80051c4:	589b      	ldr	r3, [r3, r2]
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	0010      	movs	r0, r2
 80051cc:	4798      	blx	r3
 80051ce:	0003      	movs	r3, r0
 80051d0:	e000      	b.n	80051d4 <BSP_ACCELERO_Get_6D_Orientation_XH_Ext+0x5e>
    }
  }

  else
  {
    return COMPONENT_ERROR;
 80051d2:	2301      	movs	r3, #1
  }
}
 80051d4:	0018      	movs	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b004      	add	sp, #16
 80051da:	bd80      	pop	{r7, pc}

080051dc <BSP_ACCELERO_Get_6D_Orientation_YL_Ext>:
DrvStatusTypeDef BSP_ACCELERO_Get_6D_Orientation_YL_Ext(void *handle, uint8_t *yl)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60fb      	str	r3, [r7, #12]

  if (ctx == NULL)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <BSP_ACCELERO_Get_6D_Orientation_YL_Ext+0x18>
  {
    return COMPONENT_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e022      	b.n	800523a <BSP_ACCELERO_Get_6D_Orientation_YL_Ext+0x5e>
  }

  if (ctx->pExtVTable == NULL)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <BSP_ACCELERO_Get_6D_Orientation_YL_Ext+0x24>
  {
    return COMPONENT_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e01c      	b.n	800523a <BSP_ACCELERO_Get_6D_Orientation_YL_Ext+0x5e>
  }

  if (yl == NULL)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <BSP_ACCELERO_Get_6D_Orientation_YL_Ext+0x2e>
  {
    return COMPONENT_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e017      	b.n	800523a <BSP_ACCELERO_Get_6D_Orientation_YL_Ext+0x5e>
  }

  /* At the moment this feature is only implemented for LSM6DS3 */
  if (ctx->who_am_i == LSM6DS3_ACC_GYRO_WHO_AM_I)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b69      	cmp	r3, #105	; 0x69
 8005210:	d112      	bne.n	8005238 <BSP_ACCELERO_Get_6D_Orientation_YL_Ext+0x5c>
  {
    LSM6DS3_X_ExtDrv_t *extDriver = (LSM6DS3_X_ExtDrv_t *)ctx->pExtVTable;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	60bb      	str	r3, [r7, #8]

    if (extDriver->Get_6D_Orientation_YL == NULL)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2284      	movs	r2, #132	; 0x84
 800521c:	589b      	ldr	r3, [r3, r2]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <BSP_ACCELERO_Get_6D_Orientation_YL_Ext+0x4a>
    {
      return COMPONENT_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e009      	b.n	800523a <BSP_ACCELERO_Get_6D_Orientation_YL_Ext+0x5e>
    }

    else
    {
      return extDriver->Get_6D_Orientation_YL(ctx, yl);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2284      	movs	r2, #132	; 0x84
 800522a:	589b      	ldr	r3, [r3, r2]
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	0010      	movs	r0, r2
 8005232:	4798      	blx	r3
 8005234:	0003      	movs	r3, r0
 8005236:	e000      	b.n	800523a <BSP_ACCELERO_Get_6D_Orientation_YL_Ext+0x5e>
    }
  }

  else
  {
    return COMPONENT_ERROR;
 8005238:	2301      	movs	r3, #1
  }
}
 800523a:	0018      	movs	r0, r3
 800523c:	46bd      	mov	sp, r7
 800523e:	b004      	add	sp, #16
 8005240:	bd80      	pop	{r7, pc}

08005242 <BSP_ACCELERO_Get_6D_Orientation_YH_Ext>:
DrvStatusTypeDef BSP_ACCELERO_Get_6D_Orientation_YH_Ext(void *handle, uint8_t *yh)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60fb      	str	r3, [r7, #12]

  if (ctx == NULL)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <BSP_ACCELERO_Get_6D_Orientation_YH_Ext+0x18>
  {
    return COMPONENT_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e022      	b.n	80052a0 <BSP_ACCELERO_Get_6D_Orientation_YH_Ext+0x5e>
  }

  if (ctx->pExtVTable == NULL)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <BSP_ACCELERO_Get_6D_Orientation_YH_Ext+0x24>
  {
    return COMPONENT_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e01c      	b.n	80052a0 <BSP_ACCELERO_Get_6D_Orientation_YH_Ext+0x5e>
  }

  if (yh == NULL)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <BSP_ACCELERO_Get_6D_Orientation_YH_Ext+0x2e>
  {
    return COMPONENT_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e017      	b.n	80052a0 <BSP_ACCELERO_Get_6D_Orientation_YH_Ext+0x5e>
  }

  /* At the moment this feature is only implemented for LSM6DS3 */
  if (ctx->who_am_i == LSM6DS3_ACC_GYRO_WHO_AM_I)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b69      	cmp	r3, #105	; 0x69
 8005276:	d112      	bne.n	800529e <BSP_ACCELERO_Get_6D_Orientation_YH_Ext+0x5c>
  {
    LSM6DS3_X_ExtDrv_t *extDriver = (LSM6DS3_X_ExtDrv_t *)ctx->pExtVTable;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	60bb      	str	r3, [r7, #8]

    if (extDriver->Get_6D_Orientation_YH == NULL)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2288      	movs	r2, #136	; 0x88
 8005282:	589b      	ldr	r3, [r3, r2]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <BSP_ACCELERO_Get_6D_Orientation_YH_Ext+0x4a>
    {
      return COMPONENT_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e009      	b.n	80052a0 <BSP_ACCELERO_Get_6D_Orientation_YH_Ext+0x5e>
    }

    else
    {
      return extDriver->Get_6D_Orientation_YH(ctx, yh);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2288      	movs	r2, #136	; 0x88
 8005290:	589b      	ldr	r3, [r3, r2]
 8005292:	6839      	ldr	r1, [r7, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	0010      	movs	r0, r2
 8005298:	4798      	blx	r3
 800529a:	0003      	movs	r3, r0
 800529c:	e000      	b.n	80052a0 <BSP_ACCELERO_Get_6D_Orientation_YH_Ext+0x5e>
    }
  }

  else
  {
    return COMPONENT_ERROR;
 800529e:	2301      	movs	r3, #1
  }
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b004      	add	sp, #16
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <BSP_ACCELERO_Get_6D_Orientation_ZL_Ext>:
DrvStatusTypeDef BSP_ACCELERO_Get_6D_Orientation_ZL_Ext(void *handle, uint8_t *zl)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60fb      	str	r3, [r7, #12]

  if (ctx == NULL)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <BSP_ACCELERO_Get_6D_Orientation_ZL_Ext+0x18>
  {
    return COMPONENT_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e022      	b.n	8005306 <BSP_ACCELERO_Get_6D_Orientation_ZL_Ext+0x5e>
  }

  if (ctx->pExtVTable == NULL)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <BSP_ACCELERO_Get_6D_Orientation_ZL_Ext+0x24>
  {
    return COMPONENT_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e01c      	b.n	8005306 <BSP_ACCELERO_Get_6D_Orientation_ZL_Ext+0x5e>
  }

  if (zl == NULL)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <BSP_ACCELERO_Get_6D_Orientation_ZL_Ext+0x2e>
  {
    return COMPONENT_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e017      	b.n	8005306 <BSP_ACCELERO_Get_6D_Orientation_ZL_Ext+0x5e>
  }

  /* At the moment this feature is only implemented for LSM6DS3 */
  if (ctx->who_am_i == LSM6DS3_ACC_GYRO_WHO_AM_I)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b69      	cmp	r3, #105	; 0x69
 80052dc:	d112      	bne.n	8005304 <BSP_ACCELERO_Get_6D_Orientation_ZL_Ext+0x5c>
  {
    LSM6DS3_X_ExtDrv_t *extDriver = (LSM6DS3_X_ExtDrv_t *)ctx->pExtVTable;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	60bb      	str	r3, [r7, #8]

    if (extDriver->Get_6D_Orientation_ZL == NULL)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	228c      	movs	r2, #140	; 0x8c
 80052e8:	589b      	ldr	r3, [r3, r2]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <BSP_ACCELERO_Get_6D_Orientation_ZL_Ext+0x4a>
    {
      return COMPONENT_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e009      	b.n	8005306 <BSP_ACCELERO_Get_6D_Orientation_ZL_Ext+0x5e>
    }

    else
    {
      return extDriver->Get_6D_Orientation_ZL(ctx, zl);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	228c      	movs	r2, #140	; 0x8c
 80052f6:	589b      	ldr	r3, [r3, r2]
 80052f8:	6839      	ldr	r1, [r7, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	0010      	movs	r0, r2
 80052fe:	4798      	blx	r3
 8005300:	0003      	movs	r3, r0
 8005302:	e000      	b.n	8005306 <BSP_ACCELERO_Get_6D_Orientation_ZL_Ext+0x5e>
    }
  }

  else
  {
    return COMPONENT_ERROR;
 8005304:	2301      	movs	r3, #1
  }
}
 8005306:	0018      	movs	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	b004      	add	sp, #16
 800530c:	bd80      	pop	{r7, pc}

0800530e <BSP_ACCELERO_Get_6D_Orientation_ZH_Ext>:
DrvStatusTypeDef BSP_ACCELERO_Get_6D_Orientation_ZH_Ext(void *handle, uint8_t *zh)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60fb      	str	r3, [r7, #12]

  if (ctx == NULL)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <BSP_ACCELERO_Get_6D_Orientation_ZH_Ext+0x18>
  {
    return COMPONENT_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e022      	b.n	800536c <BSP_ACCELERO_Get_6D_Orientation_ZH_Ext+0x5e>
  }

  if (ctx->pExtVTable == NULL)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <BSP_ACCELERO_Get_6D_Orientation_ZH_Ext+0x24>
  {
    return COMPONENT_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e01c      	b.n	800536c <BSP_ACCELERO_Get_6D_Orientation_ZH_Ext+0x5e>
  }

  if (zh == NULL)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <BSP_ACCELERO_Get_6D_Orientation_ZH_Ext+0x2e>
  {
    return COMPONENT_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e017      	b.n	800536c <BSP_ACCELERO_Get_6D_Orientation_ZH_Ext+0x5e>
  }

  /* At the moment this feature is only implemented for LSM6DS3 */
  if (ctx->who_am_i == LSM6DS3_ACC_GYRO_WHO_AM_I)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b69      	cmp	r3, #105	; 0x69
 8005342:	d112      	bne.n	800536a <BSP_ACCELERO_Get_6D_Orientation_ZH_Ext+0x5c>
  {
    LSM6DS3_X_ExtDrv_t *extDriver = (LSM6DS3_X_ExtDrv_t *)ctx->pExtVTable;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	60bb      	str	r3, [r7, #8]

    if (extDriver->Get_6D_Orientation_ZH == NULL)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2290      	movs	r2, #144	; 0x90
 800534e:	589b      	ldr	r3, [r3, r2]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <BSP_ACCELERO_Get_6D_Orientation_ZH_Ext+0x4a>
    {
      return COMPONENT_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e009      	b.n	800536c <BSP_ACCELERO_Get_6D_Orientation_ZH_Ext+0x5e>
    }

    else
    {
      return extDriver->Get_6D_Orientation_ZH(ctx, zh);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2290      	movs	r2, #144	; 0x90
 800535c:	589b      	ldr	r3, [r3, r2]
 800535e:	6839      	ldr	r1, [r7, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	0010      	movs	r0, r2
 8005364:	4798      	blx	r3
 8005366:	0003      	movs	r3, r0
 8005368:	e000      	b.n	800536c <BSP_ACCELERO_Get_6D_Orientation_ZH_Ext+0x5e>
    }
  }

  else
  {
    return COMPONENT_ERROR;
 800536a:	2301      	movs	r3, #1
  }
}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	b004      	add	sp, #16
 8005372:	bd80      	pop	{r7, pc}

08005374 <sendOrientation>:

static void sendOrientation(void)
{
 8005374:	b590      	push	{r4, r7, lr}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
  uint8_t xl = 0;
 800537a:	1dfb      	adds	r3, r7, #7
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
  uint8_t xh = 0;
 8005380:	1dbb      	adds	r3, r7, #6
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
  uint8_t yl = 0;
 8005386:	1d7b      	adds	r3, r7, #5
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
  uint8_t yh = 0;
 800538c:	1d3b      	adds	r3, r7, #4
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
  uint8_t zl = 0;
 8005392:	1cfb      	adds	r3, r7, #3
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
  uint8_t zh = 0;
 8005398:	1cbb      	adds	r3, r7, #2
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
  uint8_t instance;

  BSP_ACCELERO_Get_Instance(LSM6DS3_X_0_handle, &instance);
 800539e:	4bc9      	ldr	r3, [pc, #804]	; (80056c4 <sendOrientation+0x350>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	1c7a      	adds	r2, r7, #1
 80053a4:	0011      	movs	r1, r2
 80053a6:	0018      	movs	r0, r3
 80053a8:	f7ff fe9a 	bl	80050e0 <BSP_ACCELERO_Get_Instance>

  if (BSP_ACCELERO_Get_6D_Orientation_XL_Ext(LSM6DS3_X_0_handle, &xl) == COMPONENT_ERROR)
 80053ac:	4bc5      	ldr	r3, [pc, #788]	; (80056c4 <sendOrientation+0x350>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	1dfa      	adds	r2, r7, #7
 80053b2:	0011      	movs	r1, r2
 80053b4:	0018      	movs	r0, r3
 80053b6:	f7ff fead 	bl	8005114 <BSP_ACCELERO_Get_6D_Orientation_XL_Ext>
 80053ba:	0003      	movs	r3, r0
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d115      	bne.n	80053ec <sendOrientation+0x78>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "Error getting 6D orientation XL axis from LSM6DS3 - accelerometer[%d].\r\n", instance);
 80053c0:	1c7b      	adds	r3, r7, #1
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	001c      	movs	r4, r3
 80053c6:	4ac0      	ldr	r2, [pc, #768]	; (80056c8 <sendOrientation+0x354>)
 80053c8:	2380      	movs	r3, #128	; 0x80
 80053ca:	0059      	lsls	r1, r3, #1
 80053cc:	48bf      	ldr	r0, [pc, #764]	; (80056cc <sendOrientation+0x358>)
 80053ce:	0023      	movs	r3, r4
 80053d0:	f004 f804 	bl	80093dc <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)dataOut, strlen(dataOut), 5000);
 80053d4:	4bbd      	ldr	r3, [pc, #756]	; (80056cc <sendOrientation+0x358>)
 80053d6:	0018      	movs	r0, r3
 80053d8:	f7fa fe94 	bl	8000104 <strlen>
 80053dc:	0003      	movs	r3, r0
 80053de:	b29a      	uxth	r2, r3
 80053e0:	4bbb      	ldr	r3, [pc, #748]	; (80056d0 <sendOrientation+0x35c>)
 80053e2:	49ba      	ldr	r1, [pc, #744]	; (80056cc <sendOrientation+0x358>)
 80053e4:	48bb      	ldr	r0, [pc, #748]	; (80056d4 <sendOrientation+0x360>)
 80053e6:	f002 fbad 	bl	8007b44 <HAL_UART_Transmit>
    return;
 80053ea:	e1a0      	b.n	800572e <sendOrientation+0x3ba>
  }
  if (BSP_ACCELERO_Get_6D_Orientation_XH_Ext(LSM6DS3_X_0_handle, &xh) == COMPONENT_ERROR)
 80053ec:	4bb5      	ldr	r3, [pc, #724]	; (80056c4 <sendOrientation+0x350>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	1dba      	adds	r2, r7, #6
 80053f2:	0011      	movs	r1, r2
 80053f4:	0018      	movs	r0, r3
 80053f6:	f7ff febe 	bl	8005176 <BSP_ACCELERO_Get_6D_Orientation_XH_Ext>
 80053fa:	0003      	movs	r3, r0
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d115      	bne.n	800542c <sendOrientation+0xb8>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "Error getting 6D orientation XH axis from LSM6DS3 - accelerometer[%d].\r\n", instance);
 8005400:	1c7b      	adds	r3, r7, #1
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	001c      	movs	r4, r3
 8005406:	4ab4      	ldr	r2, [pc, #720]	; (80056d8 <sendOrientation+0x364>)
 8005408:	2380      	movs	r3, #128	; 0x80
 800540a:	0059      	lsls	r1, r3, #1
 800540c:	48af      	ldr	r0, [pc, #700]	; (80056cc <sendOrientation+0x358>)
 800540e:	0023      	movs	r3, r4
 8005410:	f003 ffe4 	bl	80093dc <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)dataOut, strlen(dataOut), 5000);
 8005414:	4bad      	ldr	r3, [pc, #692]	; (80056cc <sendOrientation+0x358>)
 8005416:	0018      	movs	r0, r3
 8005418:	f7fa fe74 	bl	8000104 <strlen>
 800541c:	0003      	movs	r3, r0
 800541e:	b29a      	uxth	r2, r3
 8005420:	4bab      	ldr	r3, [pc, #684]	; (80056d0 <sendOrientation+0x35c>)
 8005422:	49aa      	ldr	r1, [pc, #680]	; (80056cc <sendOrientation+0x358>)
 8005424:	48ab      	ldr	r0, [pc, #684]	; (80056d4 <sendOrientation+0x360>)
 8005426:	f002 fb8d 	bl	8007b44 <HAL_UART_Transmit>
    return;
 800542a:	e180      	b.n	800572e <sendOrientation+0x3ba>
  }
  if (BSP_ACCELERO_Get_6D_Orientation_YL_Ext(LSM6DS3_X_0_handle, &yl) == COMPONENT_ERROR)
 800542c:	4ba5      	ldr	r3, [pc, #660]	; (80056c4 <sendOrientation+0x350>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	1d7a      	adds	r2, r7, #5
 8005432:	0011      	movs	r1, r2
 8005434:	0018      	movs	r0, r3
 8005436:	f7ff fed1 	bl	80051dc <BSP_ACCELERO_Get_6D_Orientation_YL_Ext>
 800543a:	0003      	movs	r3, r0
 800543c:	2b01      	cmp	r3, #1
 800543e:	d115      	bne.n	800546c <sendOrientation+0xf8>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "Error getting 6D orientation YL axis from LSM6DS3 - accelerometer[%d].\r\n", instance);
 8005440:	1c7b      	adds	r3, r7, #1
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	001c      	movs	r4, r3
 8005446:	4aa5      	ldr	r2, [pc, #660]	; (80056dc <sendOrientation+0x368>)
 8005448:	2380      	movs	r3, #128	; 0x80
 800544a:	0059      	lsls	r1, r3, #1
 800544c:	489f      	ldr	r0, [pc, #636]	; (80056cc <sendOrientation+0x358>)
 800544e:	0023      	movs	r3, r4
 8005450:	f003 ffc4 	bl	80093dc <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)dataOut, strlen(dataOut), 5000);
 8005454:	4b9d      	ldr	r3, [pc, #628]	; (80056cc <sendOrientation+0x358>)
 8005456:	0018      	movs	r0, r3
 8005458:	f7fa fe54 	bl	8000104 <strlen>
 800545c:	0003      	movs	r3, r0
 800545e:	b29a      	uxth	r2, r3
 8005460:	4b9b      	ldr	r3, [pc, #620]	; (80056d0 <sendOrientation+0x35c>)
 8005462:	499a      	ldr	r1, [pc, #616]	; (80056cc <sendOrientation+0x358>)
 8005464:	489b      	ldr	r0, [pc, #620]	; (80056d4 <sendOrientation+0x360>)
 8005466:	f002 fb6d 	bl	8007b44 <HAL_UART_Transmit>
    return;
 800546a:	e160      	b.n	800572e <sendOrientation+0x3ba>
  }
  if (BSP_ACCELERO_Get_6D_Orientation_YH_Ext(LSM6DS3_X_0_handle, &yh) == COMPONENT_ERROR)
 800546c:	4b95      	ldr	r3, [pc, #596]	; (80056c4 <sendOrientation+0x350>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	1d3a      	adds	r2, r7, #4
 8005472:	0011      	movs	r1, r2
 8005474:	0018      	movs	r0, r3
 8005476:	f7ff fee4 	bl	8005242 <BSP_ACCELERO_Get_6D_Orientation_YH_Ext>
 800547a:	0003      	movs	r3, r0
 800547c:	2b01      	cmp	r3, #1
 800547e:	d115      	bne.n	80054ac <sendOrientation+0x138>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "Error getting 6D orientation YH axis from LSM6DS3 - accelerometer[%d].\r\n", instance);
 8005480:	1c7b      	adds	r3, r7, #1
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	001c      	movs	r4, r3
 8005486:	4a96      	ldr	r2, [pc, #600]	; (80056e0 <sendOrientation+0x36c>)
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	0059      	lsls	r1, r3, #1
 800548c:	488f      	ldr	r0, [pc, #572]	; (80056cc <sendOrientation+0x358>)
 800548e:	0023      	movs	r3, r4
 8005490:	f003 ffa4 	bl	80093dc <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)dataOut, strlen(dataOut), 5000);
 8005494:	4b8d      	ldr	r3, [pc, #564]	; (80056cc <sendOrientation+0x358>)
 8005496:	0018      	movs	r0, r3
 8005498:	f7fa fe34 	bl	8000104 <strlen>
 800549c:	0003      	movs	r3, r0
 800549e:	b29a      	uxth	r2, r3
 80054a0:	4b8b      	ldr	r3, [pc, #556]	; (80056d0 <sendOrientation+0x35c>)
 80054a2:	498a      	ldr	r1, [pc, #552]	; (80056cc <sendOrientation+0x358>)
 80054a4:	488b      	ldr	r0, [pc, #556]	; (80056d4 <sendOrientation+0x360>)
 80054a6:	f002 fb4d 	bl	8007b44 <HAL_UART_Transmit>
    return;
 80054aa:	e140      	b.n	800572e <sendOrientation+0x3ba>
  }
  if (BSP_ACCELERO_Get_6D_Orientation_ZL_Ext(LSM6DS3_X_0_handle, &zl) == COMPONENT_ERROR)
 80054ac:	4b85      	ldr	r3, [pc, #532]	; (80056c4 <sendOrientation+0x350>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	1cfa      	adds	r2, r7, #3
 80054b2:	0011      	movs	r1, r2
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7ff fef7 	bl	80052a8 <BSP_ACCELERO_Get_6D_Orientation_ZL_Ext>
 80054ba:	0003      	movs	r3, r0
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d115      	bne.n	80054ec <sendOrientation+0x178>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "Error getting 6D orientation ZL axis from LSM6DS3 - accelerometer[%d].\r\n", instance);
 80054c0:	1c7b      	adds	r3, r7, #1
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	001c      	movs	r4, r3
 80054c6:	4a87      	ldr	r2, [pc, #540]	; (80056e4 <sendOrientation+0x370>)
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	0059      	lsls	r1, r3, #1
 80054cc:	487f      	ldr	r0, [pc, #508]	; (80056cc <sendOrientation+0x358>)
 80054ce:	0023      	movs	r3, r4
 80054d0:	f003 ff84 	bl	80093dc <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)dataOut, strlen(dataOut), 5000);
 80054d4:	4b7d      	ldr	r3, [pc, #500]	; (80056cc <sendOrientation+0x358>)
 80054d6:	0018      	movs	r0, r3
 80054d8:	f7fa fe14 	bl	8000104 <strlen>
 80054dc:	0003      	movs	r3, r0
 80054de:	b29a      	uxth	r2, r3
 80054e0:	4b7b      	ldr	r3, [pc, #492]	; (80056d0 <sendOrientation+0x35c>)
 80054e2:	497a      	ldr	r1, [pc, #488]	; (80056cc <sendOrientation+0x358>)
 80054e4:	487b      	ldr	r0, [pc, #492]	; (80056d4 <sendOrientation+0x360>)
 80054e6:	f002 fb2d 	bl	8007b44 <HAL_UART_Transmit>
    return;
 80054ea:	e120      	b.n	800572e <sendOrientation+0x3ba>
  }
  if (BSP_ACCELERO_Get_6D_Orientation_ZH_Ext(LSM6DS3_X_0_handle, &zh) == COMPONENT_ERROR)
 80054ec:	4b75      	ldr	r3, [pc, #468]	; (80056c4 <sendOrientation+0x350>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	1cba      	adds	r2, r7, #2
 80054f2:	0011      	movs	r1, r2
 80054f4:	0018      	movs	r0, r3
 80054f6:	f7ff ff0a 	bl	800530e <BSP_ACCELERO_Get_6D_Orientation_ZH_Ext>
 80054fa:	0003      	movs	r3, r0
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d115      	bne.n	800552c <sendOrientation+0x1b8>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "Error getting 6D orientation ZH axis from LSM6DS3 - accelerometer[%d].\r\n", instance);
 8005500:	1c7b      	adds	r3, r7, #1
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	001c      	movs	r4, r3
 8005506:	4a78      	ldr	r2, [pc, #480]	; (80056e8 <sendOrientation+0x374>)
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	0059      	lsls	r1, r3, #1
 800550c:	486f      	ldr	r0, [pc, #444]	; (80056cc <sendOrientation+0x358>)
 800550e:	0023      	movs	r3, r4
 8005510:	f003 ff64 	bl	80093dc <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)dataOut, strlen(dataOut), 5000);
 8005514:	4b6d      	ldr	r3, [pc, #436]	; (80056cc <sendOrientation+0x358>)
 8005516:	0018      	movs	r0, r3
 8005518:	f7fa fdf4 	bl	8000104 <strlen>
 800551c:	0003      	movs	r3, r0
 800551e:	b29a      	uxth	r2, r3
 8005520:	4b6b      	ldr	r3, [pc, #428]	; (80056d0 <sendOrientation+0x35c>)
 8005522:	496a      	ldr	r1, [pc, #424]	; (80056cc <sendOrientation+0x358>)
 8005524:	486b      	ldr	r0, [pc, #428]	; (80056d4 <sendOrientation+0x360>)
 8005526:	f002 fb0d 	bl	8007b44 <HAL_UART_Transmit>
    return;
 800552a:	e100      	b.n	800572e <sendOrientation+0x3ba>
  }

  if (xl == 0 && yl == 0 && zl == 0 && xh == 0 && yh == 1 && zh == 0)
 800552c:	1dfb      	adds	r3, r7, #7
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d11c      	bne.n	800556e <sendOrientation+0x1fa>
 8005534:	1d7b      	adds	r3, r7, #5
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d118      	bne.n	800556e <sendOrientation+0x1fa>
 800553c:	1cfb      	adds	r3, r7, #3
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d114      	bne.n	800556e <sendOrientation+0x1fa>
 8005544:	1dbb      	adds	r3, r7, #6
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d110      	bne.n	800556e <sendOrientation+0x1fa>
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d10c      	bne.n	800556e <sendOrientation+0x1fa>
 8005554:	1cbb      	adds	r3, r7, #2
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d108      	bne.n	800556e <sendOrientation+0x1fa>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\n  ________________  " \
 800555c:	4a5b      	ldr	r2, [pc, #364]	; (80056cc <sendOrientation+0x358>)
 800555e:	4b63      	ldr	r3, [pc, #396]	; (80056ec <sendOrientation+0x378>)
 8005560:	0010      	movs	r0, r2
 8005562:	0019      	movs	r1, r3
 8005564:	23b3      	movs	r3, #179	; 0xb3
 8005566:	001a      	movs	r2, r3
 8005568:	f003 ff26 	bl	80093b8 <memcpy>
 800556c:	e0d4      	b.n	8005718 <sendOrientation+0x3a4>
             "\r\n |                | " \
             "\r\n |                | " \
             "\r\n |________________| \r\n");
  }

  else if (xl == 1 && yl == 0 && zl == 0 && xh == 0 && yh == 0 && zh == 0)
 800556e:	1dfb      	adds	r3, r7, #7
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d11c      	bne.n	80055b0 <sendOrientation+0x23c>
 8005576:	1d7b      	adds	r3, r7, #5
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d118      	bne.n	80055b0 <sendOrientation+0x23c>
 800557e:	1cfb      	adds	r3, r7, #3
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d114      	bne.n	80055b0 <sendOrientation+0x23c>
 8005586:	1dbb      	adds	r3, r7, #6
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d110      	bne.n	80055b0 <sendOrientation+0x23c>
 800558e:	1d3b      	adds	r3, r7, #4
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10c      	bne.n	80055b0 <sendOrientation+0x23c>
 8005596:	1cbb      	adds	r3, r7, #2
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d108      	bne.n	80055b0 <sendOrientation+0x23c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\n  ________________  " \
 800559e:	4a4b      	ldr	r2, [pc, #300]	; (80056cc <sendOrientation+0x358>)
 80055a0:	4b53      	ldr	r3, [pc, #332]	; (80056f0 <sendOrientation+0x37c>)
 80055a2:	0010      	movs	r0, r2
 80055a4:	0019      	movs	r1, r3
 80055a6:	23b3      	movs	r3, #179	; 0xb3
 80055a8:	001a      	movs	r2, r3
 80055aa:	f003 ff05 	bl	80093b8 <memcpy>
 80055ae:	e0b3      	b.n	8005718 <sendOrientation+0x3a4>
             "\r\n |                | " \
             "\r\n |                | " \
             "\r\n |________________| \r\n");
  }

  else if (xl == 0 && yl == 0 && zl == 0 && xh == 1 && yh == 0 && zh == 0)
 80055b0:	1dfb      	adds	r3, r7, #7
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d11c      	bne.n	80055f2 <sendOrientation+0x27e>
 80055b8:	1d7b      	adds	r3, r7, #5
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d118      	bne.n	80055f2 <sendOrientation+0x27e>
 80055c0:	1cfb      	adds	r3, r7, #3
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d114      	bne.n	80055f2 <sendOrientation+0x27e>
 80055c8:	1dbb      	adds	r3, r7, #6
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d110      	bne.n	80055f2 <sendOrientation+0x27e>
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10c      	bne.n	80055f2 <sendOrientation+0x27e>
 80055d8:	1cbb      	adds	r3, r7, #2
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d108      	bne.n	80055f2 <sendOrientation+0x27e>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\n  ________________  " \
 80055e0:	4a3a      	ldr	r2, [pc, #232]	; (80056cc <sendOrientation+0x358>)
 80055e2:	4b44      	ldr	r3, [pc, #272]	; (80056f4 <sendOrientation+0x380>)
 80055e4:	0010      	movs	r0, r2
 80055e6:	0019      	movs	r1, r3
 80055e8:	23b3      	movs	r3, #179	; 0xb3
 80055ea:	001a      	movs	r2, r3
 80055ec:	f003 fee4 	bl	80093b8 <memcpy>
 80055f0:	e092      	b.n	8005718 <sendOrientation+0x3a4>
             "\r\n |                | " \
             "\r\n |  *             | " \
             "\r\n |________________| \r\n");
  }

  else if (xl == 0 && yl == 1 && zl == 0 && xh == 0 && yh == 0 && zh == 0)
 80055f2:	1dfb      	adds	r3, r7, #7
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d11c      	bne.n	8005634 <sendOrientation+0x2c0>
 80055fa:	1d7b      	adds	r3, r7, #5
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d118      	bne.n	8005634 <sendOrientation+0x2c0>
 8005602:	1cfb      	adds	r3, r7, #3
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d114      	bne.n	8005634 <sendOrientation+0x2c0>
 800560a:	1dbb      	adds	r3, r7, #6
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d110      	bne.n	8005634 <sendOrientation+0x2c0>
 8005612:	1d3b      	adds	r3, r7, #4
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10c      	bne.n	8005634 <sendOrientation+0x2c0>
 800561a:	1cbb      	adds	r3, r7, #2
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d108      	bne.n	8005634 <sendOrientation+0x2c0>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\n  ________________  " \
 8005622:	4a2a      	ldr	r2, [pc, #168]	; (80056cc <sendOrientation+0x358>)
 8005624:	4b34      	ldr	r3, [pc, #208]	; (80056f8 <sendOrientation+0x384>)
 8005626:	0010      	movs	r0, r2
 8005628:	0019      	movs	r1, r3
 800562a:	23b3      	movs	r3, #179	; 0xb3
 800562c:	001a      	movs	r2, r3
 800562e:	f003 fec3 	bl	80093b8 <memcpy>
 8005632:	e071      	b.n	8005718 <sendOrientation+0x3a4>
             "\r\n |                | " \
             "\r\n |             *  | " \
             "\r\n |________________| \r\n");
  }

  else if (xl == 0 && yl == 0 && zl == 0 && xh == 0 && yh == 0 && zh == 1)
 8005634:	1dfb      	adds	r3, r7, #7
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d122      	bne.n	8005682 <sendOrientation+0x30e>
 800563c:	1d7b      	adds	r3, r7, #5
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d11e      	bne.n	8005682 <sendOrientation+0x30e>
 8005644:	1cfb      	adds	r3, r7, #3
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d11a      	bne.n	8005682 <sendOrientation+0x30e>
 800564c:	1dbb      	adds	r3, r7, #6
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d116      	bne.n	8005682 <sendOrientation+0x30e>
 8005654:	1d3b      	adds	r3, r7, #4
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d112      	bne.n	8005682 <sendOrientation+0x30e>
 800565c:	1cbb      	adds	r3, r7, #2
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d10e      	bne.n	8005682 <sendOrientation+0x30e>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\n  __*_____________  " \
 8005664:	4b19      	ldr	r3, [pc, #100]	; (80056cc <sendOrientation+0x358>)
 8005666:	4a25      	ldr	r2, [pc, #148]	; (80056fc <sendOrientation+0x388>)
 8005668:	ca13      	ldmia	r2!, {r0, r1, r4}
 800566a:	c313      	stmia	r3!, {r0, r1, r4}
 800566c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800566e:	c313      	stmia	r3!, {r0, r1, r4}
 8005670:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005672:	c313      	stmia	r3!, {r0, r1, r4}
 8005674:	ca03      	ldmia	r2!, {r0, r1}
 8005676:	c303      	stmia	r3!, {r0, r1}
 8005678:	8811      	ldrh	r1, [r2, #0]
 800567a:	8019      	strh	r1, [r3, #0]
 800567c:	7892      	ldrb	r2, [r2, #2]
 800567e:	709a      	strb	r2, [r3, #2]
 8005680:	e04a      	b.n	8005718 <sendOrientation+0x3a4>
             "\r\n |________________| \r\n");
  }

  else if (xl == 0 && yl == 0 && zl == 1 && xh == 0 && yh == 0 && zh == 0)
 8005682:	1dfb      	adds	r3, r7, #7
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d13c      	bne.n	8005704 <sendOrientation+0x390>
 800568a:	1d7b      	adds	r3, r7, #5
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d138      	bne.n	8005704 <sendOrientation+0x390>
 8005692:	1cfb      	adds	r3, r7, #3
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d134      	bne.n	8005704 <sendOrientation+0x390>
 800569a:	1dbb      	adds	r3, r7, #6
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d130      	bne.n	8005704 <sendOrientation+0x390>
 80056a2:	1d3b      	adds	r3, r7, #4
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d12c      	bne.n	8005704 <sendOrientation+0x390>
 80056aa:	1cbb      	adds	r3, r7, #2
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d128      	bne.n	8005704 <sendOrientation+0x390>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\n  ________________  " \
 80056b2:	4a06      	ldr	r2, [pc, #24]	; (80056cc <sendOrientation+0x358>)
 80056b4:	4b12      	ldr	r3, [pc, #72]	; (8005700 <sendOrientation+0x38c>)
 80056b6:	0010      	movs	r0, r2
 80056b8:	0019      	movs	r1, r3
 80056ba:	2345      	movs	r3, #69	; 0x45
 80056bc:	001a      	movs	r2, r3
 80056be:	f003 fe7b 	bl	80093b8 <memcpy>
 80056c2:	e029      	b.n	8005718 <sendOrientation+0x3a4>
 80056c4:	200002b4 	.word	0x200002b4
 80056c8:	08009c18 	.word	0x08009c18
 80056cc:	200001b4 	.word	0x200001b4
 80056d0:	00001388 	.word	0x00001388
 80056d4:	200003f4 	.word	0x200003f4
 80056d8:	08009c64 	.word	0x08009c64
 80056dc:	08009cb0 	.word	0x08009cb0
 80056e0:	08009cfc 	.word	0x08009cfc
 80056e4:	08009d48 	.word	0x08009d48
 80056e8:	08009d94 	.word	0x08009d94
 80056ec:	08009de0 	.word	0x08009de0
 80056f0:	08009e94 	.word	0x08009e94
 80056f4:	08009f48 	.word	0x08009f48
 80056f8:	08009ffc 	.word	0x08009ffc
 80056fc:	0800a0b0 	.word	0x0800a0b0
 8005700:	0800a0e0 	.word	0x0800a0e0
             "\r\n    *               \r\n");
  }

  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "None of the 6D orientation axes is set in LSM6DS3 - accelerometer[%d].\r\n", instance);
 8005704:	1c7b      	adds	r3, r7, #1
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	001c      	movs	r4, r3
 800570a:	4a0a      	ldr	r2, [pc, #40]	; (8005734 <sendOrientation+0x3c0>)
 800570c:	2380      	movs	r3, #128	; 0x80
 800570e:	0059      	lsls	r1, r3, #1
 8005710:	4809      	ldr	r0, [pc, #36]	; (8005738 <sendOrientation+0x3c4>)
 8005712:	0023      	movs	r3, r4
 8005714:	f003 fe62 	bl	80093dc <sniprintf>
  }

  HAL_UART_Transmit(&huart2, (uint8_t *)dataOut, strlen(dataOut), 5000);
 8005718:	4b07      	ldr	r3, [pc, #28]	; (8005738 <sendOrientation+0x3c4>)
 800571a:	0018      	movs	r0, r3
 800571c:	f7fa fcf2 	bl	8000104 <strlen>
 8005720:	0003      	movs	r3, r0
 8005722:	b29a      	uxth	r2, r3
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <sendOrientation+0x3c8>)
 8005726:	4904      	ldr	r1, [pc, #16]	; (8005738 <sendOrientation+0x3c4>)
 8005728:	4805      	ldr	r0, [pc, #20]	; (8005740 <sendOrientation+0x3cc>)
 800572a:	f002 fa0b 	bl	8007b44 <HAL_UART_Transmit>
}
 800572e:	46bd      	mov	sp, r7
 8005730:	b003      	add	sp, #12
 8005732:	bd90      	pop	{r4, r7, pc}
 8005734:	0800a128 	.word	0x0800a128
 8005738:	200001b4 	.word	0x200001b4
 800573c:	00001388 	.word	0x00001388
 8005740:	200003f4 	.word	0x200003f4

08005744 <BSP_ACCELERO_Get_Event_Status_Ext>:
DrvStatusTypeDef BSP_ACCELERO_Get_Event_Status_Ext(void *handle, ACCELERO_Event_Status_t *status)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]

  if (ctx == NULL)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <BSP_ACCELERO_Get_Event_Status_Ext+0x18>
  {
    return COMPONENT_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e022      	b.n	80057a2 <BSP_ACCELERO_Get_Event_Status_Ext+0x5e>
  }

  if (ctx->pExtVTable == NULL)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <BSP_ACCELERO_Get_Event_Status_Ext+0x24>
  {
    return COMPONENT_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e01c      	b.n	80057a2 <BSP_ACCELERO_Get_Event_Status_Ext+0x5e>
  }

  if (status == NULL)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <BSP_ACCELERO_Get_Event_Status_Ext+0x2e>
  {
    return COMPONENT_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e017      	b.n	80057a2 <BSP_ACCELERO_Get_Event_Status_Ext+0x5e>
  }

  /* At the moment this feature is only implemented for LSM6DS3 */
  if (ctx->who_am_i == LSM6DS3_ACC_GYRO_WHO_AM_I)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b69      	cmp	r3, #105	; 0x69
 8005778:	d112      	bne.n	80057a0 <BSP_ACCELERO_Get_Event_Status_Ext+0x5c>
  {
    LSM6DS3_X_ExtDrv_t *extDriver = (LSM6DS3_X_ExtDrv_t *)ctx->pExtVTable;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	60bb      	str	r3, [r7, #8]

    if (extDriver->Get_Event_Status == NULL)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2294      	movs	r2, #148	; 0x94
 8005784:	589b      	ldr	r3, [r3, r2]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <BSP_ACCELERO_Get_Event_Status_Ext+0x4a>
    {
      return COMPONENT_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e009      	b.n	80057a2 <BSP_ACCELERO_Get_Event_Status_Ext+0x5e>
    }

    else
    {
      return extDriver->Get_Event_Status(ctx, status);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2294      	movs	r2, #148	; 0x94
 8005792:	589b      	ldr	r3, [r3, r2]
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	0010      	movs	r0, r2
 800579a:	4798      	blx	r3
 800579c:	0003      	movs	r3, r0
 800579e:	e000      	b.n	80057a2 <BSP_ACCELERO_Get_Event_Status_Ext+0x5e>
    }
  }

  else
  {
    return COMPONENT_ERROR;
 80057a0:	2301      	movs	r3, #1
  }
}
 80057a2:	0018      	movs	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b004      	add	sp, #16
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <HAL_GPIO_EXTI_Falling_Callback>:
  {
    mems_int1_detected = 1;
  }
}
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	0002      	movs	r2, r0
 80057b4:	1dbb      	adds	r3, r7, #6
 80057b6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
  if (GPIO_Pin == M_INT1_PIN)
 80057b8:	1dbb      	adds	r3, r7, #6
 80057ba:	881a      	ldrh	r2, [r3, #0]
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d102      	bne.n	80057ca <HAL_GPIO_EXTI_Falling_Callback+0x1e>
    {
      mems_int1_detected = 1;
 80057c4:	4b03      	ldr	r3, [pc, #12]	; (80057d4 <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]
    }
}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b002      	add	sp, #8
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	200001b0 	.word	0x200001b0

080057d8 <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	0002      	movs	r2, r0
 80057e0:	1dbb      	adds	r3, r7, #6
 80057e2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
  if (GPIO_Pin == M_INT1_PIN)
 80057e4:	1dbb      	adds	r3, r7, #6
 80057e6:	881a      	ldrh	r2, [r3, #0]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d102      	bne.n	80057f6 <HAL_GPIO_EXTI_Rising_Callback+0x1e>
    {
      mems_int1_detected = 1;
 80057f0:	4b03      	ldr	r3, [pc, #12]	; (8005800 <HAL_GPIO_EXTI_Rising_Callback+0x28>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	701a      	strb	r2, [r3, #0]
    }
}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b002      	add	sp, #8
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	200001b0 	.word	0x200001b0

08005804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8005818:	4b04      	ldr	r3, [pc, #16]	; (800582c <LL_SYSCFG_DisableDBATT+0x1c>)
 800581a:	6819      	ldr	r1, [r3, #0]
 800581c:	4b03      	ldr	r3, [pc, #12]	; (800582c <LL_SYSCFG_DisableDBATT+0x1c>)
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	430a      	orrs	r2, r1
 8005822:	601a      	str	r2, [r3, #0]
}
 8005824:	46c0      	nop			; (mov r8, r8)
 8005826:	46bd      	mov	sp, r7
 8005828:	b002      	add	sp, #8
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40010000 	.word	0x40010000

08005830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005836:	4b11      	ldr	r3, [pc, #68]	; (800587c <HAL_MspInit+0x4c>)
 8005838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800583a:	4b10      	ldr	r3, [pc, #64]	; (800587c <HAL_MspInit+0x4c>)
 800583c:	2101      	movs	r1, #1
 800583e:	430a      	orrs	r2, r1
 8005840:	641a      	str	r2, [r3, #64]	; 0x40
 8005842:	4b0e      	ldr	r3, [pc, #56]	; (800587c <HAL_MspInit+0x4c>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	2201      	movs	r2, #1
 8005848:	4013      	ands	r3, r2
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800584e:	4b0b      	ldr	r3, [pc, #44]	; (800587c <HAL_MspInit+0x4c>)
 8005850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <HAL_MspInit+0x4c>)
 8005854:	2180      	movs	r1, #128	; 0x80
 8005856:	0549      	lsls	r1, r1, #21
 8005858:	430a      	orrs	r2, r1
 800585a:	63da      	str	r2, [r3, #60]	; 0x3c
 800585c:	4b07      	ldr	r3, [pc, #28]	; (800587c <HAL_MspInit+0x4c>)
 800585e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	055b      	lsls	r3, r3, #21
 8005864:	4013      	ands	r3, r2
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 800586a:	23c0      	movs	r3, #192	; 0xc0
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	0018      	movs	r0, r3
 8005870:	f7ff ffce 	bl	8005810 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005874:	46c0      	nop			; (mov r8, r8)
 8005876:	46bd      	mov	sp, r7
 8005878:	b002      	add	sp, #8
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40021000 	.word	0x40021000

08005880 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08a      	sub	sp, #40	; 0x28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005888:	2314      	movs	r3, #20
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	0018      	movs	r0, r3
 800588e:	2314      	movs	r3, #20
 8005890:	001a      	movs	r2, r3
 8005892:	2100      	movs	r1, #0
 8005894:	f003 fd99 	bl	80093ca <memset>
  if(hi2c->Instance==I2C2)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1b      	ldr	r2, [pc, #108]	; (800590c <HAL_I2C_MspInit+0x8c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d130      	bne.n	8005904 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058a2:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <HAL_I2C_MspInit+0x90>)
 80058a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a6:	4b1a      	ldr	r3, [pc, #104]	; (8005910 <HAL_I2C_MspInit+0x90>)
 80058a8:	2102      	movs	r1, #2
 80058aa:	430a      	orrs	r2, r1
 80058ac:	635a      	str	r2, [r3, #52]	; 0x34
 80058ae:	4b18      	ldr	r3, [pc, #96]	; (8005910 <HAL_I2C_MspInit+0x90>)
 80058b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b2:	2202      	movs	r2, #2
 80058b4:	4013      	ands	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB14     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 80058ba:	2114      	movs	r1, #20
 80058bc:	187b      	adds	r3, r7, r1
 80058be:	2288      	movs	r2, #136	; 0x88
 80058c0:	01d2      	lsls	r2, r2, #7
 80058c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058c4:	187b      	adds	r3, r7, r1
 80058c6:	2212      	movs	r2, #18
 80058c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058ca:	187b      	adds	r3, r7, r1
 80058cc:	2201      	movs	r2, #1
 80058ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058d0:	187b      	adds	r3, r7, r1
 80058d2:	2200      	movs	r2, #0
 80058d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80058d6:	187b      	adds	r3, r7, r1
 80058d8:	2206      	movs	r2, #6
 80058da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058dc:	187b      	adds	r3, r7, r1
 80058de:	4a0d      	ldr	r2, [pc, #52]	; (8005914 <HAL_I2C_MspInit+0x94>)
 80058e0:	0019      	movs	r1, r3
 80058e2:	0010      	movs	r0, r2
 80058e4:	f000 fa76 	bl	8005dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80058e8:	4b09      	ldr	r3, [pc, #36]	; (8005910 <HAL_I2C_MspInit+0x90>)
 80058ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ec:	4b08      	ldr	r3, [pc, #32]	; (8005910 <HAL_I2C_MspInit+0x90>)
 80058ee:	2180      	movs	r1, #128	; 0x80
 80058f0:	03c9      	lsls	r1, r1, #15
 80058f2:	430a      	orrs	r2, r1
 80058f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80058f6:	4b06      	ldr	r3, [pc, #24]	; (8005910 <HAL_I2C_MspInit+0x90>)
 80058f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058fa:	2380      	movs	r3, #128	; 0x80
 80058fc:	03db      	lsls	r3, r3, #15
 80058fe:	4013      	ands	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005904:	46c0      	nop			; (mov r8, r8)
 8005906:	46bd      	mov	sp, r7
 8005908:	b00a      	add	sp, #40	; 0x28
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40005800 	.word	0x40005800
 8005910:	40021000 	.word	0x40021000
 8005914:	50000400 	.word	0x50000400

08005918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08a      	sub	sp, #40	; 0x28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005920:	2314      	movs	r3, #20
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	0018      	movs	r0, r3
 8005926:	2314      	movs	r3, #20
 8005928:	001a      	movs	r2, r3
 800592a:	2100      	movs	r1, #0
 800592c:	f003 fd4d 	bl	80093ca <memset>
  if(huart->Instance==USART2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <HAL_UART_MspInit+0x8c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d130      	bne.n	800599c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <HAL_UART_MspInit+0x90>)
 800593c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800593e:	4b1a      	ldr	r3, [pc, #104]	; (80059a8 <HAL_UART_MspInit+0x90>)
 8005940:	2180      	movs	r1, #128	; 0x80
 8005942:	0289      	lsls	r1, r1, #10
 8005944:	430a      	orrs	r2, r1
 8005946:	63da      	str	r2, [r3, #60]	; 0x3c
 8005948:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <HAL_UART_MspInit+0x90>)
 800594a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	029b      	lsls	r3, r3, #10
 8005950:	4013      	ands	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005956:	4b14      	ldr	r3, [pc, #80]	; (80059a8 <HAL_UART_MspInit+0x90>)
 8005958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800595a:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <HAL_UART_MspInit+0x90>)
 800595c:	2101      	movs	r1, #1
 800595e:	430a      	orrs	r2, r1
 8005960:	635a      	str	r2, [r3, #52]	; 0x34
 8005962:	4b11      	ldr	r3, [pc, #68]	; (80059a8 <HAL_UART_MspInit+0x90>)
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	2201      	movs	r2, #1
 8005968:	4013      	ands	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800596e:	2114      	movs	r1, #20
 8005970:	187b      	adds	r3, r7, r1
 8005972:	220c      	movs	r2, #12
 8005974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005976:	187b      	adds	r3, r7, r1
 8005978:	2202      	movs	r2, #2
 800597a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800597c:	187b      	adds	r3, r7, r1
 800597e:	2200      	movs	r2, #0
 8005980:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005982:	187b      	adds	r3, r7, r1
 8005984:	2200      	movs	r2, #0
 8005986:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005988:	187b      	adds	r3, r7, r1
 800598a:	2201      	movs	r2, #1
 800598c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800598e:	187a      	adds	r2, r7, r1
 8005990:	23a0      	movs	r3, #160	; 0xa0
 8005992:	05db      	lsls	r3, r3, #23
 8005994:	0011      	movs	r1, r2
 8005996:	0018      	movs	r0, r3
 8005998:	f000 fa1c 	bl	8005dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b00a      	add	sp, #40	; 0x28
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40004400 	.word	0x40004400
 80059a8:	40021000 	.word	0x40021000

080059ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80059b0:	46c0      	nop			; (mov r8, r8)
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059ba:	e7fe      	b.n	80059ba <HardFault_Handler+0x4>

080059bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80059c0:	46c0      	nop			; (mov r8, r8)
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059d4:	f000 f8e4 	bl	8005ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059d8:	46c0      	nop			; (mov r8, r8)
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80059e2:	2380      	movs	r3, #128	; 0x80
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	0018      	movs	r0, r3
 80059e8:	f000 fb90 	bl	800610c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80059ec:	2380      	movs	r3, #128	; 0x80
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	0018      	movs	r0, r3
 80059f2:	f000 fb8b 	bl	800610c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80059f6:	2380      	movs	r3, #128	; 0x80
 80059f8:	019b      	lsls	r3, r3, #6
 80059fa:	0018      	movs	r0, r3
 80059fc:	f000 fb86 	bl	800610c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005a00:	46c0      	nop			; (mov r8, r8)
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005a10:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <_sbrk+0x50>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d102      	bne.n	8005a1e <_sbrk+0x16>
		heap_end = &end;
 8005a18:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <_sbrk+0x50>)
 8005a1a:	4a10      	ldr	r2, [pc, #64]	; (8005a5c <_sbrk+0x54>)
 8005a1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <_sbrk+0x50>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005a24:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <_sbrk+0x50>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	18d3      	adds	r3, r2, r3
 8005a2c:	466a      	mov	r2, sp
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d907      	bls.n	8005a42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005a32:	f003 fc97 	bl	8009364 <__errno>
 8005a36:	0003      	movs	r3, r0
 8005a38:	220c      	movs	r2, #12
 8005a3a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	425b      	negs	r3, r3
 8005a40:	e006      	b.n	8005a50 <_sbrk+0x48>
	}

	heap_end += incr;
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <_sbrk+0x50>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	18d2      	adds	r2, r2, r3
 8005a4a:	4b03      	ldr	r3, [pc, #12]	; (8005a58 <_sbrk+0x50>)
 8005a4c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
}
 8005a50:	0018      	movs	r0, r3
 8005a52:	46bd      	mov	sp, r7
 8005a54:	b004      	add	sp, #16
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	2000039c 	.word	0x2000039c
 8005a5c:	20000488 	.word	0x20000488

08005a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005a64:	4b03      	ldr	r3, [pc, #12]	; (8005a74 <SystemInit+0x14>)
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	0512      	lsls	r2, r2, #20
 8005a6a:	609a      	str	r2, [r3, #8]
#endif
}
 8005a6c:	46c0      	nop			; (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	e000ed00 	.word	0xe000ed00

08005a78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a78:	480d      	ldr	r0, [pc, #52]	; (8005ab0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005a7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005a7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005a7e:	e003      	b.n	8005a88 <LoopCopyDataInit>

08005a80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005a80:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8005a82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005a84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005a86:	3104      	adds	r1, #4

08005a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005a88:	480b      	ldr	r0, [pc, #44]	; (8005ab8 <LoopForever+0xa>)
  ldr r3, =_edata
 8005a8a:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <LoopForever+0xe>)
  adds r2, r0, r1
 8005a8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005a8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005a90:	d3f6      	bcc.n	8005a80 <CopyDataInit>
  ldr r2, =_sbss
 8005a92:	4a0b      	ldr	r2, [pc, #44]	; (8005ac0 <LoopForever+0x12>)
  b LoopFillZerobss
 8005a94:	e002      	b.n	8005a9c <LoopFillZerobss>

08005a96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005a96:	2300      	movs	r3, #0
  str  r3, [r2]
 8005a98:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a9a:	3204      	adds	r2, #4

08005a9c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8005a9c:	4b09      	ldr	r3, [pc, #36]	; (8005ac4 <LoopForever+0x16>)
  cmp r2, r3
 8005a9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005aa0:	d3f9      	bcc.n	8005a96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005aa2:	f7ff ffdd 	bl	8005a60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005aa6:	f003 fc63 	bl	8009370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005aaa:	f7fe ffdf 	bl	8004a6c <main>

08005aae <LoopForever>:

LoopForever:
    b LoopForever
 8005aae:	e7fe      	b.n	8005aae <LoopForever>
  ldr   r0, =_estack
 8005ab0:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8005ab4:	0800a2ac 	.word	0x0800a2ac
  ldr r0, =_sdata
 8005ab8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005abc:	20000194 	.word	0x20000194
  ldr r2, =_sbss
 8005ac0:	20000194 	.word	0x20000194
  ldr r3, = _ebss
 8005ac4:	20000488 	.word	0x20000488

08005ac8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ac8:	e7fe      	b.n	8005ac8 <ADC1_COMP_IRQHandler>
	...

08005acc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ad2:	1dfb      	adds	r3, r7, #7
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_Init+0x3c>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <HAL_Init+0x3c>)
 8005ade:	2180      	movs	r1, #128	; 0x80
 8005ae0:	0049      	lsls	r1, r1, #1
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	f000 f810 	bl	8005b0c <HAL_InitTick>
 8005aec:	1e03      	subs	r3, r0, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005af0:	1dfb      	adds	r3, r7, #7
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	e001      	b.n	8005afc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005af8:	f7ff fe9a 	bl	8005830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005afc:	1dfb      	adds	r3, r7, #7
 8005afe:	781b      	ldrb	r3, [r3, #0]
}
 8005b00:	0018      	movs	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b002      	add	sp, #8
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40022000 	.word	0x40022000

08005b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b0c:	b590      	push	{r4, r7, lr}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005b14:	230f      	movs	r3, #15
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8005b1c:	4b1d      	ldr	r3, [pc, #116]	; (8005b94 <HAL_InitTick+0x88>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d02b      	beq.n	8005b7c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8005b24:	4b1c      	ldr	r3, [pc, #112]	; (8005b98 <HAL_InitTick+0x8c>)
 8005b26:	681c      	ldr	r4, [r3, #0]
 8005b28:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <HAL_InitTick+0x88>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	0019      	movs	r1, r3
 8005b2e:	23fa      	movs	r3, #250	; 0xfa
 8005b30:	0098      	lsls	r0, r3, #2
 8005b32:	f7fa faef 	bl	8000114 <__udivsi3>
 8005b36:	0003      	movs	r3, r0
 8005b38:	0019      	movs	r1, r3
 8005b3a:	0020      	movs	r0, r4
 8005b3c:	f7fa faea 	bl	8000114 <__udivsi3>
 8005b40:	0003      	movs	r3, r0
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 f939 	bl	8005dba <HAL_SYSTICK_Config>
 8005b48:	1e03      	subs	r3, r0, #0
 8005b4a:	d112      	bne.n	8005b72 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d80a      	bhi.n	8005b68 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	2301      	movs	r3, #1
 8005b56:	425b      	negs	r3, r3
 8005b58:	2200      	movs	r2, #0
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 f908 	bl	8005d70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b60:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <HAL_InitTick+0x90>)
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e00d      	b.n	8005b84 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005b68:	230f      	movs	r3, #15
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	e008      	b.n	8005b84 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005b72:	230f      	movs	r3, #15
 8005b74:	18fb      	adds	r3, r7, r3
 8005b76:	2201      	movs	r2, #1
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	e003      	b.n	8005b84 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005b7c:	230f      	movs	r3, #15
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	2201      	movs	r2, #1
 8005b82:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005b84:	230f      	movs	r3, #15
 8005b86:	18fb      	adds	r3, r7, r3
 8005b88:	781b      	ldrb	r3, [r3, #0]
}
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b005      	add	sp, #20
 8005b90:	bd90      	pop	{r4, r7, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	2000012c 	.word	0x2000012c
 8005b98:	20000124 	.word	0x20000124
 8005b9c:	20000128 	.word	0x20000128

08005ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ba4:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <HAL_IncTick+0x18>)
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <HAL_IncTick+0x1c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	18d2      	adds	r2, r2, r3
 8005bae:	4b02      	ldr	r3, [pc, #8]	; (8005bb8 <HAL_IncTick+0x18>)
 8005bb0:	601a      	str	r2, [r3, #0]
}
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	20000480 	.word	0x20000480
 8005bbc:	2000012c 	.word	0x2000012c

08005bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8005bc4:	4b02      	ldr	r3, [pc, #8]	; (8005bd0 <HAL_GetTick+0x10>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
}
 8005bc8:	0018      	movs	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	20000480 	.word	0x20000480

08005bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bdc:	f7ff fff0 	bl	8005bc0 <HAL_GetTick>
 8005be0:	0003      	movs	r3, r0
 8005be2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3301      	adds	r3, #1
 8005bec:	d004      	beq.n	8005bf8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bee:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <HAL_Delay+0x40>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	18d3      	adds	r3, r2, r3
 8005bf6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bf8:	46c0      	nop			; (mov r8, r8)
 8005bfa:	f7ff ffe1 	bl	8005bc0 <HAL_GetTick>
 8005bfe:	0002      	movs	r2, r0
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d8f7      	bhi.n	8005bfa <HAL_Delay+0x26>
  {
  }
}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b004      	add	sp, #16
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	2000012c 	.word	0x2000012c

08005c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	0002      	movs	r2, r0
 8005c20:	1dfb      	adds	r3, r7, #7
 8005c22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005c24:	1dfb      	adds	r3, r7, #7
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b7f      	cmp	r3, #127	; 0x7f
 8005c2a:	d809      	bhi.n	8005c40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c2c:	1dfb      	adds	r3, r7, #7
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	001a      	movs	r2, r3
 8005c32:	231f      	movs	r3, #31
 8005c34:	401a      	ands	r2, r3
 8005c36:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <__NVIC_EnableIRQ+0x30>)
 8005c38:	2101      	movs	r1, #1
 8005c3a:	4091      	lsls	r1, r2
 8005c3c:	000a      	movs	r2, r1
 8005c3e:	601a      	str	r2, [r3, #0]
  }
}
 8005c40:	46c0      	nop			; (mov r8, r8)
 8005c42:	46bd      	mov	sp, r7
 8005c44:	b002      	add	sp, #8
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	e000e100 	.word	0xe000e100

08005c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	0002      	movs	r2, r0
 8005c54:	6039      	str	r1, [r7, #0]
 8005c56:	1dfb      	adds	r3, r7, #7
 8005c58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005c5a:	1dfb      	adds	r3, r7, #7
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c60:	d828      	bhi.n	8005cb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c62:	4a2f      	ldr	r2, [pc, #188]	; (8005d20 <__NVIC_SetPriority+0xd4>)
 8005c64:	1dfb      	adds	r3, r7, #7
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	b25b      	sxtb	r3, r3
 8005c6a:	089b      	lsrs	r3, r3, #2
 8005c6c:	33c0      	adds	r3, #192	; 0xc0
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	589b      	ldr	r3, [r3, r2]
 8005c72:	1dfa      	adds	r2, r7, #7
 8005c74:	7812      	ldrb	r2, [r2, #0]
 8005c76:	0011      	movs	r1, r2
 8005c78:	2203      	movs	r2, #3
 8005c7a:	400a      	ands	r2, r1
 8005c7c:	00d2      	lsls	r2, r2, #3
 8005c7e:	21ff      	movs	r1, #255	; 0xff
 8005c80:	4091      	lsls	r1, r2
 8005c82:	000a      	movs	r2, r1
 8005c84:	43d2      	mvns	r2, r2
 8005c86:	401a      	ands	r2, r3
 8005c88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	019b      	lsls	r3, r3, #6
 8005c8e:	22ff      	movs	r2, #255	; 0xff
 8005c90:	401a      	ands	r2, r3
 8005c92:	1dfb      	adds	r3, r7, #7
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	0018      	movs	r0, r3
 8005c98:	2303      	movs	r3, #3
 8005c9a:	4003      	ands	r3, r0
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ca0:	481f      	ldr	r0, [pc, #124]	; (8005d20 <__NVIC_SetPriority+0xd4>)
 8005ca2:	1dfb      	adds	r3, r7, #7
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	b25b      	sxtb	r3, r3
 8005ca8:	089b      	lsrs	r3, r3, #2
 8005caa:	430a      	orrs	r2, r1
 8005cac:	33c0      	adds	r3, #192	; 0xc0
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005cb2:	e031      	b.n	8005d18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005cb4:	4a1b      	ldr	r2, [pc, #108]	; (8005d24 <__NVIC_SetPriority+0xd8>)
 8005cb6:	1dfb      	adds	r3, r7, #7
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	0019      	movs	r1, r3
 8005cbc:	230f      	movs	r3, #15
 8005cbe:	400b      	ands	r3, r1
 8005cc0:	3b08      	subs	r3, #8
 8005cc2:	089b      	lsrs	r3, r3, #2
 8005cc4:	3306      	adds	r3, #6
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	18d3      	adds	r3, r2, r3
 8005cca:	3304      	adds	r3, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	1dfa      	adds	r2, r7, #7
 8005cd0:	7812      	ldrb	r2, [r2, #0]
 8005cd2:	0011      	movs	r1, r2
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	400a      	ands	r2, r1
 8005cd8:	00d2      	lsls	r2, r2, #3
 8005cda:	21ff      	movs	r1, #255	; 0xff
 8005cdc:	4091      	lsls	r1, r2
 8005cde:	000a      	movs	r2, r1
 8005ce0:	43d2      	mvns	r2, r2
 8005ce2:	401a      	ands	r2, r3
 8005ce4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	019b      	lsls	r3, r3, #6
 8005cea:	22ff      	movs	r2, #255	; 0xff
 8005cec:	401a      	ands	r2, r3
 8005cee:	1dfb      	adds	r3, r7, #7
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	4003      	ands	r3, r0
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005cfc:	4809      	ldr	r0, [pc, #36]	; (8005d24 <__NVIC_SetPriority+0xd8>)
 8005cfe:	1dfb      	adds	r3, r7, #7
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	001c      	movs	r4, r3
 8005d04:	230f      	movs	r3, #15
 8005d06:	4023      	ands	r3, r4
 8005d08:	3b08      	subs	r3, #8
 8005d0a:	089b      	lsrs	r3, r3, #2
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	3306      	adds	r3, #6
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	18c3      	adds	r3, r0, r3
 8005d14:	3304      	adds	r3, #4
 8005d16:	601a      	str	r2, [r3, #0]
}
 8005d18:	46c0      	nop			; (mov r8, r8)
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	b003      	add	sp, #12
 8005d1e:	bd90      	pop	{r4, r7, pc}
 8005d20:	e000e100 	.word	0xe000e100
 8005d24:	e000ed00 	.word	0xe000ed00

08005d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	4a0c      	ldr	r2, [pc, #48]	; (8005d68 <SysTick_Config+0x40>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e010      	b.n	8005d60 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d3e:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <SysTick_Config+0x44>)
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	3a01      	subs	r2, #1
 8005d44:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d46:	2301      	movs	r3, #1
 8005d48:	425b      	negs	r3, r3
 8005d4a:	2103      	movs	r1, #3
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f7ff ff7d 	bl	8005c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <SysTick_Config+0x44>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d58:	4b04      	ldr	r3, [pc, #16]	; (8005d6c <SysTick_Config+0x44>)
 8005d5a:	2207      	movs	r2, #7
 8005d5c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	0018      	movs	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b002      	add	sp, #8
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	00ffffff 	.word	0x00ffffff
 8005d6c:	e000e010 	.word	0xe000e010

08005d70 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	607a      	str	r2, [r7, #4]
 8005d7a:	210f      	movs	r1, #15
 8005d7c:	187b      	adds	r3, r7, r1
 8005d7e:	1c02      	adds	r2, r0, #0
 8005d80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	187b      	adds	r3, r7, r1
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	b25b      	sxtb	r3, r3
 8005d8a:	0011      	movs	r1, r2
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f7ff ff5d 	bl	8005c4c <__NVIC_SetPriority>
}
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	46bd      	mov	sp, r7
 8005d96:	b004      	add	sp, #16
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	0002      	movs	r2, r0
 8005da2:	1dfb      	adds	r3, r7, #7
 8005da4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005da6:	1dfb      	adds	r3, r7, #7
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	b25b      	sxtb	r3, r3
 8005dac:	0018      	movs	r0, r3
 8005dae:	f7ff ff33 	bl	8005c18 <__NVIC_EnableIRQ>
}
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b002      	add	sp, #8
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b082      	sub	sp, #8
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f7ff ffaf 	bl	8005d28 <SysTick_Config>
 8005dca:	0003      	movs	r3, r0
}
 8005dcc:	0018      	movs	r0, r3
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	b002      	add	sp, #8
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005de2:	e147      	b.n	8006074 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2101      	movs	r1, #1
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4091      	lsls	r1, r2
 8005dee:	000a      	movs	r2, r1
 8005df0:	4013      	ands	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d100      	bne.n	8005dfc <HAL_GPIO_Init+0x28>
 8005dfa:	e138      	b.n	800606e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d003      	beq.n	8005e0c <HAL_GPIO_Init+0x38>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b12      	cmp	r3, #18
 8005e0a:	d123      	bne.n	8005e54 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	08da      	lsrs	r2, r3, #3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3208      	adds	r2, #8
 8005e14:	0092      	lsls	r2, r2, #2
 8005e16:	58d3      	ldr	r3, [r2, r3]
 8005e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2207      	movs	r2, #7
 8005e1e:	4013      	ands	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	220f      	movs	r2, #15
 8005e24:	409a      	lsls	r2, r3
 8005e26:	0013      	movs	r3, r2
 8005e28:	43da      	mvns	r2, r3
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2107      	movs	r1, #7
 8005e38:	400b      	ands	r3, r1
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	409a      	lsls	r2, r3
 8005e3e:	0013      	movs	r3, r2
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	08da      	lsrs	r2, r3, #3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3208      	adds	r2, #8
 8005e4e:	0092      	lsls	r2, r2, #2
 8005e50:	6939      	ldr	r1, [r7, #16]
 8005e52:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	2203      	movs	r2, #3
 8005e60:	409a      	lsls	r2, r3
 8005e62:	0013      	movs	r3, r2
 8005e64:	43da      	mvns	r2, r3
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2203      	movs	r2, #3
 8005e72:	401a      	ands	r2, r3
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	409a      	lsls	r2, r3
 8005e7a:	0013      	movs	r3, r2
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d00b      	beq.n	8005ea8 <HAL_GPIO_Init+0xd4>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d007      	beq.n	8005ea8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e9c:	2b11      	cmp	r3, #17
 8005e9e:	d003      	beq.n	8005ea8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2b12      	cmp	r3, #18
 8005ea6:	d130      	bne.n	8005f0a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	409a      	lsls	r2, r3
 8005eb6:	0013      	movs	r3, r2
 8005eb8:	43da      	mvns	r2, r3
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	409a      	lsls	r2, r3
 8005eca:	0013      	movs	r3, r2
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ede:	2201      	movs	r2, #1
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	0013      	movs	r3, r2
 8005ee6:	43da      	mvns	r2, r3
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4013      	ands	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	091b      	lsrs	r3, r3, #4
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	409a      	lsls	r2, r3
 8005efc:	0013      	movs	r3, r2
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	2203      	movs	r2, #3
 8005f16:	409a      	lsls	r2, r3
 8005f18:	0013      	movs	r3, r2
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	0013      	movs	r3, r2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	2380      	movs	r3, #128	; 0x80
 8005f40:	055b      	lsls	r3, r3, #21
 8005f42:	4013      	ands	r3, r2
 8005f44:	d100      	bne.n	8005f48 <HAL_GPIO_Init+0x174>
 8005f46:	e092      	b.n	800606e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005f48:	4a50      	ldr	r2, [pc, #320]	; (800608c <HAL_GPIO_Init+0x2b8>)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	089b      	lsrs	r3, r3, #2
 8005f4e:	3318      	adds	r3, #24
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	589b      	ldr	r3, [r3, r2]
 8005f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2203      	movs	r2, #3
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	220f      	movs	r2, #15
 8005f60:	409a      	lsls	r2, r3
 8005f62:	0013      	movs	r3, r2
 8005f64:	43da      	mvns	r2, r3
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	23a0      	movs	r3, #160	; 0xa0
 8005f70:	05db      	lsls	r3, r3, #23
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d013      	beq.n	8005f9e <HAL_GPIO_Init+0x1ca>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a45      	ldr	r2, [pc, #276]	; (8006090 <HAL_GPIO_Init+0x2bc>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00d      	beq.n	8005f9a <HAL_GPIO_Init+0x1c6>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a44      	ldr	r2, [pc, #272]	; (8006094 <HAL_GPIO_Init+0x2c0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d007      	beq.n	8005f96 <HAL_GPIO_Init+0x1c2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a43      	ldr	r2, [pc, #268]	; (8006098 <HAL_GPIO_Init+0x2c4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d101      	bne.n	8005f92 <HAL_GPIO_Init+0x1be>
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e006      	b.n	8005fa0 <HAL_GPIO_Init+0x1cc>
 8005f92:	2305      	movs	r3, #5
 8005f94:	e004      	b.n	8005fa0 <HAL_GPIO_Init+0x1cc>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e002      	b.n	8005fa0 <HAL_GPIO_Init+0x1cc>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <HAL_GPIO_Init+0x1cc>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	2103      	movs	r1, #3
 8005fa4:	400a      	ands	r2, r1
 8005fa6:	00d2      	lsls	r2, r2, #3
 8005fa8:	4093      	lsls	r3, r2
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005fb0:	4936      	ldr	r1, [pc, #216]	; (800608c <HAL_GPIO_Init+0x2b8>)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	089b      	lsrs	r3, r3, #2
 8005fb6:	3318      	adds	r3, #24
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005fbe:	4a33      	ldr	r2, [pc, #204]	; (800608c <HAL_GPIO_Init+0x2b8>)
 8005fc0:	2380      	movs	r3, #128	; 0x80
 8005fc2:	58d3      	ldr	r3, [r2, r3]
 8005fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	43da      	mvns	r2, r3
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	2380      	movs	r3, #128	; 0x80
 8005fd6:	025b      	lsls	r3, r3, #9
 8005fd8:	4013      	ands	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005fe4:	4929      	ldr	r1, [pc, #164]	; (800608c <HAL_GPIO_Init+0x2b8>)
 8005fe6:	2280      	movs	r2, #128	; 0x80
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8005fec:	4a27      	ldr	r2, [pc, #156]	; (800608c <HAL_GPIO_Init+0x2b8>)
 8005fee:	2384      	movs	r3, #132	; 0x84
 8005ff0:	58d3      	ldr	r3, [r2, r3]
 8005ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	43da      	mvns	r2, r3
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	2380      	movs	r3, #128	; 0x80
 8006004:	029b      	lsls	r3, r3, #10
 8006006:	4013      	ands	r3, r2
 8006008:	d003      	beq.n	8006012 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006012:	491e      	ldr	r1, [pc, #120]	; (800608c <HAL_GPIO_Init+0x2b8>)
 8006014:	2284      	movs	r2, #132	; 0x84
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800601a:	4b1c      	ldr	r3, [pc, #112]	; (800608c <HAL_GPIO_Init+0x2b8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	43da      	mvns	r2, r3
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4013      	ands	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	2380      	movs	r3, #128	; 0x80
 8006030:	035b      	lsls	r3, r3, #13
 8006032:	4013      	ands	r3, r2
 8006034:	d003      	beq.n	800603e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800603e:	4b13      	ldr	r3, [pc, #76]	; (800608c <HAL_GPIO_Init+0x2b8>)
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006044:	4b11      	ldr	r3, [pc, #68]	; (800608c <HAL_GPIO_Init+0x2b8>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	43da      	mvns	r2, r3
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	4013      	ands	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	039b      	lsls	r3, r3, #14
 800605c:	4013      	ands	r3, r2
 800605e:	d003      	beq.n	8006068 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006068:	4b08      	ldr	r3, [pc, #32]	; (800608c <HAL_GPIO_Init+0x2b8>)
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	3301      	adds	r3, #1
 8006072:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	40da      	lsrs	r2, r3
 800607c:	1e13      	subs	r3, r2, #0
 800607e:	d000      	beq.n	8006082 <HAL_GPIO_Init+0x2ae>
 8006080:	e6b0      	b.n	8005de4 <HAL_GPIO_Init+0x10>
  }
}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	46bd      	mov	sp, r7
 8006086:	b006      	add	sp, #24
 8006088:	bd80      	pop	{r7, pc}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	40021800 	.word	0x40021800
 8006090:	50000400 	.word	0x50000400
 8006094:	50000800 	.word	0x50000800
 8006098:	50000c00 	.word	0x50000c00

0800609c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	0008      	movs	r0, r1
 80060a6:	0011      	movs	r1, r2
 80060a8:	1cbb      	adds	r3, r7, #2
 80060aa:	1c02      	adds	r2, r0, #0
 80060ac:	801a      	strh	r2, [r3, #0]
 80060ae:	1c7b      	adds	r3, r7, #1
 80060b0:	1c0a      	adds	r2, r1, #0
 80060b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060b4:	1c7b      	adds	r3, r7, #1
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d004      	beq.n	80060c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060bc:	1cbb      	adds	r3, r7, #2
 80060be:	881a      	ldrh	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060c4:	e003      	b.n	80060ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060c6:	1cbb      	adds	r3, r7, #2
 80060c8:	881a      	ldrh	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	46bd      	mov	sp, r7
 80060d2:	b002      	add	sp, #8
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	000a      	movs	r2, r1
 80060e0:	1cbb      	adds	r3, r7, #2
 80060e2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	1cba      	adds	r2, r7, #2
 80060ea:	8812      	ldrh	r2, [r2, #0]
 80060ec:	4013      	ands	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060f0:	1cbb      	adds	r3, r7, #2
 80060f2:	881a      	ldrh	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80060f8:	e003      	b.n	8006102 <HAL_GPIO_TogglePin+0x2c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060fa:	1cbb      	adds	r3, r7, #2
 80060fc:	881a      	ldrh	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	619a      	str	r2, [r3, #24]
}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	46bd      	mov	sp, r7
 8006106:	b002      	add	sp, #8
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	0002      	movs	r2, r0
 8006114:	1dbb      	adds	r3, r7, #6
 8006116:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006118:	4b10      	ldr	r3, [pc, #64]	; (800615c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	1dba      	adds	r2, r7, #6
 800611e:	8812      	ldrh	r2, [r2, #0]
 8006120:	4013      	ands	r3, r2
 8006122:	d008      	beq.n	8006136 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006124:	4b0d      	ldr	r3, [pc, #52]	; (800615c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006126:	1dba      	adds	r2, r7, #6
 8006128:	8812      	ldrh	r2, [r2, #0]
 800612a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800612c:	1dbb      	adds	r3, r7, #6
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	0018      	movs	r0, r3
 8006132:	f7ff fb51 	bl	80057d8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8006136:	4b09      	ldr	r3, [pc, #36]	; (800615c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	1dba      	adds	r2, r7, #6
 800613c:	8812      	ldrh	r2, [r2, #0]
 800613e:	4013      	ands	r3, r2
 8006140:	d008      	beq.n	8006154 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006142:	4b06      	ldr	r3, [pc, #24]	; (800615c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006144:	1dba      	adds	r2, r7, #6
 8006146:	8812      	ldrh	r2, [r2, #0]
 8006148:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800614a:	1dbb      	adds	r3, r7, #6
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	0018      	movs	r0, r3
 8006150:	f7ff fb2c 	bl	80057ac <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006154:	46c0      	nop			; (mov r8, r8)
 8006156:	46bd      	mov	sp, r7
 8006158:	b002      	add	sp, #8
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40021800 	.word	0x40021800

08006160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e082      	b.n	8006278 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2241      	movs	r2, #65	; 0x41
 8006176:	5c9b      	ldrb	r3, [r3, r2]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d107      	bne.n	800618e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2240      	movs	r2, #64	; 0x40
 8006182:	2100      	movs	r1, #0
 8006184:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	0018      	movs	r0, r3
 800618a:	f7ff fb79 	bl	8005880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2241      	movs	r2, #65	; 0x41
 8006192:	2124      	movs	r1, #36	; 0x24
 8006194:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2101      	movs	r1, #1
 80061a2:	438a      	bics	r2, r1
 80061a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4934      	ldr	r1, [pc, #208]	; (8006280 <HAL_I2C_Init+0x120>)
 80061b0:	400a      	ands	r2, r1
 80061b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4931      	ldr	r1, [pc, #196]	; (8006284 <HAL_I2C_Init+0x124>)
 80061c0:	400a      	ands	r2, r1
 80061c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d108      	bne.n	80061de <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2180      	movs	r1, #128	; 0x80
 80061d6:	0209      	lsls	r1, r1, #8
 80061d8:	430a      	orrs	r2, r1
 80061da:	609a      	str	r2, [r3, #8]
 80061dc:	e007      	b.n	80061ee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2184      	movs	r1, #132	; 0x84
 80061e8:	0209      	lsls	r1, r1, #8
 80061ea:	430a      	orrs	r2, r1
 80061ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d104      	bne.n	8006200 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2280      	movs	r2, #128	; 0x80
 80061fc:	0112      	lsls	r2, r2, #4
 80061fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	491f      	ldr	r1, [pc, #124]	; (8006288 <HAL_I2C_Init+0x128>)
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	491a      	ldr	r1, [pc, #104]	; (8006284 <HAL_I2C_Init+0x124>)
 800621c:	400a      	ands	r2, r1
 800621e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	431a      	orrs	r2, r3
 800622a:	0011      	movs	r1, r2
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	021a      	lsls	r2, r3, #8
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69d9      	ldr	r1, [r3, #28]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1a      	ldr	r2, [r3, #32]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2101      	movs	r1, #1
 8006256:	430a      	orrs	r2, r1
 8006258:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2241      	movs	r2, #65	; 0x41
 8006264:	2120      	movs	r1, #32
 8006266:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2242      	movs	r2, #66	; 0x42
 8006272:	2100      	movs	r1, #0
 8006274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	0018      	movs	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	b002      	add	sp, #8
 800627e:	bd80      	pop	{r7, pc}
 8006280:	f0ffffff 	.word	0xf0ffffff
 8006284:	ffff7fff 	.word	0xffff7fff
 8006288:	02008000 	.word	0x02008000

0800628c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800628c:	b590      	push	{r4, r7, lr}
 800628e:	b089      	sub	sp, #36	; 0x24
 8006290:	af02      	add	r7, sp, #8
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	000c      	movs	r4, r1
 8006296:	0010      	movs	r0, r2
 8006298:	0019      	movs	r1, r3
 800629a:	230a      	movs	r3, #10
 800629c:	18fb      	adds	r3, r7, r3
 800629e:	1c22      	adds	r2, r4, #0
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	2308      	movs	r3, #8
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	1c02      	adds	r2, r0, #0
 80062a8:	801a      	strh	r2, [r3, #0]
 80062aa:	1dbb      	adds	r3, r7, #6
 80062ac:	1c0a      	adds	r2, r1, #0
 80062ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2241      	movs	r2, #65	; 0x41
 80062b4:	5c9b      	ldrb	r3, [r3, r2]
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d000      	beq.n	80062be <HAL_I2C_Mem_Write+0x32>
 80062bc:	e10c      	b.n	80064d8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <HAL_I2C_Mem_Write+0x42>
 80062c4:	232c      	movs	r3, #44	; 0x2c
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d105      	bne.n	80062da <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2280      	movs	r2, #128	; 0x80
 80062d2:	0092      	lsls	r2, r2, #2
 80062d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e0ff      	b.n	80064da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2240      	movs	r2, #64	; 0x40
 80062de:	5c9b      	ldrb	r3, [r3, r2]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_I2C_Mem_Write+0x5c>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e0f8      	b.n	80064da <HAL_I2C_Mem_Write+0x24e>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2240      	movs	r2, #64	; 0x40
 80062ec:	2101      	movs	r1, #1
 80062ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062f0:	f7ff fc66 	bl	8005bc0 <HAL_GetTick>
 80062f4:	0003      	movs	r3, r0
 80062f6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062f8:	2380      	movs	r3, #128	; 0x80
 80062fa:	0219      	lsls	r1, r3, #8
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	2319      	movs	r3, #25
 8006304:	2201      	movs	r2, #1
 8006306:	f000 fb0b 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 800630a:	1e03      	subs	r3, r0, #0
 800630c:	d001      	beq.n	8006312 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e0e3      	b.n	80064da <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2241      	movs	r2, #65	; 0x41
 8006316:	2121      	movs	r1, #33	; 0x21
 8006318:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2242      	movs	r2, #66	; 0x42
 800631e:	2140      	movs	r1, #64	; 0x40
 8006320:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800632c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	222c      	movs	r2, #44	; 0x2c
 8006332:	18ba      	adds	r2, r7, r2
 8006334:	8812      	ldrh	r2, [r2, #0]
 8006336:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800633e:	1dbb      	adds	r3, r7, #6
 8006340:	881c      	ldrh	r4, [r3, #0]
 8006342:	2308      	movs	r3, #8
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	881a      	ldrh	r2, [r3, #0]
 8006348:	230a      	movs	r3, #10
 800634a:	18fb      	adds	r3, r7, r3
 800634c:	8819      	ldrh	r1, [r3, #0]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	0023      	movs	r3, r4
 800635a:	f000 f9f9 	bl	8006750 <I2C_RequestMemoryWrite>
 800635e:	1e03      	subs	r3, r0, #0
 8006360:	d005      	beq.n	800636e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2240      	movs	r2, #64	; 0x40
 8006366:	2100      	movs	r1, #0
 8006368:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e0b5      	b.n	80064da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006372:	b29b      	uxth	r3, r3
 8006374:	2bff      	cmp	r3, #255	; 0xff
 8006376:	d911      	bls.n	800639c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	22ff      	movs	r2, #255	; 0xff
 800637c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006382:	b2da      	uxtb	r2, r3
 8006384:	2380      	movs	r3, #128	; 0x80
 8006386:	045c      	lsls	r4, r3, #17
 8006388:	230a      	movs	r3, #10
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	8819      	ldrh	r1, [r3, #0]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	2300      	movs	r3, #0
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	0023      	movs	r3, r4
 8006396:	f000 fbe3 	bl	8006b60 <I2C_TransferConfig>
 800639a:	e012      	b.n	80063c2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	2380      	movs	r3, #128	; 0x80
 80063ae:	049c      	lsls	r4, r3, #18
 80063b0:	230a      	movs	r3, #10
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	8819      	ldrh	r1, [r3, #0]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	2300      	movs	r3, #0
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	0023      	movs	r3, r4
 80063be:	f000 fbcf 	bl	8006b60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	0018      	movs	r0, r3
 80063ca:	f000 fae8 	bl	800699e <I2C_WaitOnTXISFlagUntilTimeout>
 80063ce:	1e03      	subs	r3, r0, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e081      	b.n	80064da <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	781a      	ldrb	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d03a      	beq.n	8006486 <HAL_I2C_Mem_Write+0x1fa>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006414:	2b00      	cmp	r3, #0
 8006416:	d136      	bne.n	8006486 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	0013      	movs	r3, r2
 8006422:	2200      	movs	r2, #0
 8006424:	2180      	movs	r1, #128	; 0x80
 8006426:	f000 fa7b 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 800642a:	1e03      	subs	r3, r0, #0
 800642c:	d001      	beq.n	8006432 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e053      	b.n	80064da <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	2bff      	cmp	r3, #255	; 0xff
 800643a:	d911      	bls.n	8006460 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	22ff      	movs	r2, #255	; 0xff
 8006440:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006446:	b2da      	uxtb	r2, r3
 8006448:	2380      	movs	r3, #128	; 0x80
 800644a:	045c      	lsls	r4, r3, #17
 800644c:	230a      	movs	r3, #10
 800644e:	18fb      	adds	r3, r7, r3
 8006450:	8819      	ldrh	r1, [r3, #0]
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	2300      	movs	r3, #0
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	0023      	movs	r3, r4
 800645a:	f000 fb81 	bl	8006b60 <I2C_TransferConfig>
 800645e:	e012      	b.n	8006486 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646e:	b2da      	uxtb	r2, r3
 8006470:	2380      	movs	r3, #128	; 0x80
 8006472:	049c      	lsls	r4, r3, #18
 8006474:	230a      	movs	r3, #10
 8006476:	18fb      	adds	r3, r7, r3
 8006478:	8819      	ldrh	r1, [r3, #0]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	2300      	movs	r3, #0
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	0023      	movs	r3, r4
 8006482:	f000 fb6d 	bl	8006b60 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648a:	b29b      	uxth	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d198      	bne.n	80063c2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	0018      	movs	r0, r3
 8006498:	f000 fac0 	bl	8006a1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800649c:	1e03      	subs	r3, r0, #0
 800649e:	d001      	beq.n	80064a4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e01a      	b.n	80064da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2220      	movs	r2, #32
 80064aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	490b      	ldr	r1, [pc, #44]	; (80064e4 <HAL_I2C_Mem_Write+0x258>)
 80064b8:	400a      	ands	r2, r1
 80064ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2241      	movs	r2, #65	; 0x41
 80064c0:	2120      	movs	r1, #32
 80064c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2242      	movs	r2, #66	; 0x42
 80064c8:	2100      	movs	r1, #0
 80064ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2240      	movs	r2, #64	; 0x40
 80064d0:	2100      	movs	r1, #0
 80064d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	e000      	b.n	80064da <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80064d8:	2302      	movs	r3, #2
  }
}
 80064da:	0018      	movs	r0, r3
 80064dc:	46bd      	mov	sp, r7
 80064de:	b007      	add	sp, #28
 80064e0:	bd90      	pop	{r4, r7, pc}
 80064e2:	46c0      	nop			; (mov r8, r8)
 80064e4:	fe00e800 	.word	0xfe00e800

080064e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e8:	b590      	push	{r4, r7, lr}
 80064ea:	b089      	sub	sp, #36	; 0x24
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	000c      	movs	r4, r1
 80064f2:	0010      	movs	r0, r2
 80064f4:	0019      	movs	r1, r3
 80064f6:	230a      	movs	r3, #10
 80064f8:	18fb      	adds	r3, r7, r3
 80064fa:	1c22      	adds	r2, r4, #0
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	2308      	movs	r3, #8
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	1c02      	adds	r2, r0, #0
 8006504:	801a      	strh	r2, [r3, #0]
 8006506:	1dbb      	adds	r3, r7, #6
 8006508:	1c0a      	adds	r2, r1, #0
 800650a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2241      	movs	r2, #65	; 0x41
 8006510:	5c9b      	ldrb	r3, [r3, r2]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b20      	cmp	r3, #32
 8006516:	d000      	beq.n	800651a <HAL_I2C_Mem_Read+0x32>
 8006518:	e110      	b.n	800673c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	2b00      	cmp	r3, #0
 800651e:	d004      	beq.n	800652a <HAL_I2C_Mem_Read+0x42>
 8006520:	232c      	movs	r3, #44	; 0x2c
 8006522:	18fb      	adds	r3, r7, r3
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2280      	movs	r2, #128	; 0x80
 800652e:	0092      	lsls	r2, r2, #2
 8006530:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e103      	b.n	800673e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2240      	movs	r2, #64	; 0x40
 800653a:	5c9b      	ldrb	r3, [r3, r2]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_I2C_Mem_Read+0x5c>
 8006540:	2302      	movs	r3, #2
 8006542:	e0fc      	b.n	800673e <HAL_I2C_Mem_Read+0x256>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2240      	movs	r2, #64	; 0x40
 8006548:	2101      	movs	r1, #1
 800654a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800654c:	f7ff fb38 	bl	8005bc0 <HAL_GetTick>
 8006550:	0003      	movs	r3, r0
 8006552:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006554:	2380      	movs	r3, #128	; 0x80
 8006556:	0219      	lsls	r1, r3, #8
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	2319      	movs	r3, #25
 8006560:	2201      	movs	r2, #1
 8006562:	f000 f9dd 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006566:	1e03      	subs	r3, r0, #0
 8006568:	d001      	beq.n	800656e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e0e7      	b.n	800673e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2241      	movs	r2, #65	; 0x41
 8006572:	2122      	movs	r1, #34	; 0x22
 8006574:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2242      	movs	r2, #66	; 0x42
 800657a:	2140      	movs	r1, #64	; 0x40
 800657c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	222c      	movs	r2, #44	; 0x2c
 800658e:	18ba      	adds	r2, r7, r2
 8006590:	8812      	ldrh	r2, [r2, #0]
 8006592:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800659a:	1dbb      	adds	r3, r7, #6
 800659c:	881c      	ldrh	r4, [r3, #0]
 800659e:	2308      	movs	r3, #8
 80065a0:	18fb      	adds	r3, r7, r3
 80065a2:	881a      	ldrh	r2, [r3, #0]
 80065a4:	230a      	movs	r3, #10
 80065a6:	18fb      	adds	r3, r7, r3
 80065a8:	8819      	ldrh	r1, [r3, #0]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	0023      	movs	r3, r4
 80065b6:	f000 f92f 	bl	8006818 <I2C_RequestMemoryRead>
 80065ba:	1e03      	subs	r3, r0, #0
 80065bc:	d005      	beq.n	80065ca <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2240      	movs	r2, #64	; 0x40
 80065c2:	2100      	movs	r1, #0
 80065c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e0b9      	b.n	800673e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2bff      	cmp	r3, #255	; 0xff
 80065d2:	d911      	bls.n	80065f8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	22ff      	movs	r2, #255	; 0xff
 80065d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	2380      	movs	r3, #128	; 0x80
 80065e2:	045c      	lsls	r4, r3, #17
 80065e4:	230a      	movs	r3, #10
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	8819      	ldrh	r1, [r3, #0]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	4b56      	ldr	r3, [pc, #344]	; (8006748 <HAL_I2C_Mem_Read+0x260>)
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	0023      	movs	r3, r4
 80065f2:	f000 fab5 	bl	8006b60 <I2C_TransferConfig>
 80065f6:	e012      	b.n	800661e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006606:	b2da      	uxtb	r2, r3
 8006608:	2380      	movs	r3, #128	; 0x80
 800660a:	049c      	lsls	r4, r3, #18
 800660c:	230a      	movs	r3, #10
 800660e:	18fb      	adds	r3, r7, r3
 8006610:	8819      	ldrh	r1, [r3, #0]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	4b4c      	ldr	r3, [pc, #304]	; (8006748 <HAL_I2C_Mem_Read+0x260>)
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	0023      	movs	r3, r4
 800661a:	f000 faa1 	bl	8006b60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800661e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	0013      	movs	r3, r2
 8006628:	2200      	movs	r2, #0
 800662a:	2104      	movs	r1, #4
 800662c:	f000 f978 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006630:	1e03      	subs	r3, r0, #0
 8006632:	d001      	beq.n	8006638 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e082      	b.n	800673e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666e:	b29b      	uxth	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d03a      	beq.n	80066ea <HAL_I2C_Mem_Read+0x202>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006678:	2b00      	cmp	r3, #0
 800667a:	d136      	bne.n	80066ea <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800667c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	0013      	movs	r3, r2
 8006686:	2200      	movs	r2, #0
 8006688:	2180      	movs	r1, #128	; 0x80
 800668a:	f000 f949 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 800668e:	1e03      	subs	r3, r0, #0
 8006690:	d001      	beq.n	8006696 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e053      	b.n	800673e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	2bff      	cmp	r3, #255	; 0xff
 800669e:	d911      	bls.n	80066c4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	22ff      	movs	r2, #255	; 0xff
 80066a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	2380      	movs	r3, #128	; 0x80
 80066ae:	045c      	lsls	r4, r3, #17
 80066b0:	230a      	movs	r3, #10
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	8819      	ldrh	r1, [r3, #0]
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	2300      	movs	r3, #0
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	0023      	movs	r3, r4
 80066be:	f000 fa4f 	bl	8006b60 <I2C_TransferConfig>
 80066c2:	e012      	b.n	80066ea <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	049c      	lsls	r4, r3, #18
 80066d8:	230a      	movs	r3, #10
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	8819      	ldrh	r1, [r3, #0]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	2300      	movs	r3, #0
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	0023      	movs	r3, r4
 80066e6:	f000 fa3b 	bl	8006b60 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d194      	bne.n	800661e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	0018      	movs	r0, r3
 80066fc:	f000 f98e 	bl	8006a1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006700:	1e03      	subs	r3, r0, #0
 8006702:	d001      	beq.n	8006708 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e01a      	b.n	800673e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2220      	movs	r2, #32
 800670e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	490c      	ldr	r1, [pc, #48]	; (800674c <HAL_I2C_Mem_Read+0x264>)
 800671c:	400a      	ands	r2, r1
 800671e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2241      	movs	r2, #65	; 0x41
 8006724:	2120      	movs	r1, #32
 8006726:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2242      	movs	r2, #66	; 0x42
 800672c:	2100      	movs	r1, #0
 800672e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2240      	movs	r2, #64	; 0x40
 8006734:	2100      	movs	r1, #0
 8006736:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e000      	b.n	800673e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800673c:	2302      	movs	r3, #2
  }
}
 800673e:	0018      	movs	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	b007      	add	sp, #28
 8006744:	bd90      	pop	{r4, r7, pc}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	80002400 	.word	0x80002400
 800674c:	fe00e800 	.word	0xfe00e800

08006750 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006750:	b5b0      	push	{r4, r5, r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af02      	add	r7, sp, #8
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	000c      	movs	r4, r1
 800675a:	0010      	movs	r0, r2
 800675c:	0019      	movs	r1, r3
 800675e:	250a      	movs	r5, #10
 8006760:	197b      	adds	r3, r7, r5
 8006762:	1c22      	adds	r2, r4, #0
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	2308      	movs	r3, #8
 8006768:	18fb      	adds	r3, r7, r3
 800676a:	1c02      	adds	r2, r0, #0
 800676c:	801a      	strh	r2, [r3, #0]
 800676e:	1dbb      	adds	r3, r7, #6
 8006770:	1c0a      	adds	r2, r1, #0
 8006772:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006774:	1dbb      	adds	r3, r7, #6
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b2da      	uxtb	r2, r3
 800677a:	2380      	movs	r3, #128	; 0x80
 800677c:	045c      	lsls	r4, r3, #17
 800677e:	197b      	adds	r3, r7, r5
 8006780:	8819      	ldrh	r1, [r3, #0]
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	4b23      	ldr	r3, [pc, #140]	; (8006814 <I2C_RequestMemoryWrite+0xc4>)
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	0023      	movs	r3, r4
 800678a:	f000 f9e9 	bl	8006b60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800678e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006790:	6a39      	ldr	r1, [r7, #32]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	0018      	movs	r0, r3
 8006796:	f000 f902 	bl	800699e <I2C_WaitOnTXISFlagUntilTimeout>
 800679a:	1e03      	subs	r3, r0, #0
 800679c:	d001      	beq.n	80067a2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e033      	b.n	800680a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067a2:	1dbb      	adds	r3, r7, #6
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d107      	bne.n	80067ba <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067aa:	2308      	movs	r3, #8
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	629a      	str	r2, [r3, #40]	; 0x28
 80067b8:	e019      	b.n	80067ee <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067ba:	2308      	movs	r3, #8
 80067bc:	18fb      	adds	r3, r7, r3
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	0a1b      	lsrs	r3, r3, #8
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ce:	6a39      	ldr	r1, [r7, #32]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	0018      	movs	r0, r3
 80067d4:	f000 f8e3 	bl	800699e <I2C_WaitOnTXISFlagUntilTimeout>
 80067d8:	1e03      	subs	r3, r0, #0
 80067da:	d001      	beq.n	80067e0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e014      	b.n	800680a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067e0:	2308      	movs	r3, #8
 80067e2:	18fb      	adds	r3, r7, r3
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80067ee:	6a3a      	ldr	r2, [r7, #32]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	0013      	movs	r3, r2
 80067f8:	2200      	movs	r2, #0
 80067fa:	2180      	movs	r1, #128	; 0x80
 80067fc:	f000 f890 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006800:	1e03      	subs	r3, r0, #0
 8006802:	d001      	beq.n	8006808 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	0018      	movs	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	b004      	add	sp, #16
 8006810:	bdb0      	pop	{r4, r5, r7, pc}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	80002000 	.word	0x80002000

08006818 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b5b0      	push	{r4, r5, r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	000c      	movs	r4, r1
 8006822:	0010      	movs	r0, r2
 8006824:	0019      	movs	r1, r3
 8006826:	250a      	movs	r5, #10
 8006828:	197b      	adds	r3, r7, r5
 800682a:	1c22      	adds	r2, r4, #0
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	2308      	movs	r3, #8
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	1c02      	adds	r2, r0, #0
 8006834:	801a      	strh	r2, [r3, #0]
 8006836:	1dbb      	adds	r3, r7, #6
 8006838:	1c0a      	adds	r2, r1, #0
 800683a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800683c:	1dbb      	adds	r3, r7, #6
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b2da      	uxtb	r2, r3
 8006842:	197b      	adds	r3, r7, r5
 8006844:	8819      	ldrh	r1, [r3, #0]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	4b23      	ldr	r3, [pc, #140]	; (80068d8 <I2C_RequestMemoryRead+0xc0>)
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	2300      	movs	r3, #0
 800684e:	f000 f987 	bl	8006b60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006854:	6a39      	ldr	r1, [r7, #32]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	0018      	movs	r0, r3
 800685a:	f000 f8a0 	bl	800699e <I2C_WaitOnTXISFlagUntilTimeout>
 800685e:	1e03      	subs	r3, r0, #0
 8006860:	d001      	beq.n	8006866 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e033      	b.n	80068ce <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006866:	1dbb      	adds	r3, r7, #6
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d107      	bne.n	800687e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800686e:	2308      	movs	r3, #8
 8006870:	18fb      	adds	r3, r7, r3
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b2da      	uxtb	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28
 800687c:	e019      	b.n	80068b2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800687e:	2308      	movs	r3, #8
 8006880:	18fb      	adds	r3, r7, r3
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	0a1b      	lsrs	r3, r3, #8
 8006886:	b29b      	uxth	r3, r3
 8006888:	b2da      	uxtb	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006892:	6a39      	ldr	r1, [r7, #32]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	0018      	movs	r0, r3
 8006898:	f000 f881 	bl	800699e <I2C_WaitOnTXISFlagUntilTimeout>
 800689c:	1e03      	subs	r3, r0, #0
 800689e:	d001      	beq.n	80068a4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e014      	b.n	80068ce <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068a4:	2308      	movs	r3, #8
 80068a6:	18fb      	adds	r3, r7, r3
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80068b2:	6a3a      	ldr	r2, [r7, #32]
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	0013      	movs	r3, r2
 80068bc:	2200      	movs	r2, #0
 80068be:	2140      	movs	r1, #64	; 0x40
 80068c0:	f000 f82e 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80068c4:	1e03      	subs	r3, r0, #0
 80068c6:	d001      	beq.n	80068cc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	0018      	movs	r0, r3
 80068d0:	46bd      	mov	sp, r7
 80068d2:	b004      	add	sp, #16
 80068d4:	bdb0      	pop	{r4, r5, r7, pc}
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	80002000 	.word	0x80002000

080068dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	2202      	movs	r2, #2
 80068ec:	4013      	ands	r3, r2
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d103      	bne.n	80068fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2200      	movs	r2, #0
 80068f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	2201      	movs	r2, #1
 8006902:	4013      	ands	r3, r2
 8006904:	2b01      	cmp	r3, #1
 8006906:	d007      	beq.n	8006918 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2101      	movs	r1, #1
 8006914:	430a      	orrs	r2, r1
 8006916:	619a      	str	r2, [r3, #24]
  }
}
 8006918:	46c0      	nop			; (mov r8, r8)
 800691a:	46bd      	mov	sp, r7
 800691c:	b002      	add	sp, #8
 800691e:	bd80      	pop	{r7, pc}

08006920 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	1dfb      	adds	r3, r7, #7
 800692e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006930:	e021      	b.n	8006976 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	3301      	adds	r3, #1
 8006936:	d01e      	beq.n	8006976 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006938:	f7ff f942 	bl	8005bc0 <HAL_GetTick>
 800693c:	0002      	movs	r2, r0
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d302      	bcc.n	800694e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d113      	bne.n	8006976 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006952:	2220      	movs	r2, #32
 8006954:	431a      	orrs	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2241      	movs	r2, #65	; 0x41
 800695e:	2120      	movs	r1, #32
 8006960:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2242      	movs	r2, #66	; 0x42
 8006966:	2100      	movs	r1, #0
 8006968:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2240      	movs	r2, #64	; 0x40
 800696e:	2100      	movs	r1, #0
 8006970:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e00f      	b.n	8006996 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	4013      	ands	r3, r2
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	425a      	negs	r2, r3
 8006986:	4153      	adcs	r3, r2
 8006988:	b2db      	uxtb	r3, r3
 800698a:	001a      	movs	r2, r3
 800698c:	1dfb      	adds	r3, r7, #7
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d0ce      	beq.n	8006932 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	0018      	movs	r0, r3
 8006998:	46bd      	mov	sp, r7
 800699a:	b004      	add	sp, #16
 800699c:	bd80      	pop	{r7, pc}

0800699e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069aa:	e02b      	b.n	8006a04 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	0018      	movs	r0, r3
 80069b4:	f000 f86e 	bl	8006a94 <I2C_IsAcknowledgeFailed>
 80069b8:	1e03      	subs	r3, r0, #0
 80069ba:	d001      	beq.n	80069c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e029      	b.n	8006a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	3301      	adds	r3, #1
 80069c4:	d01e      	beq.n	8006a04 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c6:	f7ff f8fb 	bl	8005bc0 <HAL_GetTick>
 80069ca:	0002      	movs	r2, r0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d302      	bcc.n	80069dc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d113      	bne.n	8006a04 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e0:	2220      	movs	r2, #32
 80069e2:	431a      	orrs	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2241      	movs	r2, #65	; 0x41
 80069ec:	2120      	movs	r1, #32
 80069ee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2242      	movs	r2, #66	; 0x42
 80069f4:	2100      	movs	r1, #0
 80069f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2240      	movs	r2, #64	; 0x40
 80069fc:	2100      	movs	r1, #0
 80069fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e007      	b.n	8006a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d1cc      	bne.n	80069ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	0018      	movs	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b004      	add	sp, #16
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a28:	e028      	b.n	8006a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	0018      	movs	r0, r3
 8006a32:	f000 f82f 	bl	8006a94 <I2C_IsAcknowledgeFailed>
 8006a36:	1e03      	subs	r3, r0, #0
 8006a38:	d001      	beq.n	8006a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e026      	b.n	8006a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3e:	f7ff f8bf 	bl	8005bc0 <HAL_GetTick>
 8006a42:	0002      	movs	r2, r0
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d302      	bcc.n	8006a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d113      	bne.n	8006a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a58:	2220      	movs	r2, #32
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2241      	movs	r2, #65	; 0x41
 8006a64:	2120      	movs	r1, #32
 8006a66:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2242      	movs	r2, #66	; 0x42
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2240      	movs	r2, #64	; 0x40
 8006a74:	2100      	movs	r1, #0
 8006a76:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e007      	b.n	8006a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	2220      	movs	r2, #32
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d1cf      	bne.n	8006a2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b004      	add	sp, #16
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b10      	cmp	r3, #16
 8006aac:	d151      	bne.n	8006b52 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006aae:	e021      	b.n	8006af4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	d01e      	beq.n	8006af4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab6:	f7ff f883 	bl	8005bc0 <HAL_GetTick>
 8006aba:	0002      	movs	r2, r0
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d302      	bcc.n	8006acc <I2C_IsAcknowledgeFailed+0x38>
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d113      	bne.n	8006af4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2241      	movs	r2, #65	; 0x41
 8006adc:	2120      	movs	r1, #32
 8006ade:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2242      	movs	r2, #66	; 0x42
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2240      	movs	r2, #64	; 0x40
 8006aec:	2100      	movs	r1, #0
 8006aee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e02f      	b.n	8006b54 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2220      	movs	r2, #32
 8006afc:	4013      	ands	r3, r2
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d1d6      	bne.n	8006ab0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2210      	movs	r2, #16
 8006b08:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	0018      	movs	r0, r3
 8006b16:	f7ff fee1 	bl	80068dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	490d      	ldr	r1, [pc, #52]	; (8006b5c <I2C_IsAcknowledgeFailed+0xc8>)
 8006b26:	400a      	ands	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	2204      	movs	r2, #4
 8006b30:	431a      	orrs	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2241      	movs	r2, #65	; 0x41
 8006b3a:	2120      	movs	r1, #32
 8006b3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2242      	movs	r2, #66	; 0x42
 8006b42:	2100      	movs	r1, #0
 8006b44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2240      	movs	r2, #64	; 0x40
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	0018      	movs	r0, r3
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b004      	add	sp, #16
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	fe00e800 	.word	0xfe00e800

08006b60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	0008      	movs	r0, r1
 8006b6a:	0011      	movs	r1, r2
 8006b6c:	607b      	str	r3, [r7, #4]
 8006b6e:	240a      	movs	r4, #10
 8006b70:	193b      	adds	r3, r7, r4
 8006b72:	1c02      	adds	r2, r0, #0
 8006b74:	801a      	strh	r2, [r3, #0]
 8006b76:	2009      	movs	r0, #9
 8006b78:	183b      	adds	r3, r7, r0
 8006b7a:	1c0a      	adds	r2, r1, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	6a3a      	ldr	r2, [r7, #32]
 8006b86:	0d51      	lsrs	r1, r2, #21
 8006b88:	2280      	movs	r2, #128	; 0x80
 8006b8a:	00d2      	lsls	r2, r2, #3
 8006b8c:	400a      	ands	r2, r1
 8006b8e:	490e      	ldr	r1, [pc, #56]	; (8006bc8 <I2C_TransferConfig+0x68>)
 8006b90:	430a      	orrs	r2, r1
 8006b92:	43d2      	mvns	r2, r2
 8006b94:	401a      	ands	r2, r3
 8006b96:	0011      	movs	r1, r2
 8006b98:	193b      	adds	r3, r7, r4
 8006b9a:	881b      	ldrh	r3, [r3, #0]
 8006b9c:	059b      	lsls	r3, r3, #22
 8006b9e:	0d9a      	lsrs	r2, r3, #22
 8006ba0:	183b      	adds	r3, r7, r0
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	0418      	lsls	r0, r3, #16
 8006ba6:	23ff      	movs	r3, #255	; 0xff
 8006ba8:	041b      	lsls	r3, r3, #16
 8006baa:	4003      	ands	r3, r0
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006bbe:	46c0      	nop			; (mov r8, r8)
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b005      	add	sp, #20
 8006bc4:	bd90      	pop	{r4, r7, pc}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	03ff63ff 	.word	0x03ff63ff

08006bcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2241      	movs	r2, #65	; 0x41
 8006bda:	5c9b      	ldrb	r3, [r3, r2]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d138      	bne.n	8006c54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2240      	movs	r2, #64	; 0x40
 8006be6:	5c9b      	ldrb	r3, [r3, r2]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e032      	b.n	8006c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2240      	movs	r2, #64	; 0x40
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2241      	movs	r2, #65	; 0x41
 8006bfc:	2124      	movs	r1, #36	; 0x24
 8006bfe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	438a      	bics	r2, r1
 8006c0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4911      	ldr	r1, [pc, #68]	; (8006c60 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006c1c:	400a      	ands	r2, r1
 8006c1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6819      	ldr	r1, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2241      	movs	r2, #65	; 0x41
 8006c44:	2120      	movs	r1, #32
 8006c46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2240      	movs	r2, #64	; 0x40
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e000      	b.n	8006c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c54:	2302      	movs	r3, #2
  }
}
 8006c56:	0018      	movs	r0, r3
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	b002      	add	sp, #8
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	46c0      	nop			; (mov r8, r8)
 8006c60:	ffffefff 	.word	0xffffefff

08006c64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2241      	movs	r2, #65	; 0x41
 8006c72:	5c9b      	ldrb	r3, [r3, r2]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b20      	cmp	r3, #32
 8006c78:	d139      	bne.n	8006cee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2240      	movs	r2, #64	; 0x40
 8006c7e:	5c9b      	ldrb	r3, [r3, r2]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e033      	b.n	8006cf0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2240      	movs	r2, #64	; 0x40
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2241      	movs	r2, #65	; 0x41
 8006c94:	2124      	movs	r1, #36	; 0x24
 8006c96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	438a      	bics	r2, r1
 8006ca6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4a11      	ldr	r2, [pc, #68]	; (8006cf8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2241      	movs	r2, #65	; 0x41
 8006cde:	2120      	movs	r1, #32
 8006ce0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2240      	movs	r2, #64	; 0x40
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	e000      	b.n	8006cf0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006cee:	2302      	movs	r3, #2
  }
}
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b004      	add	sp, #16
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	fffff0ff 	.word	0xfffff0ff

08006cfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006d04:	4b19      	ldr	r3, [pc, #100]	; (8006d6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a19      	ldr	r2, [pc, #100]	; (8006d70 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	0019      	movs	r1, r3
 8006d0e:	4b17      	ldr	r3, [pc, #92]	; (8006d6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	2380      	movs	r3, #128	; 0x80
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d11f      	bne.n	8006d60 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8006d20:	4b14      	ldr	r3, [pc, #80]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	0013      	movs	r3, r2
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	189b      	adds	r3, r3, r2
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	4912      	ldr	r1, [pc, #72]	; (8006d78 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f7f9 f9f0 	bl	8000114 <__udivsi3>
 8006d34:	0003      	movs	r3, r0
 8006d36:	3301      	adds	r3, #1
 8006d38:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d3a:	e008      	b.n	8006d4e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e001      	b.n	8006d4e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e009      	b.n	8006d62 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d4e:	4b07      	ldr	r3, [pc, #28]	; (8006d6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006d50:	695a      	ldr	r2, [r3, #20]
 8006d52:	2380      	movs	r3, #128	; 0x80
 8006d54:	00db      	lsls	r3, r3, #3
 8006d56:	401a      	ands	r2, r3
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d0ed      	beq.n	8006d3c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	0018      	movs	r0, r3
 8006d64:	46bd      	mov	sp, r7
 8006d66:	b004      	add	sp, #16
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	40007000 	.word	0x40007000
 8006d70:	fffff9ff 	.word	0xfffff9ff
 8006d74:	20000124 	.word	0x20000124
 8006d78:	000f4240 	.word	0x000f4240

08006d7c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006d80:	4b03      	ldr	r3, [pc, #12]	; (8006d90 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	23e0      	movs	r3, #224	; 0xe0
 8006d86:	01db      	lsls	r3, r3, #7
 8006d88:	4013      	ands	r3, r2
}
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40021000 	.word	0x40021000

08006d94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e304      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2201      	movs	r2, #1
 8006dac:	4013      	ands	r3, r2
 8006dae:	d100      	bne.n	8006db2 <HAL_RCC_OscConfig+0x1e>
 8006db0:	e07c      	b.n	8006eac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006db2:	4bc3      	ldr	r3, [pc, #780]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	2238      	movs	r2, #56	; 0x38
 8006db8:	4013      	ands	r3, r2
 8006dba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dbc:	4bc0      	ldr	r3, [pc, #768]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d102      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x3e>
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d002      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x44>
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d10b      	bne.n	8006df0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd8:	4bb9      	ldr	r3, [pc, #740]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	2380      	movs	r3, #128	; 0x80
 8006dde:	029b      	lsls	r3, r3, #10
 8006de0:	4013      	ands	r3, r2
 8006de2:	d062      	beq.n	8006eaa <HAL_RCC_OscConfig+0x116>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d15e      	bne.n	8006eaa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e2df      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	2380      	movs	r3, #128	; 0x80
 8006df6:	025b      	lsls	r3, r3, #9
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d107      	bne.n	8006e0c <HAL_RCC_OscConfig+0x78>
 8006dfc:	4bb0      	ldr	r3, [pc, #704]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	4baf      	ldr	r3, [pc, #700]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006e02:	2180      	movs	r1, #128	; 0x80
 8006e04:	0249      	lsls	r1, r1, #9
 8006e06:	430a      	orrs	r2, r1
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	e020      	b.n	8006e4e <HAL_RCC_OscConfig+0xba>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	23a0      	movs	r3, #160	; 0xa0
 8006e12:	02db      	lsls	r3, r3, #11
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d10e      	bne.n	8006e36 <HAL_RCC_OscConfig+0xa2>
 8006e18:	4ba9      	ldr	r3, [pc, #676]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	4ba8      	ldr	r3, [pc, #672]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006e1e:	2180      	movs	r1, #128	; 0x80
 8006e20:	02c9      	lsls	r1, r1, #11
 8006e22:	430a      	orrs	r2, r1
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	4ba6      	ldr	r3, [pc, #664]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	4ba5      	ldr	r3, [pc, #660]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006e2c:	2180      	movs	r1, #128	; 0x80
 8006e2e:	0249      	lsls	r1, r1, #9
 8006e30:	430a      	orrs	r2, r1
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e00b      	b.n	8006e4e <HAL_RCC_OscConfig+0xba>
 8006e36:	4ba2      	ldr	r3, [pc, #648]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	4ba1      	ldr	r3, [pc, #644]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006e3c:	49a1      	ldr	r1, [pc, #644]	; (80070c4 <HAL_RCC_OscConfig+0x330>)
 8006e3e:	400a      	ands	r2, r1
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	4b9f      	ldr	r3, [pc, #636]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	4b9e      	ldr	r3, [pc, #632]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006e48:	499f      	ldr	r1, [pc, #636]	; (80070c8 <HAL_RCC_OscConfig+0x334>)
 8006e4a:	400a      	ands	r2, r1
 8006e4c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d014      	beq.n	8006e80 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e56:	f7fe feb3 	bl	8005bc0 <HAL_GetTick>
 8006e5a:	0003      	movs	r3, r0
 8006e5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e60:	f7fe feae 	bl	8005bc0 <HAL_GetTick>
 8006e64:	0002      	movs	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b64      	cmp	r3, #100	; 0x64
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e29e      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e72:	4b93      	ldr	r3, [pc, #588]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	2380      	movs	r3, #128	; 0x80
 8006e78:	029b      	lsls	r3, r3, #10
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	d0f0      	beq.n	8006e60 <HAL_RCC_OscConfig+0xcc>
 8006e7e:	e015      	b.n	8006eac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fe fe9e 	bl	8005bc0 <HAL_GetTick>
 8006e84:	0003      	movs	r3, r0
 8006e86:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e88:	e008      	b.n	8006e9c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e8a:	f7fe fe99 	bl	8005bc0 <HAL_GetTick>
 8006e8e:	0002      	movs	r2, r0
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b64      	cmp	r3, #100	; 0x64
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e289      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e9c:	4b88      	ldr	r3, [pc, #544]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	2380      	movs	r3, #128	; 0x80
 8006ea2:	029b      	lsls	r3, r3, #10
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	d1f0      	bne.n	8006e8a <HAL_RCC_OscConfig+0xf6>
 8006ea8:	e000      	b.n	8006eac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eaa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	d100      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x124>
 8006eb6:	e099      	b.n	8006fec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eb8:	4b81      	ldr	r3, [pc, #516]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	2238      	movs	r2, #56	; 0x38
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ec2:	4b7f      	ldr	r3, [pc, #508]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	4013      	ands	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b10      	cmp	r3, #16
 8006ed0:	d102      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x144>
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d002      	beq.n	8006ede <HAL_RCC_OscConfig+0x14a>
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d135      	bne.n	8006f4a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ede:	4b78      	ldr	r3, [pc, #480]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	2380      	movs	r3, #128	; 0x80
 8006ee4:	00db      	lsls	r3, r3, #3
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	d005      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x162>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e25c      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef6:	4b72      	ldr	r3, [pc, #456]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	4a74      	ldr	r2, [pc, #464]	; (80070cc <HAL_RCC_OscConfig+0x338>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	0019      	movs	r1, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	021a      	lsls	r2, r3, #8
 8006f06:	4b6e      	ldr	r3, [pc, #440]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d112      	bne.n	8006f38 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006f12:	4b6b      	ldr	r3, [pc, #428]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a6e      	ldr	r2, [pc, #440]	; (80070d0 <HAL_RCC_OscConfig+0x33c>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	0019      	movs	r1, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	4b67      	ldr	r3, [pc, #412]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006f22:	430a      	orrs	r2, r1
 8006f24:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006f26:	4b66      	ldr	r3, [pc, #408]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	0adb      	lsrs	r3, r3, #11
 8006f2c:	2207      	movs	r2, #7
 8006f2e:	4013      	ands	r3, r2
 8006f30:	4a68      	ldr	r2, [pc, #416]	; (80070d4 <HAL_RCC_OscConfig+0x340>)
 8006f32:	40da      	lsrs	r2, r3
 8006f34:	4b68      	ldr	r3, [pc, #416]	; (80070d8 <HAL_RCC_OscConfig+0x344>)
 8006f36:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f38:	4b68      	ldr	r3, [pc, #416]	; (80070dc <HAL_RCC_OscConfig+0x348>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f7fe fde5 	bl	8005b0c <HAL_InitTick>
 8006f42:	1e03      	subs	r3, r0, #0
 8006f44:	d051      	beq.n	8006fea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e232      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d030      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006f52:	4b5b      	ldr	r3, [pc, #364]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a5e      	ldr	r2, [pc, #376]	; (80070d0 <HAL_RCC_OscConfig+0x33c>)
 8006f58:	4013      	ands	r3, r2
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691a      	ldr	r2, [r3, #16]
 8006f60:	4b57      	ldr	r3, [pc, #348]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006f62:	430a      	orrs	r2, r1
 8006f64:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006f66:	4b56      	ldr	r3, [pc, #344]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4b55      	ldr	r3, [pc, #340]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006f6c:	2180      	movs	r1, #128	; 0x80
 8006f6e:	0049      	lsls	r1, r1, #1
 8006f70:	430a      	orrs	r2, r1
 8006f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f74:	f7fe fe24 	bl	8005bc0 <HAL_GetTick>
 8006f78:	0003      	movs	r3, r0
 8006f7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f7c:	e008      	b.n	8006f90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f7e:	f7fe fe1f 	bl	8005bc0 <HAL_GetTick>
 8006f82:	0002      	movs	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e20f      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f90:	4b4b      	ldr	r3, [pc, #300]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	4013      	ands	r3, r2
 8006f9a:	d0f0      	beq.n	8006f7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f9c:	4b48      	ldr	r3, [pc, #288]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	4a4a      	ldr	r2, [pc, #296]	; (80070cc <HAL_RCC_OscConfig+0x338>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	0019      	movs	r1, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	021a      	lsls	r2, r3, #8
 8006fac:	4b44      	ldr	r3, [pc, #272]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]
 8006fb2:	e01b      	b.n	8006fec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006fb4:	4b42      	ldr	r3, [pc, #264]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	4b41      	ldr	r3, [pc, #260]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006fba:	4949      	ldr	r1, [pc, #292]	; (80070e0 <HAL_RCC_OscConfig+0x34c>)
 8006fbc:	400a      	ands	r2, r1
 8006fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc0:	f7fe fdfe 	bl	8005bc0 <HAL_GetTick>
 8006fc4:	0003      	movs	r3, r0
 8006fc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fca:	f7fe fdf9 	bl	8005bc0 <HAL_GetTick>
 8006fce:	0002      	movs	r2, r0
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e1e9      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fdc:	4b38      	ldr	r3, [pc, #224]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	2380      	movs	r3, #128	; 0x80
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	d1f0      	bne.n	8006fca <HAL_RCC_OscConfig+0x236>
 8006fe8:	e000      	b.n	8006fec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	d047      	beq.n	8007086 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8006ff6:	4b32      	ldr	r3, [pc, #200]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2238      	movs	r2, #56	; 0x38
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	2b18      	cmp	r3, #24
 8007000:	d10a      	bne.n	8007018 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007002:	4b2f      	ldr	r3, [pc, #188]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8007004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007006:	2202      	movs	r2, #2
 8007008:	4013      	ands	r3, r2
 800700a:	d03c      	beq.n	8007086 <HAL_RCC_OscConfig+0x2f2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d138      	bne.n	8007086 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e1cb      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d019      	beq.n	8007054 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007020:	4b27      	ldr	r3, [pc, #156]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8007022:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007024:	4b26      	ldr	r3, [pc, #152]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8007026:	2101      	movs	r1, #1
 8007028:	430a      	orrs	r2, r1
 800702a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702c:	f7fe fdc8 	bl	8005bc0 <HAL_GetTick>
 8007030:	0003      	movs	r3, r0
 8007032:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007034:	e008      	b.n	8007048 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007036:	f7fe fdc3 	bl	8005bc0 <HAL_GetTick>
 800703a:	0002      	movs	r2, r0
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	d901      	bls.n	8007048 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e1b3      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007048:	4b1d      	ldr	r3, [pc, #116]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 800704a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800704c:	2202      	movs	r2, #2
 800704e:	4013      	ands	r3, r2
 8007050:	d0f1      	beq.n	8007036 <HAL_RCC_OscConfig+0x2a2>
 8007052:	e018      	b.n	8007086 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007054:	4b1a      	ldr	r3, [pc, #104]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 8007056:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007058:	4b19      	ldr	r3, [pc, #100]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 800705a:	2101      	movs	r1, #1
 800705c:	438a      	bics	r2, r1
 800705e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007060:	f7fe fdae 	bl	8005bc0 <HAL_GetTick>
 8007064:	0003      	movs	r3, r0
 8007066:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007068:	e008      	b.n	800707c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800706a:	f7fe fda9 	bl	8005bc0 <HAL_GetTick>
 800706e:	0002      	movs	r2, r0
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e199      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800707c:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 800707e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007080:	2202      	movs	r2, #2
 8007082:	4013      	ands	r3, r2
 8007084:	d1f1      	bne.n	800706a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2204      	movs	r2, #4
 800708c:	4013      	ands	r3, r2
 800708e:	d100      	bne.n	8007092 <HAL_RCC_OscConfig+0x2fe>
 8007090:	e0c6      	b.n	8007220 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007092:	231f      	movs	r3, #31
 8007094:	18fb      	adds	r3, r7, r3
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800709a:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	2238      	movs	r2, #56	; 0x38
 80070a0:	4013      	ands	r3, r2
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d11e      	bne.n	80070e4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80070a6:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <HAL_RCC_OscConfig+0x32c>)
 80070a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070aa:	2202      	movs	r2, #2
 80070ac:	4013      	ands	r3, r2
 80070ae:	d100      	bne.n	80070b2 <HAL_RCC_OscConfig+0x31e>
 80070b0:	e0b6      	b.n	8007220 <HAL_RCC_OscConfig+0x48c>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d000      	beq.n	80070bc <HAL_RCC_OscConfig+0x328>
 80070ba:	e0b1      	b.n	8007220 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e177      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
 80070c0:	40021000 	.word	0x40021000
 80070c4:	fffeffff 	.word	0xfffeffff
 80070c8:	fffbffff 	.word	0xfffbffff
 80070cc:	ffff80ff 	.word	0xffff80ff
 80070d0:	ffffc7ff 	.word	0xffffc7ff
 80070d4:	00f42400 	.word	0x00f42400
 80070d8:	20000124 	.word	0x20000124
 80070dc:	20000128 	.word	0x20000128
 80070e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80070e4:	4bb4      	ldr	r3, [pc, #720]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80070e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070e8:	2380      	movs	r3, #128	; 0x80
 80070ea:	055b      	lsls	r3, r3, #21
 80070ec:	4013      	ands	r3, r2
 80070ee:	d101      	bne.n	80070f4 <HAL_RCC_OscConfig+0x360>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <HAL_RCC_OscConfig+0x362>
 80070f4:	2300      	movs	r3, #0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d011      	beq.n	800711e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80070fa:	4baf      	ldr	r3, [pc, #700]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80070fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070fe:	4bae      	ldr	r3, [pc, #696]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 8007100:	2180      	movs	r1, #128	; 0x80
 8007102:	0549      	lsls	r1, r1, #21
 8007104:	430a      	orrs	r2, r1
 8007106:	63da      	str	r2, [r3, #60]	; 0x3c
 8007108:	4bab      	ldr	r3, [pc, #684]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 800710a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800710c:	2380      	movs	r3, #128	; 0x80
 800710e:	055b      	lsls	r3, r3, #21
 8007110:	4013      	ands	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8007116:	231f      	movs	r3, #31
 8007118:	18fb      	adds	r3, r7, r3
 800711a:	2201      	movs	r2, #1
 800711c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800711e:	4ba7      	ldr	r3, [pc, #668]	; (80073bc <HAL_RCC_OscConfig+0x628>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	2380      	movs	r3, #128	; 0x80
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	4013      	ands	r3, r2
 8007128:	d11a      	bne.n	8007160 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800712a:	4ba4      	ldr	r3, [pc, #656]	; (80073bc <HAL_RCC_OscConfig+0x628>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4ba3      	ldr	r3, [pc, #652]	; (80073bc <HAL_RCC_OscConfig+0x628>)
 8007130:	2180      	movs	r1, #128	; 0x80
 8007132:	0049      	lsls	r1, r1, #1
 8007134:	430a      	orrs	r2, r1
 8007136:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007138:	f7fe fd42 	bl	8005bc0 <HAL_GetTick>
 800713c:	0003      	movs	r3, r0
 800713e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007142:	f7fe fd3d 	bl	8005bc0 <HAL_GetTick>
 8007146:	0002      	movs	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e12d      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007154:	4b99      	ldr	r3, [pc, #612]	; (80073bc <HAL_RCC_OscConfig+0x628>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	2380      	movs	r3, #128	; 0x80
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	4013      	ands	r3, r2
 800715e:	d0f0      	beq.n	8007142 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d106      	bne.n	8007176 <HAL_RCC_OscConfig+0x3e2>
 8007168:	4b93      	ldr	r3, [pc, #588]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 800716a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800716c:	4b92      	ldr	r3, [pc, #584]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 800716e:	2101      	movs	r1, #1
 8007170:	430a      	orrs	r2, r1
 8007172:	65da      	str	r2, [r3, #92]	; 0x5c
 8007174:	e01c      	b.n	80071b0 <HAL_RCC_OscConfig+0x41c>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	2b05      	cmp	r3, #5
 800717c:	d10c      	bne.n	8007198 <HAL_RCC_OscConfig+0x404>
 800717e:	4b8e      	ldr	r3, [pc, #568]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 8007180:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007182:	4b8d      	ldr	r3, [pc, #564]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 8007184:	2104      	movs	r1, #4
 8007186:	430a      	orrs	r2, r1
 8007188:	65da      	str	r2, [r3, #92]	; 0x5c
 800718a:	4b8b      	ldr	r3, [pc, #556]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 800718c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800718e:	4b8a      	ldr	r3, [pc, #552]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 8007190:	2101      	movs	r1, #1
 8007192:	430a      	orrs	r2, r1
 8007194:	65da      	str	r2, [r3, #92]	; 0x5c
 8007196:	e00b      	b.n	80071b0 <HAL_RCC_OscConfig+0x41c>
 8007198:	4b87      	ldr	r3, [pc, #540]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 800719a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800719c:	4b86      	ldr	r3, [pc, #536]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 800719e:	2101      	movs	r1, #1
 80071a0:	438a      	bics	r2, r1
 80071a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80071a4:	4b84      	ldr	r3, [pc, #528]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80071a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071a8:	4b83      	ldr	r3, [pc, #524]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80071aa:	2104      	movs	r1, #4
 80071ac:	438a      	bics	r2, r1
 80071ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d014      	beq.n	80071e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b8:	f7fe fd02 	bl	8005bc0 <HAL_GetTick>
 80071bc:	0003      	movs	r3, r0
 80071be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071c0:	e009      	b.n	80071d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071c2:	f7fe fcfd 	bl	8005bc0 <HAL_GetTick>
 80071c6:	0002      	movs	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	4a7c      	ldr	r2, [pc, #496]	; (80073c0 <HAL_RCC_OscConfig+0x62c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e0ec      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071d6:	4b78      	ldr	r3, [pc, #480]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80071d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071da:	2202      	movs	r2, #2
 80071dc:	4013      	ands	r3, r2
 80071de:	d0f0      	beq.n	80071c2 <HAL_RCC_OscConfig+0x42e>
 80071e0:	e013      	b.n	800720a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e2:	f7fe fced 	bl	8005bc0 <HAL_GetTick>
 80071e6:	0003      	movs	r3, r0
 80071e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071ea:	e009      	b.n	8007200 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ec:	f7fe fce8 	bl	8005bc0 <HAL_GetTick>
 80071f0:	0002      	movs	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	4a72      	ldr	r2, [pc, #456]	; (80073c0 <HAL_RCC_OscConfig+0x62c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e0d7      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007200:	4b6d      	ldr	r3, [pc, #436]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 8007202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007204:	2202      	movs	r2, #2
 8007206:	4013      	ands	r3, r2
 8007208:	d1f0      	bne.n	80071ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800720a:	231f      	movs	r3, #31
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d105      	bne.n	8007220 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007214:	4b68      	ldr	r3, [pc, #416]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 8007216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007218:	4b67      	ldr	r3, [pc, #412]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 800721a:	496a      	ldr	r1, [pc, #424]	; (80073c4 <HAL_RCC_OscConfig+0x630>)
 800721c:	400a      	ands	r2, r1
 800721e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d100      	bne.n	800722a <HAL_RCC_OscConfig+0x496>
 8007228:	e0c1      	b.n	80073ae <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800722a:	4b63      	ldr	r3, [pc, #396]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2238      	movs	r2, #56	; 0x38
 8007230:	4013      	ands	r3, r2
 8007232:	2b10      	cmp	r3, #16
 8007234:	d100      	bne.n	8007238 <HAL_RCC_OscConfig+0x4a4>
 8007236:	e081      	b.n	800733c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	2b02      	cmp	r3, #2
 800723e:	d156      	bne.n	80072ee <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007240:	4b5d      	ldr	r3, [pc, #372]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	4b5c      	ldr	r3, [pc, #368]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 8007246:	4960      	ldr	r1, [pc, #384]	; (80073c8 <HAL_RCC_OscConfig+0x634>)
 8007248:	400a      	ands	r2, r1
 800724a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724c:	f7fe fcb8 	bl	8005bc0 <HAL_GetTick>
 8007250:	0003      	movs	r3, r0
 8007252:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007254:	e008      	b.n	8007268 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007256:	f7fe fcb3 	bl	8005bc0 <HAL_GetTick>
 800725a:	0002      	movs	r2, r0
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e0a3      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007268:	4b53      	ldr	r3, [pc, #332]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	2380      	movs	r3, #128	; 0x80
 800726e:	049b      	lsls	r3, r3, #18
 8007270:	4013      	ands	r3, r2
 8007272:	d1f0      	bne.n	8007256 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007274:	4b50      	ldr	r3, [pc, #320]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	4a54      	ldr	r2, [pc, #336]	; (80073cc <HAL_RCC_OscConfig+0x638>)
 800727a:	4013      	ands	r3, r2
 800727c:	0019      	movs	r1, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1a      	ldr	r2, [r3, #32]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	431a      	orrs	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a0:	431a      	orrs	r2, r3
 80072a2:	4b45      	ldr	r3, [pc, #276]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80072a4:	430a      	orrs	r2, r1
 80072a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072a8:	4b43      	ldr	r3, [pc, #268]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	4b42      	ldr	r3, [pc, #264]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80072ae:	2180      	movs	r1, #128	; 0x80
 80072b0:	0449      	lsls	r1, r1, #17
 80072b2:	430a      	orrs	r2, r1
 80072b4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80072b6:	4b40      	ldr	r3, [pc, #256]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	4b3f      	ldr	r3, [pc, #252]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80072bc:	2180      	movs	r1, #128	; 0x80
 80072be:	0549      	lsls	r1, r1, #21
 80072c0:	430a      	orrs	r2, r1
 80072c2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c4:	f7fe fc7c 	bl	8005bc0 <HAL_GetTick>
 80072c8:	0003      	movs	r3, r0
 80072ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072cc:	e008      	b.n	80072e0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ce:	f7fe fc77 	bl	8005bc0 <HAL_GetTick>
 80072d2:	0002      	movs	r2, r0
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d901      	bls.n	80072e0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e067      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072e0:	4b35      	ldr	r3, [pc, #212]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	2380      	movs	r3, #128	; 0x80
 80072e6:	049b      	lsls	r3, r3, #18
 80072e8:	4013      	ands	r3, r2
 80072ea:	d0f0      	beq.n	80072ce <HAL_RCC_OscConfig+0x53a>
 80072ec:	e05f      	b.n	80073ae <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ee:	4b32      	ldr	r3, [pc, #200]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4b31      	ldr	r3, [pc, #196]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80072f4:	4934      	ldr	r1, [pc, #208]	; (80073c8 <HAL_RCC_OscConfig+0x634>)
 80072f6:	400a      	ands	r2, r1
 80072f8:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80072fa:	4b2f      	ldr	r3, [pc, #188]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	4b2e      	ldr	r3, [pc, #184]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 8007300:	2103      	movs	r1, #3
 8007302:	438a      	bics	r2, r1
 8007304:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8007306:	4b2c      	ldr	r3, [pc, #176]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	4b2b      	ldr	r3, [pc, #172]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 800730c:	4930      	ldr	r1, [pc, #192]	; (80073d0 <HAL_RCC_OscConfig+0x63c>)
 800730e:	400a      	ands	r2, r1
 8007310:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007312:	f7fe fc55 	bl	8005bc0 <HAL_GetTick>
 8007316:	0003      	movs	r3, r0
 8007318:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800731a:	e008      	b.n	800732e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800731c:	f7fe fc50 	bl	8005bc0 <HAL_GetTick>
 8007320:	0002      	movs	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e040      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800732e:	4b22      	ldr	r3, [pc, #136]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	2380      	movs	r3, #128	; 0x80
 8007334:	049b      	lsls	r3, r3, #18
 8007336:	4013      	ands	r3, r2
 8007338:	d1f0      	bne.n	800731c <HAL_RCC_OscConfig+0x588>
 800733a:	e038      	b.n	80073ae <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e033      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007348:	4b1b      	ldr	r3, [pc, #108]	; (80073b8 <HAL_RCC_OscConfig+0x624>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2203      	movs	r2, #3
 8007352:	401a      	ands	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	429a      	cmp	r2, r3
 800735a:	d126      	bne.n	80073aa <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2270      	movs	r2, #112	; 0x70
 8007360:	401a      	ands	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007366:	429a      	cmp	r2, r3
 8007368:	d11f      	bne.n	80073aa <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	23fe      	movs	r3, #254	; 0xfe
 800736e:	01db      	lsls	r3, r3, #7
 8007370:	401a      	ands	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007376:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007378:	429a      	cmp	r2, r3
 800737a:	d116      	bne.n	80073aa <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	23f8      	movs	r3, #248	; 0xf8
 8007380:	039b      	lsls	r3, r3, #14
 8007382:	401a      	ands	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007388:	429a      	cmp	r2, r3
 800738a:	d10e      	bne.n	80073aa <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	23e0      	movs	r3, #224	; 0xe0
 8007390:	051b      	lsls	r3, r3, #20
 8007392:	401a      	ands	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007398:	429a      	cmp	r2, r3
 800739a:	d106      	bne.n	80073aa <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	0f5b      	lsrs	r3, r3, #29
 80073a0:	075a      	lsls	r2, r3, #29
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d001      	beq.n	80073ae <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	0018      	movs	r0, r3
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b008      	add	sp, #32
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40021000 	.word	0x40021000
 80073bc:	40007000 	.word	0x40007000
 80073c0:	00001388 	.word	0x00001388
 80073c4:	efffffff 	.word	0xefffffff
 80073c8:	feffffff 	.word	0xfeffffff
 80073cc:	11c1808c 	.word	0x11c1808c
 80073d0:	eefeffff 	.word	0xeefeffff

080073d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e0e9      	b.n	80075bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073e8:	4b76      	ldr	r3, [pc, #472]	; (80075c4 <HAL_RCC_ClockConfig+0x1f0>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2207      	movs	r2, #7
 80073ee:	4013      	ands	r3, r2
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d91e      	bls.n	8007434 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073f6:	4b73      	ldr	r3, [pc, #460]	; (80075c4 <HAL_RCC_ClockConfig+0x1f0>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2207      	movs	r2, #7
 80073fc:	4393      	bics	r3, r2
 80073fe:	0019      	movs	r1, r3
 8007400:	4b70      	ldr	r3, [pc, #448]	; (80075c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007408:	f7fe fbda 	bl	8005bc0 <HAL_GetTick>
 800740c:	0003      	movs	r3, r0
 800740e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007410:	e009      	b.n	8007426 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007412:	f7fe fbd5 	bl	8005bc0 <HAL_GetTick>
 8007416:	0002      	movs	r2, r0
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	4a6a      	ldr	r2, [pc, #424]	; (80075c8 <HAL_RCC_ClockConfig+0x1f4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e0ca      	b.n	80075bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007426:	4b67      	ldr	r3, [pc, #412]	; (80075c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2207      	movs	r2, #7
 800742c:	4013      	ands	r3, r2
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d1ee      	bne.n	8007412 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2202      	movs	r2, #2
 800743a:	4013      	ands	r3, r2
 800743c:	d015      	beq.n	800746a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2204      	movs	r2, #4
 8007444:	4013      	ands	r3, r2
 8007446:	d006      	beq.n	8007456 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007448:	4b60      	ldr	r3, [pc, #384]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	4b5f      	ldr	r3, [pc, #380]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 800744e:	21e0      	movs	r1, #224	; 0xe0
 8007450:	01c9      	lsls	r1, r1, #7
 8007452:	430a      	orrs	r2, r1
 8007454:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007456:	4b5d      	ldr	r3, [pc, #372]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	4a5d      	ldr	r2, [pc, #372]	; (80075d0 <HAL_RCC_ClockConfig+0x1fc>)
 800745c:	4013      	ands	r3, r2
 800745e:	0019      	movs	r1, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	4b59      	ldr	r3, [pc, #356]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 8007466:	430a      	orrs	r2, r1
 8007468:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2201      	movs	r2, #1
 8007470:	4013      	ands	r3, r2
 8007472:	d057      	beq.n	8007524 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d107      	bne.n	800748c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800747c:	4b53      	ldr	r3, [pc, #332]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	2380      	movs	r3, #128	; 0x80
 8007482:	029b      	lsls	r3, r3, #10
 8007484:	4013      	ands	r3, r2
 8007486:	d12b      	bne.n	80074e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e097      	b.n	80075bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d107      	bne.n	80074a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007494:	4b4d      	ldr	r3, [pc, #308]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	2380      	movs	r3, #128	; 0x80
 800749a:	049b      	lsls	r3, r3, #18
 800749c:	4013      	ands	r3, r2
 800749e:	d11f      	bne.n	80074e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e08b      	b.n	80075bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d107      	bne.n	80074bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074ac:	4b47      	ldr	r3, [pc, #284]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	2380      	movs	r3, #128	; 0x80
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	4013      	ands	r3, r2
 80074b6:	d113      	bne.n	80074e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e07f      	b.n	80075bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d106      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80074c4:	4b41      	ldr	r3, [pc, #260]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 80074c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c8:	2202      	movs	r2, #2
 80074ca:	4013      	ands	r3, r2
 80074cc:	d108      	bne.n	80074e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e074      	b.n	80075bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074d2:	4b3e      	ldr	r3, [pc, #248]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 80074d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d6:	2202      	movs	r2, #2
 80074d8:	4013      	ands	r3, r2
 80074da:	d101      	bne.n	80074e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e06d      	b.n	80075bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074e0:	4b3a      	ldr	r3, [pc, #232]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	2207      	movs	r2, #7
 80074e6:	4393      	bics	r3, r2
 80074e8:	0019      	movs	r1, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	4b37      	ldr	r3, [pc, #220]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 80074f0:	430a      	orrs	r2, r1
 80074f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f4:	f7fe fb64 	bl	8005bc0 <HAL_GetTick>
 80074f8:	0003      	movs	r3, r0
 80074fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fc:	e009      	b.n	8007512 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074fe:	f7fe fb5f 	bl	8005bc0 <HAL_GetTick>
 8007502:	0002      	movs	r2, r0
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	4a2f      	ldr	r2, [pc, #188]	; (80075c8 <HAL_RCC_ClockConfig+0x1f4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d901      	bls.n	8007512 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e054      	b.n	80075bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007512:	4b2e      	ldr	r3, [pc, #184]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	2238      	movs	r2, #56	; 0x38
 8007518:	401a      	ands	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	429a      	cmp	r2, r3
 8007522:	d1ec      	bne.n	80074fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007524:	4b27      	ldr	r3, [pc, #156]	; (80075c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2207      	movs	r2, #7
 800752a:	4013      	ands	r3, r2
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	429a      	cmp	r2, r3
 8007530:	d21e      	bcs.n	8007570 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007532:	4b24      	ldr	r3, [pc, #144]	; (80075c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2207      	movs	r2, #7
 8007538:	4393      	bics	r3, r2
 800753a:	0019      	movs	r1, r3
 800753c:	4b21      	ldr	r3, [pc, #132]	; (80075c4 <HAL_RCC_ClockConfig+0x1f0>)
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007544:	f7fe fb3c 	bl	8005bc0 <HAL_GetTick>
 8007548:	0003      	movs	r3, r0
 800754a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800754c:	e009      	b.n	8007562 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800754e:	f7fe fb37 	bl	8005bc0 <HAL_GetTick>
 8007552:	0002      	movs	r2, r0
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	4a1b      	ldr	r2, [pc, #108]	; (80075c8 <HAL_RCC_ClockConfig+0x1f4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e02c      	b.n	80075bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007562:	4b18      	ldr	r3, [pc, #96]	; (80075c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2207      	movs	r2, #7
 8007568:	4013      	ands	r3, r2
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	429a      	cmp	r2, r3
 800756e:	d1ee      	bne.n	800754e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2204      	movs	r2, #4
 8007576:	4013      	ands	r3, r2
 8007578:	d009      	beq.n	800758e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800757a:	4b14      	ldr	r3, [pc, #80]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	4a15      	ldr	r2, [pc, #84]	; (80075d4 <HAL_RCC_ClockConfig+0x200>)
 8007580:	4013      	ands	r3, r2
 8007582:	0019      	movs	r1, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	4b10      	ldr	r3, [pc, #64]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 800758a:	430a      	orrs	r2, r1
 800758c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800758e:	f000 f829 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 8007592:	0001      	movs	r1, r0
 8007594:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <HAL_RCC_ClockConfig+0x1f8>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	0a1b      	lsrs	r3, r3, #8
 800759a:	220f      	movs	r2, #15
 800759c:	401a      	ands	r2, r3
 800759e:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <HAL_RCC_ClockConfig+0x204>)
 80075a0:	0092      	lsls	r2, r2, #2
 80075a2:	58d3      	ldr	r3, [r2, r3]
 80075a4:	221f      	movs	r2, #31
 80075a6:	4013      	ands	r3, r2
 80075a8:	000a      	movs	r2, r1
 80075aa:	40da      	lsrs	r2, r3
 80075ac:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <HAL_RCC_ClockConfig+0x208>)
 80075ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80075b0:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <HAL_RCC_ClockConfig+0x20c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	0018      	movs	r0, r3
 80075b6:	f7fe faa9 	bl	8005b0c <HAL_InitTick>
 80075ba:	0003      	movs	r3, r0
}
 80075bc:	0018      	movs	r0, r3
 80075be:	46bd      	mov	sp, r7
 80075c0:	b004      	add	sp, #16
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	40022000 	.word	0x40022000
 80075c8:	00001388 	.word	0x00001388
 80075cc:	40021000 	.word	0x40021000
 80075d0:	fffff0ff 	.word	0xfffff0ff
 80075d4:	ffff8fff 	.word	0xffff8fff
 80075d8:	0800a208 	.word	0x0800a208
 80075dc:	20000124 	.word	0x20000124
 80075e0:	20000128 	.word	0x20000128

080075e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80075ea:	4b3c      	ldr	r3, [pc, #240]	; (80076dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	2238      	movs	r2, #56	; 0x38
 80075f0:	4013      	ands	r3, r2
 80075f2:	d10f      	bne.n	8007614 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80075f4:	4b39      	ldr	r3, [pc, #228]	; (80076dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	0adb      	lsrs	r3, r3, #11
 80075fa:	2207      	movs	r2, #7
 80075fc:	4013      	ands	r3, r2
 80075fe:	2201      	movs	r2, #1
 8007600:	409a      	lsls	r2, r3
 8007602:	0013      	movs	r3, r2
 8007604:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	4835      	ldr	r0, [pc, #212]	; (80076e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800760a:	f7f8 fd83 	bl	8000114 <__udivsi3>
 800760e:	0003      	movs	r3, r0
 8007610:	613b      	str	r3, [r7, #16]
 8007612:	e05d      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007614:	4b31      	ldr	r3, [pc, #196]	; (80076dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2238      	movs	r2, #56	; 0x38
 800761a:	4013      	ands	r3, r2
 800761c:	2b08      	cmp	r3, #8
 800761e:	d102      	bne.n	8007626 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007620:	4b30      	ldr	r3, [pc, #192]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	e054      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007626:	4b2d      	ldr	r3, [pc, #180]	; (80076dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	2238      	movs	r2, #56	; 0x38
 800762c:	4013      	ands	r3, r2
 800762e:	2b10      	cmp	r3, #16
 8007630:	d138      	bne.n	80076a4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007632:	4b2a      	ldr	r3, [pc, #168]	; (80076dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	2203      	movs	r2, #3
 8007638:	4013      	ands	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800763c:	4b27      	ldr	r3, [pc, #156]	; (80076dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	091b      	lsrs	r3, r3, #4
 8007642:	2207      	movs	r2, #7
 8007644:	4013      	ands	r3, r2
 8007646:	3301      	adds	r3, #1
 8007648:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b03      	cmp	r3, #3
 800764e:	d10d      	bne.n	800766c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4824      	ldr	r0, [pc, #144]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8007654:	f7f8 fd5e 	bl	8000114 <__udivsi3>
 8007658:	0003      	movs	r3, r0
 800765a:	0019      	movs	r1, r3
 800765c:	4b1f      	ldr	r3, [pc, #124]	; (80076dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	0a1b      	lsrs	r3, r3, #8
 8007662:	227f      	movs	r2, #127	; 0x7f
 8007664:	4013      	ands	r3, r2
 8007666:	434b      	muls	r3, r1
 8007668:	617b      	str	r3, [r7, #20]
        break;
 800766a:	e00d      	b.n	8007688 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800766c:	68b9      	ldr	r1, [r7, #8]
 800766e:	481c      	ldr	r0, [pc, #112]	; (80076e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007670:	f7f8 fd50 	bl	8000114 <__udivsi3>
 8007674:	0003      	movs	r3, r0
 8007676:	0019      	movs	r1, r3
 8007678:	4b18      	ldr	r3, [pc, #96]	; (80076dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	0a1b      	lsrs	r3, r3, #8
 800767e:	227f      	movs	r2, #127	; 0x7f
 8007680:	4013      	ands	r3, r2
 8007682:	434b      	muls	r3, r1
 8007684:	617b      	str	r3, [r7, #20]
        break;
 8007686:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007688:	4b14      	ldr	r3, [pc, #80]	; (80076dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	0f5b      	lsrs	r3, r3, #29
 800768e:	2207      	movs	r2, #7
 8007690:	4013      	ands	r3, r2
 8007692:	3301      	adds	r3, #1
 8007694:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	6978      	ldr	r0, [r7, #20]
 800769a:	f7f8 fd3b 	bl	8000114 <__udivsi3>
 800769e:	0003      	movs	r3, r0
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	e015      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80076a4:	4b0d      	ldr	r3, [pc, #52]	; (80076dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2238      	movs	r2, #56	; 0x38
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b20      	cmp	r3, #32
 80076ae:	d103      	bne.n	80076b8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80076b0:	2380      	movs	r3, #128	; 0x80
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	613b      	str	r3, [r7, #16]
 80076b6:	e00b      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80076b8:	4b08      	ldr	r3, [pc, #32]	; (80076dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2238      	movs	r2, #56	; 0x38
 80076be:	4013      	ands	r3, r2
 80076c0:	2b18      	cmp	r3, #24
 80076c2:	d103      	bne.n	80076cc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80076c4:	23fa      	movs	r3, #250	; 0xfa
 80076c6:	01db      	lsls	r3, r3, #7
 80076c8:	613b      	str	r3, [r7, #16]
 80076ca:	e001      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80076d0:	693b      	ldr	r3, [r7, #16]
}
 80076d2:	0018      	movs	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	b006      	add	sp, #24
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	40021000 	.word	0x40021000
 80076e0:	00f42400 	.word	0x00f42400
 80076e4:	007a1200 	.word	0x007a1200

080076e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076ec:	4b02      	ldr	r3, [pc, #8]	; (80076f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80076ee:	681b      	ldr	r3, [r3, #0]
}
 80076f0:	0018      	movs	r0, r3
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	46c0      	nop			; (mov r8, r8)
 80076f8:	20000124 	.word	0x20000124

080076fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076fc:	b5b0      	push	{r4, r5, r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007700:	f7ff fff2 	bl	80076e8 <HAL_RCC_GetHCLKFreq>
 8007704:	0004      	movs	r4, r0
 8007706:	f7ff fb39 	bl	8006d7c <LL_RCC_GetAPB1Prescaler>
 800770a:	0003      	movs	r3, r0
 800770c:	0b1a      	lsrs	r2, r3, #12
 800770e:	4b05      	ldr	r3, [pc, #20]	; (8007724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007710:	0092      	lsls	r2, r2, #2
 8007712:	58d3      	ldr	r3, [r2, r3]
 8007714:	221f      	movs	r2, #31
 8007716:	4013      	ands	r3, r2
 8007718:	40dc      	lsrs	r4, r3
 800771a:	0023      	movs	r3, r4
}
 800771c:	0018      	movs	r0, r3
 800771e:	46bd      	mov	sp, r7
 8007720:	bdb0      	pop	{r4, r5, r7, pc}
 8007722:	46c0      	nop			; (mov r8, r8)
 8007724:	0800a248 	.word	0x0800a248

08007728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007730:	2313      	movs	r3, #19
 8007732:	18fb      	adds	r3, r7, r3
 8007734:	2200      	movs	r2, #0
 8007736:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007738:	2312      	movs	r3, #18
 800773a:	18fb      	adds	r3, r7, r3
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	2380      	movs	r3, #128	; 0x80
 8007746:	029b      	lsls	r3, r3, #10
 8007748:	4013      	ands	r3, r2
 800774a:	d100      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800774c:	e0a4      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800774e:	2311      	movs	r3, #17
 8007750:	18fb      	adds	r3, r7, r3
 8007752:	2200      	movs	r2, #0
 8007754:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007756:	4bc3      	ldr	r3, [pc, #780]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800775a:	2380      	movs	r3, #128	; 0x80
 800775c:	055b      	lsls	r3, r3, #21
 800775e:	4013      	ands	r3, r2
 8007760:	d111      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007762:	4bc0      	ldr	r3, [pc, #768]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007766:	4bbf      	ldr	r3, [pc, #764]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007768:	2180      	movs	r1, #128	; 0x80
 800776a:	0549      	lsls	r1, r1, #21
 800776c:	430a      	orrs	r2, r1
 800776e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007770:	4bbc      	ldr	r3, [pc, #752]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007774:	2380      	movs	r3, #128	; 0x80
 8007776:	055b      	lsls	r3, r3, #21
 8007778:	4013      	ands	r3, r2
 800777a:	60bb      	str	r3, [r7, #8]
 800777c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800777e:	2311      	movs	r3, #17
 8007780:	18fb      	adds	r3, r7, r3
 8007782:	2201      	movs	r2, #1
 8007784:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007786:	4bb8      	ldr	r3, [pc, #736]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	4bb7      	ldr	r3, [pc, #732]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800778c:	2180      	movs	r1, #128	; 0x80
 800778e:	0049      	lsls	r1, r1, #1
 8007790:	430a      	orrs	r2, r1
 8007792:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007794:	f7fe fa14 	bl	8005bc0 <HAL_GetTick>
 8007798:	0003      	movs	r3, r0
 800779a:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800779c:	e00b      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800779e:	f7fe fa0f 	bl	8005bc0 <HAL_GetTick>
 80077a2:	0002      	movs	r2, r0
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d904      	bls.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80077ac:	2313      	movs	r3, #19
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	2203      	movs	r2, #3
 80077b2:	701a      	strb	r2, [r3, #0]
        break;
 80077b4:	e005      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077b6:	4bac      	ldr	r3, [pc, #688]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	2380      	movs	r3, #128	; 0x80
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	4013      	ands	r3, r2
 80077c0:	d0ed      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80077c2:	2313      	movs	r3, #19
 80077c4:	18fb      	adds	r3, r7, r3
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d154      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80077cc:	4ba5      	ldr	r3, [pc, #660]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80077d0:	23c0      	movs	r3, #192	; 0xc0
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4013      	ands	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d019      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d014      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80077e8:	4b9e      	ldr	r3, [pc, #632]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ec:	4a9f      	ldr	r2, [pc, #636]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80077ee:	4013      	ands	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077f2:	4b9c      	ldr	r3, [pc, #624]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80077f6:	4b9b      	ldr	r3, [pc, #620]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80077f8:	2180      	movs	r1, #128	; 0x80
 80077fa:	0249      	lsls	r1, r1, #9
 80077fc:	430a      	orrs	r2, r1
 80077fe:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007800:	4b98      	ldr	r3, [pc, #608]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007802:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007804:	4b97      	ldr	r3, [pc, #604]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007806:	499a      	ldr	r1, [pc, #616]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007808:	400a      	ands	r2, r1
 800780a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800780c:	4b95      	ldr	r3, [pc, #596]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2201      	movs	r2, #1
 8007816:	4013      	ands	r3, r2
 8007818:	d016      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800781a:	f7fe f9d1 	bl	8005bc0 <HAL_GetTick>
 800781e:	0003      	movs	r3, r0
 8007820:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007822:	e00c      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007824:	f7fe f9cc 	bl	8005bc0 <HAL_GetTick>
 8007828:	0002      	movs	r2, r0
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	4a91      	ldr	r2, [pc, #580]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d904      	bls.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8007834:	2313      	movs	r3, #19
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	2203      	movs	r2, #3
 800783a:	701a      	strb	r2, [r3, #0]
            break;
 800783c:	e004      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800783e:	4b89      	ldr	r3, [pc, #548]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007842:	2202      	movs	r2, #2
 8007844:	4013      	ands	r3, r2
 8007846:	d0ed      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8007848:	2313      	movs	r3, #19
 800784a:	18fb      	adds	r3, r7, r3
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007852:	4b84      	ldr	r3, [pc, #528]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007856:	4a85      	ldr	r2, [pc, #532]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007858:	4013      	ands	r3, r2
 800785a:	0019      	movs	r1, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007860:	4b80      	ldr	r3, [pc, #512]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007862:	430a      	orrs	r2, r1
 8007864:	65da      	str	r2, [r3, #92]	; 0x5c
 8007866:	e00c      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007868:	2312      	movs	r3, #18
 800786a:	18fb      	adds	r3, r7, r3
 800786c:	2213      	movs	r2, #19
 800786e:	18ba      	adds	r2, r7, r2
 8007870:	7812      	ldrb	r2, [r2, #0]
 8007872:	701a      	strb	r2, [r3, #0]
 8007874:	e005      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007876:	2312      	movs	r3, #18
 8007878:	18fb      	adds	r3, r7, r3
 800787a:	2213      	movs	r2, #19
 800787c:	18ba      	adds	r2, r7, r2
 800787e:	7812      	ldrb	r2, [r2, #0]
 8007880:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007882:	2311      	movs	r3, #17
 8007884:	18fb      	adds	r3, r7, r3
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d105      	bne.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800788c:	4b75      	ldr	r3, [pc, #468]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800788e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007890:	4b74      	ldr	r3, [pc, #464]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007892:	4979      	ldr	r1, [pc, #484]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8007894:	400a      	ands	r2, r1
 8007896:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2201      	movs	r2, #1
 800789e:	4013      	ands	r3, r2
 80078a0:	d009      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078a2:	4b70      	ldr	r3, [pc, #448]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a6:	2203      	movs	r2, #3
 80078a8:	4393      	bics	r3, r2
 80078aa:	0019      	movs	r1, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	4b6c      	ldr	r3, [pc, #432]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078b2:	430a      	orrs	r2, r1
 80078b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2202      	movs	r2, #2
 80078bc:	4013      	ands	r3, r2
 80078be:	d009      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078c0:	4b68      	ldr	r3, [pc, #416]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c4:	220c      	movs	r2, #12
 80078c6:	4393      	bics	r3, r2
 80078c8:	0019      	movs	r1, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	4b65      	ldr	r3, [pc, #404]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078d0:	430a      	orrs	r2, r1
 80078d2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2220      	movs	r2, #32
 80078da:	4013      	ands	r3, r2
 80078dc:	d009      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078de:	4b61      	ldr	r3, [pc, #388]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e2:	4a66      	ldr	r2, [pc, #408]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	0019      	movs	r1, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	4b5d      	ldr	r3, [pc, #372]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80078ee:	430a      	orrs	r2, r1
 80078f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	2380      	movs	r3, #128	; 0x80
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4013      	ands	r3, r2
 80078fc:	d009      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078fe:	4b59      	ldr	r3, [pc, #356]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007902:	4a5f      	ldr	r2, [pc, #380]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007904:	4013      	ands	r3, r2
 8007906:	0019      	movs	r1, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699a      	ldr	r2, [r3, #24]
 800790c:	4b55      	ldr	r3, [pc, #340]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800790e:	430a      	orrs	r2, r1
 8007910:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	2380      	movs	r3, #128	; 0x80
 8007918:	00db      	lsls	r3, r3, #3
 800791a:	4013      	ands	r3, r2
 800791c:	d009      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800791e:	4b51      	ldr	r3, [pc, #324]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007922:	4a58      	ldr	r2, [pc, #352]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007924:	4013      	ands	r3, r2
 8007926:	0019      	movs	r1, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	69da      	ldr	r2, [r3, #28]
 800792c:	4b4d      	ldr	r3, [pc, #308]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800792e:	430a      	orrs	r2, r1
 8007930:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2240      	movs	r2, #64	; 0x40
 8007938:	4013      	ands	r3, r2
 800793a:	d009      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800793c:	4b49      	ldr	r3, [pc, #292]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800793e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007940:	4a51      	ldr	r2, [pc, #324]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8007942:	4013      	ands	r3, r2
 8007944:	0019      	movs	r1, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	4b46      	ldr	r3, [pc, #280]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800794c:	430a      	orrs	r2, r1
 800794e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	2380      	movs	r3, #128	; 0x80
 8007956:	01db      	lsls	r3, r3, #7
 8007958:	4013      	ands	r3, r2
 800795a:	d015      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800795c:	4b41      	ldr	r3, [pc, #260]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800795e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	0899      	lsrs	r1, r3, #2
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a1a      	ldr	r2, [r3, #32]
 8007968:	4b3e      	ldr	r3, [pc, #248]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800796a:	430a      	orrs	r2, r1
 800796c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1a      	ldr	r2, [r3, #32]
 8007972:	2380      	movs	r3, #128	; 0x80
 8007974:	05db      	lsls	r3, r3, #23
 8007976:	429a      	cmp	r2, r3
 8007978:	d106      	bne.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800797a:	4b3a      	ldr	r3, [pc, #232]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	4b39      	ldr	r3, [pc, #228]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007980:	2180      	movs	r1, #128	; 0x80
 8007982:	0249      	lsls	r1, r1, #9
 8007984:	430a      	orrs	r2, r1
 8007986:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	2380      	movs	r3, #128	; 0x80
 800798e:	031b      	lsls	r3, r3, #12
 8007990:	4013      	ands	r3, r2
 8007992:	d009      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007994:	4b33      	ldr	r3, [pc, #204]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007998:	2240      	movs	r2, #64	; 0x40
 800799a:	4393      	bics	r3, r2
 800799c:	0019      	movs	r1, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079a2:	4b30      	ldr	r3, [pc, #192]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80079a4:	430a      	orrs	r2, r1
 80079a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	2380      	movs	r3, #128	; 0x80
 80079ae:	039b      	lsls	r3, r3, #14
 80079b0:	4013      	ands	r3, r2
 80079b2:	d016      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80079b4:	4b2b      	ldr	r3, [pc, #172]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80079b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b8:	4a34      	ldr	r2, [pc, #208]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80079ba:	4013      	ands	r3, r2
 80079bc:	0019      	movs	r1, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079c2:	4b28      	ldr	r3, [pc, #160]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80079c4:	430a      	orrs	r2, r1
 80079c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079cc:	2380      	movs	r3, #128	; 0x80
 80079ce:	03db      	lsls	r3, r3, #15
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d106      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80079d4:	4b23      	ldr	r3, [pc, #140]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	4b22      	ldr	r3, [pc, #136]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80079da:	2180      	movs	r1, #128	; 0x80
 80079dc:	0449      	lsls	r1, r1, #17
 80079de:	430a      	orrs	r2, r1
 80079e0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	2380      	movs	r3, #128	; 0x80
 80079e8:	03db      	lsls	r3, r3, #15
 80079ea:	4013      	ands	r3, r2
 80079ec:	d016      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80079ee:	4b1d      	ldr	r3, [pc, #116]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	4a27      	ldr	r2, [pc, #156]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	0019      	movs	r1, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fc:	4b19      	ldr	r3, [pc, #100]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80079fe:	430a      	orrs	r2, r1
 8007a00:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a06:	2380      	movs	r3, #128	; 0x80
 8007a08:	045b      	lsls	r3, r3, #17
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d106      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007a0e:	4b15      	ldr	r3, [pc, #84]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	4b14      	ldr	r3, [pc, #80]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007a14:	2180      	movs	r1, #128	; 0x80
 8007a16:	0449      	lsls	r1, r1, #17
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	4013      	ands	r3, r2
 8007a26:	d016      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007a28:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2c:	4a19      	ldr	r2, [pc, #100]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8007a2e:	4013      	ands	r3, r2
 8007a30:	0019      	movs	r1, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695a      	ldr	r2, [r3, #20]
 8007a36:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	695a      	ldr	r2, [r3, #20]
 8007a40:	2380      	movs	r3, #128	; 0x80
 8007a42:	01db      	lsls	r3, r3, #7
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d106      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007a48:	4b06      	ldr	r3, [pc, #24]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007a4e:	2180      	movs	r1, #128	; 0x80
 8007a50:	0249      	lsls	r1, r1, #9
 8007a52:	430a      	orrs	r2, r1
 8007a54:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8007a56:	2312      	movs	r3, #18
 8007a58:	18fb      	adds	r3, r7, r3
 8007a5a:	781b      	ldrb	r3, [r3, #0]
}
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	b006      	add	sp, #24
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	40021000 	.word	0x40021000
 8007a68:	40007000 	.word	0x40007000
 8007a6c:	fffffcff 	.word	0xfffffcff
 8007a70:	fffeffff 	.word	0xfffeffff
 8007a74:	00001388 	.word	0x00001388
 8007a78:	efffffff 	.word	0xefffffff
 8007a7c:	fffff3ff 	.word	0xfffff3ff
 8007a80:	fff3ffff 	.word	0xfff3ffff
 8007a84:	ffcfffff 	.word	0xffcfffff
 8007a88:	ffffcfff 	.word	0xffffcfff
 8007a8c:	ffbfffff 	.word	0xffbfffff
 8007a90:	feffffff 	.word	0xfeffffff
 8007a94:	ffff3fff 	.word	0xffff3fff

08007a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e046      	b.n	8007b38 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2280      	movs	r2, #128	; 0x80
 8007aae:	589b      	ldr	r3, [r3, r2]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d107      	bne.n	8007ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	227c      	movs	r2, #124	; 0x7c
 8007ab8:	2100      	movs	r1, #0
 8007aba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f7fd ff2a 	bl	8005918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2280      	movs	r2, #128	; 0x80
 8007ac8:	2124      	movs	r1, #36	; 0x24
 8007aca:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	438a      	bics	r2, r1
 8007ada:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	0018      	movs	r0, r3
 8007ae0:	f000 f8dc 	bl	8007c9c <UART_SetConfig>
 8007ae4:	0003      	movs	r3, r0
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d101      	bne.n	8007aee <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e024      	b.n	8007b38 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	0018      	movs	r0, r3
 8007afa:	f001 f9c3 	bl	8008e84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	490d      	ldr	r1, [pc, #52]	; (8007b40 <HAL_UART_Init+0xa8>)
 8007b0a:	400a      	ands	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	212a      	movs	r1, #42	; 0x2a
 8007b1a:	438a      	bics	r2, r1
 8007b1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2101      	movs	r1, #1
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	0018      	movs	r0, r3
 8007b32:	f001 fa5b 	bl	8008fec <UART_CheckIdleState>
 8007b36:	0003      	movs	r3, r0
}
 8007b38:	0018      	movs	r0, r3
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b002      	add	sp, #8
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	ffffb7ff 	.word	0xffffb7ff

08007b44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af02      	add	r7, sp, #8
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	1dbb      	adds	r3, r7, #6
 8007b52:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2280      	movs	r2, #128	; 0x80
 8007b58:	589b      	ldr	r3, [r3, r2]
 8007b5a:	2b20      	cmp	r3, #32
 8007b5c:	d000      	beq.n	8007b60 <HAL_UART_Transmit+0x1c>
 8007b5e:	e097      	b.n	8007c90 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_UART_Transmit+0x2a>
 8007b66:	1dbb      	adds	r3, r7, #6
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e08f      	b.n	8007c92 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	2380      	movs	r3, #128	; 0x80
 8007b78:	015b      	lsls	r3, r3, #5
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d109      	bne.n	8007b92 <HAL_UART_Transmit+0x4e>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d105      	bne.n	8007b92 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	d001      	beq.n	8007b92 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e07f      	b.n	8007c92 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	227c      	movs	r2, #124	; 0x7c
 8007b96:	5c9b      	ldrb	r3, [r3, r2]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d101      	bne.n	8007ba0 <HAL_UART_Transmit+0x5c>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e078      	b.n	8007c92 <HAL_UART_Transmit+0x14e>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	227c      	movs	r2, #124	; 0x7c
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2288      	movs	r2, #136	; 0x88
 8007bac:	2100      	movs	r1, #0
 8007bae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2280      	movs	r2, #128	; 0x80
 8007bb4:	2121      	movs	r1, #33	; 0x21
 8007bb6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007bb8:	f7fe f802 	bl	8005bc0 <HAL_GetTick>
 8007bbc:	0003      	movs	r3, r0
 8007bbe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	1dba      	adds	r2, r7, #6
 8007bc4:	2154      	movs	r1, #84	; 0x54
 8007bc6:	8812      	ldrh	r2, [r2, #0]
 8007bc8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	1dba      	adds	r2, r7, #6
 8007bce:	2156      	movs	r1, #86	; 0x56
 8007bd0:	8812      	ldrh	r2, [r2, #0]
 8007bd2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	2380      	movs	r3, #128	; 0x80
 8007bda:	015b      	lsls	r3, r3, #5
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d108      	bne.n	8007bf2 <HAL_UART_Transmit+0xae>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d104      	bne.n	8007bf2 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8007be8:	2300      	movs	r3, #0
 8007bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	61bb      	str	r3, [r7, #24]
 8007bf0:	e003      	b.n	8007bfa <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007bfa:	e02c      	b.n	8007c56 <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	0013      	movs	r3, r2
 8007c06:	2200      	movs	r2, #0
 8007c08:	2180      	movs	r1, #128	; 0x80
 8007c0a:	f001 fa39 	bl	8009080 <UART_WaitOnFlagUntilTimeout>
 8007c0e:	1e03      	subs	r3, r0, #0
 8007c10:	d001      	beq.n	8007c16 <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e03d      	b.n	8007c92 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	001a      	movs	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	05d2      	lsls	r2, r2, #23
 8007c28:	0dd2      	lsrs	r2, r2, #23
 8007c2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	3302      	adds	r3, #2
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	e007      	b.n	8007c44 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	781a      	ldrb	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	3301      	adds	r3, #1
 8007c42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2256      	movs	r2, #86	; 0x56
 8007c48:	5a9b      	ldrh	r3, [r3, r2]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b299      	uxth	r1, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2256      	movs	r2, #86	; 0x56
 8007c54:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2256      	movs	r2, #86	; 0x56
 8007c5a:	5a9b      	ldrh	r3, [r3, r2]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1cc      	bne.n	8007bfc <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	0013      	movs	r3, r2
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2140      	movs	r1, #64	; 0x40
 8007c70:	f001 fa06 	bl	8009080 <UART_WaitOnFlagUntilTimeout>
 8007c74:	1e03      	subs	r3, r0, #0
 8007c76:	d001      	beq.n	8007c7c <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e00a      	b.n	8007c92 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2280      	movs	r2, #128	; 0x80
 8007c80:	2120      	movs	r1, #32
 8007c82:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	227c      	movs	r2, #124	; 0x7c
 8007c88:	2100      	movs	r1, #0
 8007c8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	e000      	b.n	8007c92 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8007c90:	2302      	movs	r3, #2
  }
}
 8007c92:	0018      	movs	r0, r3
 8007c94:	46bd      	mov	sp, r7
 8007c96:	b008      	add	sp, #32
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c9e:	b0a1      	sub	sp, #132	; 0x84
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ca8:	231b      	movs	r3, #27
 8007caa:	2258      	movs	r2, #88	; 0x58
 8007cac:	18ba      	adds	r2, r7, r2
 8007cae:	18d2      	adds	r2, r2, r3
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8007cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007cd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	4bba      	ldr	r3, [pc, #744]	; (8007fcc <UART_SetConfig+0x330>)
 8007ce2:	401a      	ands	r2, r3
 8007ce4:	0011      	movs	r1, r2
 8007ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cec:	430b      	orrs	r3, r1
 8007cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	4bb6      	ldr	r3, [pc, #728]	; (8007fd0 <UART_SetConfig+0x334>)
 8007cf8:	401a      	ands	r2, r3
 8007cfa:	0010      	movs	r0, r2
 8007cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cfe:	68d9      	ldr	r1, [r3, #12]
 8007d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	0003      	movs	r3, r0
 8007d06:	430b      	orrs	r3, r1
 8007d08:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	4baf      	ldr	r3, [pc, #700]	; (8007fd4 <UART_SetConfig+0x338>)
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d004      	beq.n	8007d24 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d1c:	6a1a      	ldr	r2, [r3, #32]
 8007d1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d20:	4313      	orrs	r3, r2
 8007d22:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	4bab      	ldr	r3, [pc, #684]	; (8007fd8 <UART_SetConfig+0x33c>)
 8007d2c:	401a      	ands	r2, r3
 8007d2e:	0011      	movs	r1, r2
 8007d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d36:	430b      	orrs	r3, r1
 8007d38:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d40:	230f      	movs	r3, #15
 8007d42:	439a      	bics	r2, r3
 8007d44:	0010      	movs	r0, r2
 8007d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	0003      	movs	r3, r0
 8007d50:	430b      	orrs	r3, r1
 8007d52:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	4ba0      	ldr	r3, [pc, #640]	; (8007fdc <UART_SetConfig+0x340>)
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d12f      	bne.n	8007dbe <UART_SetConfig+0x122>
 8007d5e:	4ba0      	ldr	r3, [pc, #640]	; (8007fe0 <UART_SetConfig+0x344>)
 8007d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d62:	2303      	movs	r3, #3
 8007d64:	4013      	ands	r3, r2
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d013      	beq.n	8007d92 <UART_SetConfig+0xf6>
 8007d6a:	d304      	bcc.n	8007d76 <UART_SetConfig+0xda>
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d009      	beq.n	8007d84 <UART_SetConfig+0xe8>
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d015      	beq.n	8007da0 <UART_SetConfig+0x104>
 8007d74:	e01b      	b.n	8007dae <UART_SetConfig+0x112>
 8007d76:	2323      	movs	r3, #35	; 0x23
 8007d78:	2258      	movs	r2, #88	; 0x58
 8007d7a:	18ba      	adds	r2, r7, r2
 8007d7c:	18d2      	adds	r2, r2, r3
 8007d7e:	2300      	movs	r3, #0
 8007d80:	7013      	strb	r3, [r2, #0]
 8007d82:	e0b4      	b.n	8007eee <UART_SetConfig+0x252>
 8007d84:	2323      	movs	r3, #35	; 0x23
 8007d86:	2258      	movs	r2, #88	; 0x58
 8007d88:	18ba      	adds	r2, r7, r2
 8007d8a:	18d2      	adds	r2, r2, r3
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	7013      	strb	r3, [r2, #0]
 8007d90:	e0ad      	b.n	8007eee <UART_SetConfig+0x252>
 8007d92:	2323      	movs	r3, #35	; 0x23
 8007d94:	2258      	movs	r2, #88	; 0x58
 8007d96:	18ba      	adds	r2, r7, r2
 8007d98:	18d2      	adds	r2, r2, r3
 8007d9a:	2304      	movs	r3, #4
 8007d9c:	7013      	strb	r3, [r2, #0]
 8007d9e:	e0a6      	b.n	8007eee <UART_SetConfig+0x252>
 8007da0:	2323      	movs	r3, #35	; 0x23
 8007da2:	2258      	movs	r2, #88	; 0x58
 8007da4:	18ba      	adds	r2, r7, r2
 8007da6:	18d2      	adds	r2, r2, r3
 8007da8:	2308      	movs	r3, #8
 8007daa:	7013      	strb	r3, [r2, #0]
 8007dac:	e09f      	b.n	8007eee <UART_SetConfig+0x252>
 8007dae:	2323      	movs	r3, #35	; 0x23
 8007db0:	2258      	movs	r2, #88	; 0x58
 8007db2:	18ba      	adds	r2, r7, r2
 8007db4:	18d2      	adds	r2, r2, r3
 8007db6:	2310      	movs	r3, #16
 8007db8:	7013      	strb	r3, [r2, #0]
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	e097      	b.n	8007eee <UART_SetConfig+0x252>
 8007dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4b88      	ldr	r3, [pc, #544]	; (8007fe4 <UART_SetConfig+0x348>)
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d132      	bne.n	8007e2e <UART_SetConfig+0x192>
 8007dc8:	4b85      	ldr	r3, [pc, #532]	; (8007fe0 <UART_SetConfig+0x344>)
 8007dca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dcc:	230c      	movs	r3, #12
 8007dce:	4013      	ands	r3, r2
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d016      	beq.n	8007e02 <UART_SetConfig+0x166>
 8007dd4:	d802      	bhi.n	8007ddc <UART_SetConfig+0x140>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d005      	beq.n	8007de6 <UART_SetConfig+0x14a>
 8007dda:	e020      	b.n	8007e1e <UART_SetConfig+0x182>
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d009      	beq.n	8007df4 <UART_SetConfig+0x158>
 8007de0:	2b0c      	cmp	r3, #12
 8007de2:	d015      	beq.n	8007e10 <UART_SetConfig+0x174>
 8007de4:	e01b      	b.n	8007e1e <UART_SetConfig+0x182>
 8007de6:	2323      	movs	r3, #35	; 0x23
 8007de8:	2258      	movs	r2, #88	; 0x58
 8007dea:	18ba      	adds	r2, r7, r2
 8007dec:	18d2      	adds	r2, r2, r3
 8007dee:	2300      	movs	r3, #0
 8007df0:	7013      	strb	r3, [r2, #0]
 8007df2:	e07c      	b.n	8007eee <UART_SetConfig+0x252>
 8007df4:	2323      	movs	r3, #35	; 0x23
 8007df6:	2258      	movs	r2, #88	; 0x58
 8007df8:	18ba      	adds	r2, r7, r2
 8007dfa:	18d2      	adds	r2, r2, r3
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	7013      	strb	r3, [r2, #0]
 8007e00:	e075      	b.n	8007eee <UART_SetConfig+0x252>
 8007e02:	2323      	movs	r3, #35	; 0x23
 8007e04:	2258      	movs	r2, #88	; 0x58
 8007e06:	18ba      	adds	r2, r7, r2
 8007e08:	18d2      	adds	r2, r2, r3
 8007e0a:	2304      	movs	r3, #4
 8007e0c:	7013      	strb	r3, [r2, #0]
 8007e0e:	e06e      	b.n	8007eee <UART_SetConfig+0x252>
 8007e10:	2323      	movs	r3, #35	; 0x23
 8007e12:	2258      	movs	r2, #88	; 0x58
 8007e14:	18ba      	adds	r2, r7, r2
 8007e16:	18d2      	adds	r2, r2, r3
 8007e18:	2308      	movs	r3, #8
 8007e1a:	7013      	strb	r3, [r2, #0]
 8007e1c:	e067      	b.n	8007eee <UART_SetConfig+0x252>
 8007e1e:	2323      	movs	r3, #35	; 0x23
 8007e20:	2258      	movs	r2, #88	; 0x58
 8007e22:	18ba      	adds	r2, r7, r2
 8007e24:	18d2      	adds	r2, r2, r3
 8007e26:	2310      	movs	r3, #16
 8007e28:	7013      	strb	r3, [r2, #0]
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	e05f      	b.n	8007eee <UART_SetConfig+0x252>
 8007e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	4b6d      	ldr	r3, [pc, #436]	; (8007fe8 <UART_SetConfig+0x34c>)
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d106      	bne.n	8007e46 <UART_SetConfig+0x1aa>
 8007e38:	2323      	movs	r3, #35	; 0x23
 8007e3a:	2258      	movs	r2, #88	; 0x58
 8007e3c:	18ba      	adds	r2, r7, r2
 8007e3e:	18d2      	adds	r2, r2, r3
 8007e40:	2300      	movs	r3, #0
 8007e42:	7013      	strb	r3, [r2, #0]
 8007e44:	e053      	b.n	8007eee <UART_SetConfig+0x252>
 8007e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	4b68      	ldr	r3, [pc, #416]	; (8007fec <UART_SetConfig+0x350>)
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d106      	bne.n	8007e5e <UART_SetConfig+0x1c2>
 8007e50:	2323      	movs	r3, #35	; 0x23
 8007e52:	2258      	movs	r2, #88	; 0x58
 8007e54:	18ba      	adds	r2, r7, r2
 8007e56:	18d2      	adds	r2, r2, r3
 8007e58:	2300      	movs	r3, #0
 8007e5a:	7013      	strb	r3, [r2, #0]
 8007e5c:	e047      	b.n	8007eee <UART_SetConfig+0x252>
 8007e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	4b5c      	ldr	r3, [pc, #368]	; (8007fd4 <UART_SetConfig+0x338>)
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d13c      	bne.n	8007ee2 <UART_SetConfig+0x246>
 8007e68:	4b5d      	ldr	r3, [pc, #372]	; (8007fe0 <UART_SetConfig+0x344>)
 8007e6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e6c:	23c0      	movs	r3, #192	; 0xc0
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	401a      	ands	r2, r3
 8007e72:	2380      	movs	r3, #128	; 0x80
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d01d      	beq.n	8007eb6 <UART_SetConfig+0x21a>
 8007e7a:	2380      	movs	r3, #128	; 0x80
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d802      	bhi.n	8007e88 <UART_SetConfig+0x1ec>
 8007e82:	2a00      	cmp	r2, #0
 8007e84:	d009      	beq.n	8007e9a <UART_SetConfig+0x1fe>
 8007e86:	e024      	b.n	8007ed2 <UART_SetConfig+0x236>
 8007e88:	2380      	movs	r3, #128	; 0x80
 8007e8a:	011b      	lsls	r3, r3, #4
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d00b      	beq.n	8007ea8 <UART_SetConfig+0x20c>
 8007e90:	23c0      	movs	r3, #192	; 0xc0
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d015      	beq.n	8007ec4 <UART_SetConfig+0x228>
 8007e98:	e01b      	b.n	8007ed2 <UART_SetConfig+0x236>
 8007e9a:	2323      	movs	r3, #35	; 0x23
 8007e9c:	2258      	movs	r2, #88	; 0x58
 8007e9e:	18ba      	adds	r2, r7, r2
 8007ea0:	18d2      	adds	r2, r2, r3
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	7013      	strb	r3, [r2, #0]
 8007ea6:	e022      	b.n	8007eee <UART_SetConfig+0x252>
 8007ea8:	2323      	movs	r3, #35	; 0x23
 8007eaa:	2258      	movs	r2, #88	; 0x58
 8007eac:	18ba      	adds	r2, r7, r2
 8007eae:	18d2      	adds	r2, r2, r3
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	7013      	strb	r3, [r2, #0]
 8007eb4:	e01b      	b.n	8007eee <UART_SetConfig+0x252>
 8007eb6:	2323      	movs	r3, #35	; 0x23
 8007eb8:	2258      	movs	r2, #88	; 0x58
 8007eba:	18ba      	adds	r2, r7, r2
 8007ebc:	18d2      	adds	r2, r2, r3
 8007ebe:	2304      	movs	r3, #4
 8007ec0:	7013      	strb	r3, [r2, #0]
 8007ec2:	e014      	b.n	8007eee <UART_SetConfig+0x252>
 8007ec4:	2323      	movs	r3, #35	; 0x23
 8007ec6:	2258      	movs	r2, #88	; 0x58
 8007ec8:	18ba      	adds	r2, r7, r2
 8007eca:	18d2      	adds	r2, r2, r3
 8007ecc:	2308      	movs	r3, #8
 8007ece:	7013      	strb	r3, [r2, #0]
 8007ed0:	e00d      	b.n	8007eee <UART_SetConfig+0x252>
 8007ed2:	2323      	movs	r3, #35	; 0x23
 8007ed4:	2258      	movs	r2, #88	; 0x58
 8007ed6:	18ba      	adds	r2, r7, r2
 8007ed8:	18d2      	adds	r2, r2, r3
 8007eda:	2310      	movs	r3, #16
 8007edc:	7013      	strb	r3, [r2, #0]
 8007ede:	46c0      	nop			; (mov r8, r8)
 8007ee0:	e005      	b.n	8007eee <UART_SetConfig+0x252>
 8007ee2:	2323      	movs	r3, #35	; 0x23
 8007ee4:	2258      	movs	r2, #88	; 0x58
 8007ee6:	18ba      	adds	r2, r7, r2
 8007ee8:	18d2      	adds	r2, r2, r3
 8007eea:	2310      	movs	r3, #16
 8007eec:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b38      	ldr	r3, [pc, #224]	; (8007fd4 <UART_SetConfig+0x338>)
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d001      	beq.n	8007efc <UART_SetConfig+0x260>
 8007ef8:	f000 fbd0 	bl	800869c <UART_SetConfig+0xa00>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007efc:	2323      	movs	r3, #35	; 0x23
 8007efe:	2258      	movs	r2, #88	; 0x58
 8007f00:	4694      	mov	ip, r2
 8007f02:	44bc      	add	ip, r7
 8007f04:	4463      	add	r3, ip
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d100      	bne.n	8007f0e <UART_SetConfig+0x272>
 8007f0c:	e070      	b.n	8007ff0 <UART_SetConfig+0x354>
 8007f0e:	dc02      	bgt.n	8007f16 <UART_SetConfig+0x27a>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d007      	beq.n	8007f24 <UART_SetConfig+0x288>
 8007f14:	e15f      	b.n	80081d6 <UART_SetConfig+0x53a>
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d100      	bne.n	8007f1c <UART_SetConfig+0x280>
 8007f1a:	e0b4      	b.n	8008086 <UART_SetConfig+0x3ea>
 8007f1c:	2b08      	cmp	r3, #8
 8007f1e:	d100      	bne.n	8007f22 <UART_SetConfig+0x286>
 8007f20:	e105      	b.n	800812e <UART_SetConfig+0x492>
 8007f22:	e158      	b.n	80081d6 <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007f24:	f7ff fbea 	bl	80076fc <HAL_RCC_GetPCLK1Freq>
 8007f28:	0002      	movs	r2, r0
 8007f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d044      	beq.n	8007fbc <UART_SetConfig+0x320>
 8007f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d03e      	beq.n	8007fb8 <UART_SetConfig+0x31c>
 8007f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d038      	beq.n	8007fb4 <UART_SetConfig+0x318>
 8007f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d032      	beq.n	8007fb0 <UART_SetConfig+0x314>
 8007f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d02c      	beq.n	8007fac <UART_SetConfig+0x310>
 8007f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	2b05      	cmp	r3, #5
 8007f58:	d026      	beq.n	8007fa8 <UART_SetConfig+0x30c>
 8007f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	2b06      	cmp	r3, #6
 8007f60:	d020      	beq.n	8007fa4 <UART_SetConfig+0x308>
 8007f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	2b07      	cmp	r3, #7
 8007f68:	d01a      	beq.n	8007fa0 <UART_SetConfig+0x304>
 8007f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	2b08      	cmp	r3, #8
 8007f70:	d014      	beq.n	8007f9c <UART_SetConfig+0x300>
 8007f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	2b09      	cmp	r3, #9
 8007f78:	d00e      	beq.n	8007f98 <UART_SetConfig+0x2fc>
 8007f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	2b0a      	cmp	r3, #10
 8007f80:	d008      	beq.n	8007f94 <UART_SetConfig+0x2f8>
 8007f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b0b      	cmp	r3, #11
 8007f88:	d102      	bne.n	8007f90 <UART_SetConfig+0x2f4>
 8007f8a:	2380      	movs	r3, #128	; 0x80
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	e016      	b.n	8007fbe <UART_SetConfig+0x322>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e014      	b.n	8007fbe <UART_SetConfig+0x322>
 8007f94:	2380      	movs	r3, #128	; 0x80
 8007f96:	e012      	b.n	8007fbe <UART_SetConfig+0x322>
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	e010      	b.n	8007fbe <UART_SetConfig+0x322>
 8007f9c:	2320      	movs	r3, #32
 8007f9e:	e00e      	b.n	8007fbe <UART_SetConfig+0x322>
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	e00c      	b.n	8007fbe <UART_SetConfig+0x322>
 8007fa4:	230c      	movs	r3, #12
 8007fa6:	e00a      	b.n	8007fbe <UART_SetConfig+0x322>
 8007fa8:	230a      	movs	r3, #10
 8007faa:	e008      	b.n	8007fbe <UART_SetConfig+0x322>
 8007fac:	2308      	movs	r3, #8
 8007fae:	e006      	b.n	8007fbe <UART_SetConfig+0x322>
 8007fb0:	2306      	movs	r3, #6
 8007fb2:	e004      	b.n	8007fbe <UART_SetConfig+0x322>
 8007fb4:	2304      	movs	r3, #4
 8007fb6:	e002      	b.n	8007fbe <UART_SetConfig+0x322>
 8007fb8:	2302      	movs	r3, #2
 8007fba:	e000      	b.n	8007fbe <UART_SetConfig+0x322>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	0019      	movs	r1, r3
 8007fc0:	0010      	movs	r0, r2
 8007fc2:	f7f8 f8a7 	bl	8000114 <__udivsi3>
 8007fc6:	0003      	movs	r3, r0
 8007fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8007fca:	e10b      	b.n	80081e4 <UART_SetConfig+0x548>
 8007fcc:	cfff69f3 	.word	0xcfff69f3
 8007fd0:	ffffcfff 	.word	0xffffcfff
 8007fd4:	40008000 	.word	0x40008000
 8007fd8:	11fff4ff 	.word	0x11fff4ff
 8007fdc:	40013800 	.word	0x40013800
 8007fe0:	40021000 	.word	0x40021000
 8007fe4:	40004400 	.word	0x40004400
 8007fe8:	40004800 	.word	0x40004800
 8007fec:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d043      	beq.n	8008080 <UART_SetConfig+0x3e4>
 8007ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d03d      	beq.n	800807c <UART_SetConfig+0x3e0>
 8008000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	2b02      	cmp	r3, #2
 8008006:	d037      	beq.n	8008078 <UART_SetConfig+0x3dc>
 8008008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	2b03      	cmp	r3, #3
 800800e:	d031      	beq.n	8008074 <UART_SetConfig+0x3d8>
 8008010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	2b04      	cmp	r3, #4
 8008016:	d02b      	beq.n	8008070 <UART_SetConfig+0x3d4>
 8008018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	2b05      	cmp	r3, #5
 800801e:	d025      	beq.n	800806c <UART_SetConfig+0x3d0>
 8008020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	2b06      	cmp	r3, #6
 8008026:	d01f      	beq.n	8008068 <UART_SetConfig+0x3cc>
 8008028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	2b07      	cmp	r3, #7
 800802e:	d019      	beq.n	8008064 <UART_SetConfig+0x3c8>
 8008030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	2b08      	cmp	r3, #8
 8008036:	d013      	beq.n	8008060 <UART_SetConfig+0x3c4>
 8008038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	2b09      	cmp	r3, #9
 800803e:	d00d      	beq.n	800805c <UART_SetConfig+0x3c0>
 8008040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	2b0a      	cmp	r3, #10
 8008046:	d007      	beq.n	8008058 <UART_SetConfig+0x3bc>
 8008048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	2b0b      	cmp	r3, #11
 800804e:	d101      	bne.n	8008054 <UART_SetConfig+0x3b8>
 8008050:	4bab      	ldr	r3, [pc, #684]	; (8008300 <UART_SetConfig+0x664>)
 8008052:	e016      	b.n	8008082 <UART_SetConfig+0x3e6>
 8008054:	4bab      	ldr	r3, [pc, #684]	; (8008304 <UART_SetConfig+0x668>)
 8008056:	e014      	b.n	8008082 <UART_SetConfig+0x3e6>
 8008058:	4bab      	ldr	r3, [pc, #684]	; (8008308 <UART_SetConfig+0x66c>)
 800805a:	e012      	b.n	8008082 <UART_SetConfig+0x3e6>
 800805c:	4bab      	ldr	r3, [pc, #684]	; (800830c <UART_SetConfig+0x670>)
 800805e:	e010      	b.n	8008082 <UART_SetConfig+0x3e6>
 8008060:	4bab      	ldr	r3, [pc, #684]	; (8008310 <UART_SetConfig+0x674>)
 8008062:	e00e      	b.n	8008082 <UART_SetConfig+0x3e6>
 8008064:	4bab      	ldr	r3, [pc, #684]	; (8008314 <UART_SetConfig+0x678>)
 8008066:	e00c      	b.n	8008082 <UART_SetConfig+0x3e6>
 8008068:	4bab      	ldr	r3, [pc, #684]	; (8008318 <UART_SetConfig+0x67c>)
 800806a:	e00a      	b.n	8008082 <UART_SetConfig+0x3e6>
 800806c:	4bab      	ldr	r3, [pc, #684]	; (800831c <UART_SetConfig+0x680>)
 800806e:	e008      	b.n	8008082 <UART_SetConfig+0x3e6>
 8008070:	4bab      	ldr	r3, [pc, #684]	; (8008320 <UART_SetConfig+0x684>)
 8008072:	e006      	b.n	8008082 <UART_SetConfig+0x3e6>
 8008074:	4bab      	ldr	r3, [pc, #684]	; (8008324 <UART_SetConfig+0x688>)
 8008076:	e004      	b.n	8008082 <UART_SetConfig+0x3e6>
 8008078:	4bab      	ldr	r3, [pc, #684]	; (8008328 <UART_SetConfig+0x68c>)
 800807a:	e002      	b.n	8008082 <UART_SetConfig+0x3e6>
 800807c:	4bab      	ldr	r3, [pc, #684]	; (800832c <UART_SetConfig+0x690>)
 800807e:	e000      	b.n	8008082 <UART_SetConfig+0x3e6>
 8008080:	4ba0      	ldr	r3, [pc, #640]	; (8008304 <UART_SetConfig+0x668>)
 8008082:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8008084:	e0ae      	b.n	80081e4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008086:	f7ff faad 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 800808a:	0002      	movs	r2, r0
 800808c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	d044      	beq.n	800811e <UART_SetConfig+0x482>
 8008094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	2b01      	cmp	r3, #1
 800809a:	d03e      	beq.n	800811a <UART_SetConfig+0x47e>
 800809c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d038      	beq.n	8008116 <UART_SetConfig+0x47a>
 80080a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d032      	beq.n	8008112 <UART_SetConfig+0x476>
 80080ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	2b04      	cmp	r3, #4
 80080b2:	d02c      	beq.n	800810e <UART_SetConfig+0x472>
 80080b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	2b05      	cmp	r3, #5
 80080ba:	d026      	beq.n	800810a <UART_SetConfig+0x46e>
 80080bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	2b06      	cmp	r3, #6
 80080c2:	d020      	beq.n	8008106 <UART_SetConfig+0x46a>
 80080c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	2b07      	cmp	r3, #7
 80080ca:	d01a      	beq.n	8008102 <UART_SetConfig+0x466>
 80080cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	2b08      	cmp	r3, #8
 80080d2:	d014      	beq.n	80080fe <UART_SetConfig+0x462>
 80080d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	2b09      	cmp	r3, #9
 80080da:	d00e      	beq.n	80080fa <UART_SetConfig+0x45e>
 80080dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	2b0a      	cmp	r3, #10
 80080e2:	d008      	beq.n	80080f6 <UART_SetConfig+0x45a>
 80080e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	2b0b      	cmp	r3, #11
 80080ea:	d102      	bne.n	80080f2 <UART_SetConfig+0x456>
 80080ec:	2380      	movs	r3, #128	; 0x80
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	e016      	b.n	8008120 <UART_SetConfig+0x484>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e014      	b.n	8008120 <UART_SetConfig+0x484>
 80080f6:	2380      	movs	r3, #128	; 0x80
 80080f8:	e012      	b.n	8008120 <UART_SetConfig+0x484>
 80080fa:	2340      	movs	r3, #64	; 0x40
 80080fc:	e010      	b.n	8008120 <UART_SetConfig+0x484>
 80080fe:	2320      	movs	r3, #32
 8008100:	e00e      	b.n	8008120 <UART_SetConfig+0x484>
 8008102:	2310      	movs	r3, #16
 8008104:	e00c      	b.n	8008120 <UART_SetConfig+0x484>
 8008106:	230c      	movs	r3, #12
 8008108:	e00a      	b.n	8008120 <UART_SetConfig+0x484>
 800810a:	230a      	movs	r3, #10
 800810c:	e008      	b.n	8008120 <UART_SetConfig+0x484>
 800810e:	2308      	movs	r3, #8
 8008110:	e006      	b.n	8008120 <UART_SetConfig+0x484>
 8008112:	2306      	movs	r3, #6
 8008114:	e004      	b.n	8008120 <UART_SetConfig+0x484>
 8008116:	2304      	movs	r3, #4
 8008118:	e002      	b.n	8008120 <UART_SetConfig+0x484>
 800811a:	2302      	movs	r3, #2
 800811c:	e000      	b.n	8008120 <UART_SetConfig+0x484>
 800811e:	2301      	movs	r3, #1
 8008120:	0019      	movs	r1, r3
 8008122:	0010      	movs	r0, r2
 8008124:	f7f7 fff6 	bl	8000114 <__udivsi3>
 8008128:	0003      	movs	r3, r0
 800812a:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800812c:	e05a      	b.n	80081e4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800812e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	2b00      	cmp	r3, #0
 8008134:	d04b      	beq.n	80081ce <UART_SetConfig+0x532>
 8008136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	2b01      	cmp	r3, #1
 800813c:	d044      	beq.n	80081c8 <UART_SetConfig+0x52c>
 800813e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	2b02      	cmp	r3, #2
 8008144:	d03d      	beq.n	80081c2 <UART_SetConfig+0x526>
 8008146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	2b03      	cmp	r3, #3
 800814c:	d037      	beq.n	80081be <UART_SetConfig+0x522>
 800814e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	2b04      	cmp	r3, #4
 8008154:	d030      	beq.n	80081b8 <UART_SetConfig+0x51c>
 8008156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	2b05      	cmp	r3, #5
 800815c:	d02a      	beq.n	80081b4 <UART_SetConfig+0x518>
 800815e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	2b06      	cmp	r3, #6
 8008164:	d024      	beq.n	80081b0 <UART_SetConfig+0x514>
 8008166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	2b07      	cmp	r3, #7
 800816c:	d01d      	beq.n	80081aa <UART_SetConfig+0x50e>
 800816e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	2b08      	cmp	r3, #8
 8008174:	d016      	beq.n	80081a4 <UART_SetConfig+0x508>
 8008176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	2b09      	cmp	r3, #9
 800817c:	d00f      	beq.n	800819e <UART_SetConfig+0x502>
 800817e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	2b0a      	cmp	r3, #10
 8008184:	d008      	beq.n	8008198 <UART_SetConfig+0x4fc>
 8008186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	2b0b      	cmp	r3, #11
 800818c:	d101      	bne.n	8008192 <UART_SetConfig+0x4f6>
 800818e:	2380      	movs	r3, #128	; 0x80
 8008190:	e01f      	b.n	80081d2 <UART_SetConfig+0x536>
 8008192:	2380      	movs	r3, #128	; 0x80
 8008194:	021b      	lsls	r3, r3, #8
 8008196:	e01c      	b.n	80081d2 <UART_SetConfig+0x536>
 8008198:	2380      	movs	r3, #128	; 0x80
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	e019      	b.n	80081d2 <UART_SetConfig+0x536>
 800819e:	2380      	movs	r3, #128	; 0x80
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	e016      	b.n	80081d2 <UART_SetConfig+0x536>
 80081a4:	2380      	movs	r3, #128	; 0x80
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	e013      	b.n	80081d2 <UART_SetConfig+0x536>
 80081aa:	2380      	movs	r3, #128	; 0x80
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	e010      	b.n	80081d2 <UART_SetConfig+0x536>
 80081b0:	4b5f      	ldr	r3, [pc, #380]	; (8008330 <UART_SetConfig+0x694>)
 80081b2:	e00e      	b.n	80081d2 <UART_SetConfig+0x536>
 80081b4:	4b5f      	ldr	r3, [pc, #380]	; (8008334 <UART_SetConfig+0x698>)
 80081b6:	e00c      	b.n	80081d2 <UART_SetConfig+0x536>
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	015b      	lsls	r3, r3, #5
 80081bc:	e009      	b.n	80081d2 <UART_SetConfig+0x536>
 80081be:	4b5e      	ldr	r3, [pc, #376]	; (8008338 <UART_SetConfig+0x69c>)
 80081c0:	e007      	b.n	80081d2 <UART_SetConfig+0x536>
 80081c2:	2380      	movs	r3, #128	; 0x80
 80081c4:	019b      	lsls	r3, r3, #6
 80081c6:	e004      	b.n	80081d2 <UART_SetConfig+0x536>
 80081c8:	2380      	movs	r3, #128	; 0x80
 80081ca:	01db      	lsls	r3, r3, #7
 80081cc:	e001      	b.n	80081d2 <UART_SetConfig+0x536>
 80081ce:	2380      	movs	r3, #128	; 0x80
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80081d4:	e006      	b.n	80081e4 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 80081d6:	231b      	movs	r3, #27
 80081d8:	2258      	movs	r2, #88	; 0x58
 80081da:	18ba      	adds	r2, r7, r2
 80081dc:	18d2      	adds	r2, r2, r3
 80081de:	2301      	movs	r3, #1
 80081e0:	7013      	strb	r3, [r2, #0]
        break;
 80081e2:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80081e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <UART_SetConfig+0x552>
 80081ea:	f000 fe12 	bl	8008e12 <UART_SetConfig+0x1176>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	0013      	movs	r3, r2
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	189a      	adds	r2, r3, r2
 80081f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d305      	bcc.n	800820a <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008206:	4293      	cmp	r3, r2
 8008208:	d908      	bls.n	800821c <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 800820a:	231b      	movs	r3, #27
 800820c:	2258      	movs	r2, #88	; 0x58
 800820e:	4694      	mov	ip, r2
 8008210:	44bc      	add	ip, r7
 8008212:	4463      	add	r3, ip
 8008214:	2201      	movs	r2, #1
 8008216:	701a      	strb	r2, [r3, #0]
 8008218:	f000 fdfb 	bl	8008e12 <UART_SetConfig+0x1176>
      }
      else
      {
        switch (clocksource)
 800821c:	2323      	movs	r3, #35	; 0x23
 800821e:	2258      	movs	r2, #88	; 0x58
 8008220:	4694      	mov	ip, r2
 8008222:	44bc      	add	ip, r7
 8008224:	4463      	add	r3, ip
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2b02      	cmp	r3, #2
 800822a:	d100      	bne.n	800822e <UART_SetConfig+0x592>
 800822c:	e0ab      	b.n	8008386 <UART_SetConfig+0x6ea>
 800822e:	dc02      	bgt.n	8008236 <UART_SetConfig+0x59a>
 8008230:	2b00      	cmp	r3, #0
 8008232:	d007      	beq.n	8008244 <UART_SetConfig+0x5a8>
 8008234:	e213      	b.n	800865e <UART_SetConfig+0x9c2>
 8008236:	2b04      	cmp	r3, #4
 8008238:	d100      	bne.n	800823c <UART_SetConfig+0x5a0>
 800823a:	e111      	b.n	8008460 <UART_SetConfig+0x7c4>
 800823c:	2b08      	cmp	r3, #8
 800823e:	d100      	bne.n	8008242 <UART_SetConfig+0x5a6>
 8008240:	e196      	b.n	8008570 <UART_SetConfig+0x8d4>
 8008242:	e20c      	b.n	800865e <UART_SetConfig+0x9c2>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8008244:	f7ff fa5a 	bl	80076fc <HAL_RCC_GetPCLK1Freq>
 8008248:	0003      	movs	r3, r0
 800824a:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800824c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800824e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008250:	2300      	movs	r3, #0
 8008252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	2b00      	cmp	r3, #0
 800825a:	d100      	bne.n	800825e <UART_SetConfig+0x5c2>
 800825c:	e06e      	b.n	800833c <UART_SetConfig+0x6a0>
 800825e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	2b01      	cmp	r3, #1
 8008264:	d049      	beq.n	80082fa <UART_SetConfig+0x65e>
 8008266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	2b02      	cmp	r3, #2
 800826c:	d042      	beq.n	80082f4 <UART_SetConfig+0x658>
 800826e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	2b03      	cmp	r3, #3
 8008274:	d03b      	beq.n	80082ee <UART_SetConfig+0x652>
 8008276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	2b04      	cmp	r3, #4
 800827c:	d034      	beq.n	80082e8 <UART_SetConfig+0x64c>
 800827e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	2b05      	cmp	r3, #5
 8008284:	d02d      	beq.n	80082e2 <UART_SetConfig+0x646>
 8008286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	2b06      	cmp	r3, #6
 800828c:	d026      	beq.n	80082dc <UART_SetConfig+0x640>
 800828e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	2b07      	cmp	r3, #7
 8008294:	d01f      	beq.n	80082d6 <UART_SetConfig+0x63a>
 8008296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	2b08      	cmp	r3, #8
 800829c:	d018      	beq.n	80082d0 <UART_SetConfig+0x634>
 800829e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	2b09      	cmp	r3, #9
 80082a4:	d011      	beq.n	80082ca <UART_SetConfig+0x62e>
 80082a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b0a      	cmp	r3, #10
 80082ac:	d00a      	beq.n	80082c4 <UART_SetConfig+0x628>
 80082ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b0b      	cmp	r3, #11
 80082b4:	d103      	bne.n	80082be <UART_SetConfig+0x622>
 80082b6:	2380      	movs	r3, #128	; 0x80
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	2400      	movs	r4, #0
 80082bc:	e040      	b.n	8008340 <UART_SetConfig+0x6a4>
 80082be:	2301      	movs	r3, #1
 80082c0:	2400      	movs	r4, #0
 80082c2:	e03d      	b.n	8008340 <UART_SetConfig+0x6a4>
 80082c4:	2380      	movs	r3, #128	; 0x80
 80082c6:	2400      	movs	r4, #0
 80082c8:	e03a      	b.n	8008340 <UART_SetConfig+0x6a4>
 80082ca:	2340      	movs	r3, #64	; 0x40
 80082cc:	2400      	movs	r4, #0
 80082ce:	e037      	b.n	8008340 <UART_SetConfig+0x6a4>
 80082d0:	2320      	movs	r3, #32
 80082d2:	2400      	movs	r4, #0
 80082d4:	e034      	b.n	8008340 <UART_SetConfig+0x6a4>
 80082d6:	2310      	movs	r3, #16
 80082d8:	2400      	movs	r4, #0
 80082da:	e031      	b.n	8008340 <UART_SetConfig+0x6a4>
 80082dc:	230c      	movs	r3, #12
 80082de:	2400      	movs	r4, #0
 80082e0:	e02e      	b.n	8008340 <UART_SetConfig+0x6a4>
 80082e2:	230a      	movs	r3, #10
 80082e4:	2400      	movs	r4, #0
 80082e6:	e02b      	b.n	8008340 <UART_SetConfig+0x6a4>
 80082e8:	2308      	movs	r3, #8
 80082ea:	2400      	movs	r4, #0
 80082ec:	e028      	b.n	8008340 <UART_SetConfig+0x6a4>
 80082ee:	2306      	movs	r3, #6
 80082f0:	2400      	movs	r4, #0
 80082f2:	e025      	b.n	8008340 <UART_SetConfig+0x6a4>
 80082f4:	2304      	movs	r3, #4
 80082f6:	2400      	movs	r4, #0
 80082f8:	e022      	b.n	8008340 <UART_SetConfig+0x6a4>
 80082fa:	2302      	movs	r3, #2
 80082fc:	2400      	movs	r4, #0
 80082fe:	e01f      	b.n	8008340 <UART_SetConfig+0x6a4>
 8008300:	0000f424 	.word	0x0000f424
 8008304:	00f42400 	.word	0x00f42400
 8008308:	0001e848 	.word	0x0001e848
 800830c:	0003d090 	.word	0x0003d090
 8008310:	0007a120 	.word	0x0007a120
 8008314:	000f4240 	.word	0x000f4240
 8008318:	00145855 	.word	0x00145855
 800831c:	00186a00 	.word	0x00186a00
 8008320:	001e8480 	.word	0x001e8480
 8008324:	0028b0aa 	.word	0x0028b0aa
 8008328:	003d0900 	.word	0x003d0900
 800832c:	007a1200 	.word	0x007a1200
 8008330:	00000aaa 	.word	0x00000aaa
 8008334:	00000ccc 	.word	0x00000ccc
 8008338:	00001555 	.word	0x00001555
 800833c:	2301      	movs	r3, #1
 800833e:	2400      	movs	r4, #0
 8008340:	001a      	movs	r2, r3
 8008342:	0023      	movs	r3, r4
 8008344:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008346:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008348:	f7f8 f894 	bl	8000474 <__aeabi_uldivmod>
 800834c:	0003      	movs	r3, r0
 800834e:	000c      	movs	r4, r1
 8008350:	0e1a      	lsrs	r2, r3, #24
 8008352:	0226      	lsls	r6, r4, #8
 8008354:	4316      	orrs	r6, r2
 8008356:	021d      	lsls	r5, r3, #8
 8008358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	085b      	lsrs	r3, r3, #1
 800835e:	643b      	str	r3, [r7, #64]	; 0x40
 8008360:	2300      	movs	r3, #0
 8008362:	647b      	str	r3, [r7, #68]	; 0x44
 8008364:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008368:	1940      	adds	r0, r0, r5
 800836a:	4171      	adcs	r1, r6
 800836c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	63bb      	str	r3, [r7, #56]	; 0x38
 8008372:	2300      	movs	r3, #0
 8008374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837a:	f7f8 f87b 	bl	8000474 <__aeabi_uldivmod>
 800837e:	0003      	movs	r3, r0
 8008380:	000c      	movs	r4, r1
 8008382:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8008384:	e173      	b.n	800866e <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	d04f      	beq.n	800842e <UART_SetConfig+0x792>
 800838e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	2b01      	cmp	r3, #1
 8008394:	d048      	beq.n	8008428 <UART_SetConfig+0x78c>
 8008396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	2b02      	cmp	r3, #2
 800839c:	d041      	beq.n	8008422 <UART_SetConfig+0x786>
 800839e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d03a      	beq.n	800841c <UART_SetConfig+0x780>
 80083a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d033      	beq.n	8008416 <UART_SetConfig+0x77a>
 80083ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	2b05      	cmp	r3, #5
 80083b4:	d02c      	beq.n	8008410 <UART_SetConfig+0x774>
 80083b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	2b06      	cmp	r3, #6
 80083bc:	d025      	beq.n	800840a <UART_SetConfig+0x76e>
 80083be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	2b07      	cmp	r3, #7
 80083c4:	d01e      	beq.n	8008404 <UART_SetConfig+0x768>
 80083c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d017      	beq.n	80083fe <UART_SetConfig+0x762>
 80083ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	2b09      	cmp	r3, #9
 80083d4:	d010      	beq.n	80083f8 <UART_SetConfig+0x75c>
 80083d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	2b0a      	cmp	r3, #10
 80083dc:	d009      	beq.n	80083f2 <UART_SetConfig+0x756>
 80083de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	2b0b      	cmp	r3, #11
 80083e4:	d102      	bne.n	80083ec <UART_SetConfig+0x750>
 80083e6:	4bbb      	ldr	r3, [pc, #748]	; (80086d4 <UART_SetConfig+0xa38>)
 80083e8:	2400      	movs	r4, #0
 80083ea:	e022      	b.n	8008432 <UART_SetConfig+0x796>
 80083ec:	4bba      	ldr	r3, [pc, #744]	; (80086d8 <UART_SetConfig+0xa3c>)
 80083ee:	2400      	movs	r4, #0
 80083f0:	e01f      	b.n	8008432 <UART_SetConfig+0x796>
 80083f2:	4bba      	ldr	r3, [pc, #744]	; (80086dc <UART_SetConfig+0xa40>)
 80083f4:	2400      	movs	r4, #0
 80083f6:	e01c      	b.n	8008432 <UART_SetConfig+0x796>
 80083f8:	4bb9      	ldr	r3, [pc, #740]	; (80086e0 <UART_SetConfig+0xa44>)
 80083fa:	2400      	movs	r4, #0
 80083fc:	e019      	b.n	8008432 <UART_SetConfig+0x796>
 80083fe:	4bb9      	ldr	r3, [pc, #740]	; (80086e4 <UART_SetConfig+0xa48>)
 8008400:	2400      	movs	r4, #0
 8008402:	e016      	b.n	8008432 <UART_SetConfig+0x796>
 8008404:	4bb8      	ldr	r3, [pc, #736]	; (80086e8 <UART_SetConfig+0xa4c>)
 8008406:	2400      	movs	r4, #0
 8008408:	e013      	b.n	8008432 <UART_SetConfig+0x796>
 800840a:	4bb8      	ldr	r3, [pc, #736]	; (80086ec <UART_SetConfig+0xa50>)
 800840c:	2400      	movs	r4, #0
 800840e:	e010      	b.n	8008432 <UART_SetConfig+0x796>
 8008410:	4bb7      	ldr	r3, [pc, #732]	; (80086f0 <UART_SetConfig+0xa54>)
 8008412:	2400      	movs	r4, #0
 8008414:	e00d      	b.n	8008432 <UART_SetConfig+0x796>
 8008416:	4bb7      	ldr	r3, [pc, #732]	; (80086f4 <UART_SetConfig+0xa58>)
 8008418:	2400      	movs	r4, #0
 800841a:	e00a      	b.n	8008432 <UART_SetConfig+0x796>
 800841c:	4bb6      	ldr	r3, [pc, #728]	; (80086f8 <UART_SetConfig+0xa5c>)
 800841e:	2400      	movs	r4, #0
 8008420:	e007      	b.n	8008432 <UART_SetConfig+0x796>
 8008422:	4bb6      	ldr	r3, [pc, #728]	; (80086fc <UART_SetConfig+0xa60>)
 8008424:	2400      	movs	r4, #0
 8008426:	e004      	b.n	8008432 <UART_SetConfig+0x796>
 8008428:	4bb5      	ldr	r3, [pc, #724]	; (8008700 <UART_SetConfig+0xa64>)
 800842a:	2400      	movs	r4, #0
 800842c:	e001      	b.n	8008432 <UART_SetConfig+0x796>
 800842e:	4baa      	ldr	r3, [pc, #680]	; (80086d8 <UART_SetConfig+0xa3c>)
 8008430:	2400      	movs	r4, #0
 8008432:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008434:	6852      	ldr	r2, [r2, #4]
 8008436:	0852      	lsrs	r2, r2, #1
 8008438:	633a      	str	r2, [r7, #48]	; 0x30
 800843a:	2200      	movs	r2, #0
 800843c:	637a      	str	r2, [r7, #52]	; 0x34
 800843e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008440:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008442:	18c0      	adds	r0, r0, r3
 8008444:	4161      	adcs	r1, r4
 8008446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	62bb      	str	r3, [r7, #40]	; 0x28
 800844c:	2300      	movs	r3, #0
 800844e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008454:	f7f8 f80e 	bl	8000474 <__aeabi_uldivmod>
 8008458:	0003      	movs	r3, r0
 800845a:	000c      	movs	r4, r1
 800845c:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800845e:	e106      	b.n	800866e <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8008460:	f7ff f8c0 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 8008464:	0003      	movs	r3, r0
 8008466:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800846a:	623b      	str	r3, [r7, #32]
 800846c:	2300      	movs	r3, #0
 800846e:	627b      	str	r3, [r7, #36]	; 0x24
 8008470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	2b00      	cmp	r3, #0
 8008476:	d050      	beq.n	800851a <UART_SetConfig+0x87e>
 8008478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	2b01      	cmp	r3, #1
 800847e:	d049      	beq.n	8008514 <UART_SetConfig+0x878>
 8008480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	2b02      	cmp	r3, #2
 8008486:	d042      	beq.n	800850e <UART_SetConfig+0x872>
 8008488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	2b03      	cmp	r3, #3
 800848e:	d03b      	beq.n	8008508 <UART_SetConfig+0x86c>
 8008490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	2b04      	cmp	r3, #4
 8008496:	d034      	beq.n	8008502 <UART_SetConfig+0x866>
 8008498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	2b05      	cmp	r3, #5
 800849e:	d02d      	beq.n	80084fc <UART_SetConfig+0x860>
 80084a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	2b06      	cmp	r3, #6
 80084a6:	d026      	beq.n	80084f6 <UART_SetConfig+0x85a>
 80084a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	2b07      	cmp	r3, #7
 80084ae:	d01f      	beq.n	80084f0 <UART_SetConfig+0x854>
 80084b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d018      	beq.n	80084ea <UART_SetConfig+0x84e>
 80084b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	2b09      	cmp	r3, #9
 80084be:	d011      	beq.n	80084e4 <UART_SetConfig+0x848>
 80084c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	2b0a      	cmp	r3, #10
 80084c6:	d00a      	beq.n	80084de <UART_SetConfig+0x842>
 80084c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	2b0b      	cmp	r3, #11
 80084ce:	d103      	bne.n	80084d8 <UART_SetConfig+0x83c>
 80084d0:	2380      	movs	r3, #128	; 0x80
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	2400      	movs	r4, #0
 80084d6:	e022      	b.n	800851e <UART_SetConfig+0x882>
 80084d8:	2301      	movs	r3, #1
 80084da:	2400      	movs	r4, #0
 80084dc:	e01f      	b.n	800851e <UART_SetConfig+0x882>
 80084de:	2380      	movs	r3, #128	; 0x80
 80084e0:	2400      	movs	r4, #0
 80084e2:	e01c      	b.n	800851e <UART_SetConfig+0x882>
 80084e4:	2340      	movs	r3, #64	; 0x40
 80084e6:	2400      	movs	r4, #0
 80084e8:	e019      	b.n	800851e <UART_SetConfig+0x882>
 80084ea:	2320      	movs	r3, #32
 80084ec:	2400      	movs	r4, #0
 80084ee:	e016      	b.n	800851e <UART_SetConfig+0x882>
 80084f0:	2310      	movs	r3, #16
 80084f2:	2400      	movs	r4, #0
 80084f4:	e013      	b.n	800851e <UART_SetConfig+0x882>
 80084f6:	230c      	movs	r3, #12
 80084f8:	2400      	movs	r4, #0
 80084fa:	e010      	b.n	800851e <UART_SetConfig+0x882>
 80084fc:	230a      	movs	r3, #10
 80084fe:	2400      	movs	r4, #0
 8008500:	e00d      	b.n	800851e <UART_SetConfig+0x882>
 8008502:	2308      	movs	r3, #8
 8008504:	2400      	movs	r4, #0
 8008506:	e00a      	b.n	800851e <UART_SetConfig+0x882>
 8008508:	2306      	movs	r3, #6
 800850a:	2400      	movs	r4, #0
 800850c:	e007      	b.n	800851e <UART_SetConfig+0x882>
 800850e:	2304      	movs	r3, #4
 8008510:	2400      	movs	r4, #0
 8008512:	e004      	b.n	800851e <UART_SetConfig+0x882>
 8008514:	2302      	movs	r3, #2
 8008516:	2400      	movs	r4, #0
 8008518:	e001      	b.n	800851e <UART_SetConfig+0x882>
 800851a:	2301      	movs	r3, #1
 800851c:	2400      	movs	r4, #0
 800851e:	001a      	movs	r2, r3
 8008520:	0023      	movs	r3, r4
 8008522:	6a38      	ldr	r0, [r7, #32]
 8008524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008526:	f7f7 ffa5 	bl	8000474 <__aeabi_uldivmod>
 800852a:	0003      	movs	r3, r0
 800852c:	000c      	movs	r4, r1
 800852e:	0e1a      	lsrs	r2, r3, #24
 8008530:	0221      	lsls	r1, r4, #8
 8008532:	6579      	str	r1, [r7, #84]	; 0x54
 8008534:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008536:	4311      	orrs	r1, r2
 8008538:	6579      	str	r1, [r7, #84]	; 0x54
 800853a:	021b      	lsls	r3, r3, #8
 800853c:	653b      	str	r3, [r7, #80]	; 0x50
 800853e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	085b      	lsrs	r3, r3, #1
 8008544:	61bb      	str	r3, [r7, #24]
 8008546:	2300      	movs	r3, #0
 8008548:	61fb      	str	r3, [r7, #28]
 800854a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800854c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	69fc      	ldr	r4, [r7, #28]
 8008552:	18c0      	adds	r0, r0, r3
 8008554:	4161      	adcs	r1, r4
 8008556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	613b      	str	r3, [r7, #16]
 800855c:	2300      	movs	r3, #0
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f7f7 ff86 	bl	8000474 <__aeabi_uldivmod>
 8008568:	0003      	movs	r3, r0
 800856a:	000c      	movs	r4, r1
 800856c:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800856e:	e07e      	b.n	800866e <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	2b00      	cmp	r3, #0
 8008576:	d058      	beq.n	800862a <UART_SetConfig+0x98e>
 8008578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	2b01      	cmp	r3, #1
 800857e:	d050      	beq.n	8008622 <UART_SetConfig+0x986>
 8008580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	2b02      	cmp	r3, #2
 8008586:	d048      	beq.n	800861a <UART_SetConfig+0x97e>
 8008588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	2b03      	cmp	r3, #3
 800858e:	d041      	beq.n	8008614 <UART_SetConfig+0x978>
 8008590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	2b04      	cmp	r3, #4
 8008596:	d039      	beq.n	800860c <UART_SetConfig+0x970>
 8008598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800859a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859c:	2b05      	cmp	r3, #5
 800859e:	d032      	beq.n	8008606 <UART_SetConfig+0x96a>
 80085a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a4:	2b06      	cmp	r3, #6
 80085a6:	d02b      	beq.n	8008600 <UART_SetConfig+0x964>
 80085a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	2b07      	cmp	r3, #7
 80085ae:	d023      	beq.n	80085f8 <UART_SetConfig+0x95c>
 80085b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d01b      	beq.n	80085f0 <UART_SetConfig+0x954>
 80085b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085bc:	2b09      	cmp	r3, #9
 80085be:	d013      	beq.n	80085e8 <UART_SetConfig+0x94c>
 80085c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	2b0a      	cmp	r3, #10
 80085c6:	d00b      	beq.n	80085e0 <UART_SetConfig+0x944>
 80085c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	2b0b      	cmp	r3, #11
 80085ce:	d103      	bne.n	80085d8 <UART_SetConfig+0x93c>
 80085d0:	2380      	movs	r3, #128	; 0x80
 80085d2:	021b      	lsls	r3, r3, #8
 80085d4:	2400      	movs	r4, #0
 80085d6:	e02b      	b.n	8008630 <UART_SetConfig+0x994>
 80085d8:	2380      	movs	r3, #128	; 0x80
 80085da:	041b      	lsls	r3, r3, #16
 80085dc:	2400      	movs	r4, #0
 80085de:	e027      	b.n	8008630 <UART_SetConfig+0x994>
 80085e0:	2380      	movs	r3, #128	; 0x80
 80085e2:	025b      	lsls	r3, r3, #9
 80085e4:	2400      	movs	r4, #0
 80085e6:	e023      	b.n	8008630 <UART_SetConfig+0x994>
 80085e8:	2380      	movs	r3, #128	; 0x80
 80085ea:	029b      	lsls	r3, r3, #10
 80085ec:	2400      	movs	r4, #0
 80085ee:	e01f      	b.n	8008630 <UART_SetConfig+0x994>
 80085f0:	2380      	movs	r3, #128	; 0x80
 80085f2:	02db      	lsls	r3, r3, #11
 80085f4:	2400      	movs	r4, #0
 80085f6:	e01b      	b.n	8008630 <UART_SetConfig+0x994>
 80085f8:	2380      	movs	r3, #128	; 0x80
 80085fa:	031b      	lsls	r3, r3, #12
 80085fc:	2400      	movs	r4, #0
 80085fe:	e017      	b.n	8008630 <UART_SetConfig+0x994>
 8008600:	4b40      	ldr	r3, [pc, #256]	; (8008704 <UART_SetConfig+0xa68>)
 8008602:	2400      	movs	r4, #0
 8008604:	e014      	b.n	8008630 <UART_SetConfig+0x994>
 8008606:	4b40      	ldr	r3, [pc, #256]	; (8008708 <UART_SetConfig+0xa6c>)
 8008608:	2400      	movs	r4, #0
 800860a:	e011      	b.n	8008630 <UART_SetConfig+0x994>
 800860c:	2380      	movs	r3, #128	; 0x80
 800860e:	035b      	lsls	r3, r3, #13
 8008610:	2400      	movs	r4, #0
 8008612:	e00d      	b.n	8008630 <UART_SetConfig+0x994>
 8008614:	4b3d      	ldr	r3, [pc, #244]	; (800870c <UART_SetConfig+0xa70>)
 8008616:	2400      	movs	r4, #0
 8008618:	e00a      	b.n	8008630 <UART_SetConfig+0x994>
 800861a:	2380      	movs	r3, #128	; 0x80
 800861c:	039b      	lsls	r3, r3, #14
 800861e:	2400      	movs	r4, #0
 8008620:	e006      	b.n	8008630 <UART_SetConfig+0x994>
 8008622:	2380      	movs	r3, #128	; 0x80
 8008624:	03db      	lsls	r3, r3, #15
 8008626:	2400      	movs	r4, #0
 8008628:	e002      	b.n	8008630 <UART_SetConfig+0x994>
 800862a:	2380      	movs	r3, #128	; 0x80
 800862c:	041b      	lsls	r3, r3, #16
 800862e:	2400      	movs	r4, #0
 8008630:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008632:	6852      	ldr	r2, [r2, #4]
 8008634:	0852      	lsrs	r2, r2, #1
 8008636:	60ba      	str	r2, [r7, #8]
 8008638:	2200      	movs	r2, #0
 800863a:	60fa      	str	r2, [r7, #12]
 800863c:	68b8      	ldr	r0, [r7, #8]
 800863e:	68f9      	ldr	r1, [r7, #12]
 8008640:	18c0      	adds	r0, r0, r3
 8008642:	4161      	adcs	r1, r4
 8008644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	603b      	str	r3, [r7, #0]
 800864a:	2300      	movs	r3, #0
 800864c:	607b      	str	r3, [r7, #4]
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f7f7 ff0f 	bl	8000474 <__aeabi_uldivmod>
 8008656:	0003      	movs	r3, r0
 8008658:	000c      	movs	r4, r1
 800865a:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800865c:	e007      	b.n	800866e <UART_SetConfig+0x9d2>
          default:
            ret = HAL_ERROR;
 800865e:	231b      	movs	r3, #27
 8008660:	2258      	movs	r2, #88	; 0x58
 8008662:	4694      	mov	ip, r2
 8008664:	44bc      	add	ip, r7
 8008666:	4463      	add	r3, ip
 8008668:	2201      	movs	r2, #1
 800866a:	701a      	strb	r2, [r3, #0]
            break;
 800866c:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800866e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008670:	4a27      	ldr	r2, [pc, #156]	; (8008710 <UART_SetConfig+0xa74>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d909      	bls.n	800868a <UART_SetConfig+0x9ee>
 8008676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008678:	4a26      	ldr	r2, [pc, #152]	; (8008714 <UART_SetConfig+0xa78>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d805      	bhi.n	800868a <UART_SetConfig+0x9ee>
        {
          huart->Instance->BRR = usartdiv;
 800867e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008684:	60da      	str	r2, [r3, #12]
 8008686:	f000 fbc4 	bl	8008e12 <UART_SetConfig+0x1176>
        }
        else
        {
          ret = HAL_ERROR;
 800868a:	231b      	movs	r3, #27
 800868c:	2258      	movs	r2, #88	; 0x58
 800868e:	4694      	mov	ip, r2
 8008690:	44bc      	add	ip, r7
 8008692:	4463      	add	r3, ip
 8008694:	2201      	movs	r2, #1
 8008696:	701a      	strb	r2, [r3, #0]
 8008698:	f000 fbbb 	bl	8008e12 <UART_SetConfig+0x1176>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800869c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800869e:	69da      	ldr	r2, [r3, #28]
 80086a0:	2380      	movs	r3, #128	; 0x80
 80086a2:	021b      	lsls	r3, r3, #8
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d000      	beq.n	80086aa <UART_SetConfig+0xa0e>
 80086a8:	e1e6      	b.n	8008a78 <UART_SetConfig+0xddc>
  {
    switch (clocksource)
 80086aa:	2323      	movs	r3, #35	; 0x23
 80086ac:	2258      	movs	r2, #88	; 0x58
 80086ae:	4694      	mov	ip, r2
 80086b0:	44bc      	add	ip, r7
 80086b2:	4463      	add	r3, ip
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d100      	bne.n	80086bc <UART_SetConfig+0xa20>
 80086ba:	e08f      	b.n	80087dc <UART_SetConfig+0xb40>
 80086bc:	dc02      	bgt.n	80086c4 <UART_SetConfig+0xa28>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d02a      	beq.n	8008718 <UART_SetConfig+0xa7c>
 80086c2:	e1a5      	b.n	8008a10 <UART_SetConfig+0xd74>
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d100      	bne.n	80086ca <UART_SetConfig+0xa2e>
 80086c8:	e0df      	b.n	800888a <UART_SetConfig+0xbee>
 80086ca:	2b08      	cmp	r3, #8
 80086cc:	d100      	bne.n	80086d0 <UART_SetConfig+0xa34>
 80086ce:	e13e      	b.n	800894e <UART_SetConfig+0xcb2>
 80086d0:	e19e      	b.n	8008a10 <UART_SetConfig+0xd74>
 80086d2:	46c0      	nop			; (mov r8, r8)
 80086d4:	00f42400 	.word	0x00f42400
 80086d8:	f4240000 	.word	0xf4240000
 80086dc:	01e84800 	.word	0x01e84800
 80086e0:	03d09000 	.word	0x03d09000
 80086e4:	07a12000 	.word	0x07a12000
 80086e8:	0f424000 	.word	0x0f424000
 80086ec:	14585500 	.word	0x14585500
 80086f0:	186a0000 	.word	0x186a0000
 80086f4:	1e848000 	.word	0x1e848000
 80086f8:	28b0aa00 	.word	0x28b0aa00
 80086fc:	3d090000 	.word	0x3d090000
 8008700:	7a120000 	.word	0x7a120000
 8008704:	000aaa00 	.word	0x000aaa00
 8008708:	000ccc00 	.word	0x000ccc00
 800870c:	00155500 	.word	0x00155500
 8008710:	000002ff 	.word	0x000002ff
 8008714:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008718:	f7fe fff0 	bl	80076fc <HAL_RCC_GetPCLK1Freq>
 800871c:	0003      	movs	r3, r0
 800871e:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	2b00      	cmp	r3, #0
 8008726:	d044      	beq.n	80087b2 <UART_SetConfig+0xb16>
 8008728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2b01      	cmp	r3, #1
 800872e:	d03e      	beq.n	80087ae <UART_SetConfig+0xb12>
 8008730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	2b02      	cmp	r3, #2
 8008736:	d038      	beq.n	80087aa <UART_SetConfig+0xb0e>
 8008738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	2b03      	cmp	r3, #3
 800873e:	d032      	beq.n	80087a6 <UART_SetConfig+0xb0a>
 8008740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2b04      	cmp	r3, #4
 8008746:	d02c      	beq.n	80087a2 <UART_SetConfig+0xb06>
 8008748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	2b05      	cmp	r3, #5
 800874e:	d026      	beq.n	800879e <UART_SetConfig+0xb02>
 8008750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	2b06      	cmp	r3, #6
 8008756:	d020      	beq.n	800879a <UART_SetConfig+0xafe>
 8008758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b07      	cmp	r3, #7
 800875e:	d01a      	beq.n	8008796 <UART_SetConfig+0xafa>
 8008760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b08      	cmp	r3, #8
 8008766:	d014      	beq.n	8008792 <UART_SetConfig+0xaf6>
 8008768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2b09      	cmp	r3, #9
 800876e:	d00e      	beq.n	800878e <UART_SetConfig+0xaf2>
 8008770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	2b0a      	cmp	r3, #10
 8008776:	d008      	beq.n	800878a <UART_SetConfig+0xaee>
 8008778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	2b0b      	cmp	r3, #11
 800877e:	d102      	bne.n	8008786 <UART_SetConfig+0xaea>
 8008780:	2380      	movs	r3, #128	; 0x80
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	e016      	b.n	80087b4 <UART_SetConfig+0xb18>
 8008786:	2301      	movs	r3, #1
 8008788:	e014      	b.n	80087b4 <UART_SetConfig+0xb18>
 800878a:	2380      	movs	r3, #128	; 0x80
 800878c:	e012      	b.n	80087b4 <UART_SetConfig+0xb18>
 800878e:	2340      	movs	r3, #64	; 0x40
 8008790:	e010      	b.n	80087b4 <UART_SetConfig+0xb18>
 8008792:	2320      	movs	r3, #32
 8008794:	e00e      	b.n	80087b4 <UART_SetConfig+0xb18>
 8008796:	2310      	movs	r3, #16
 8008798:	e00c      	b.n	80087b4 <UART_SetConfig+0xb18>
 800879a:	230c      	movs	r3, #12
 800879c:	e00a      	b.n	80087b4 <UART_SetConfig+0xb18>
 800879e:	230a      	movs	r3, #10
 80087a0:	e008      	b.n	80087b4 <UART_SetConfig+0xb18>
 80087a2:	2308      	movs	r3, #8
 80087a4:	e006      	b.n	80087b4 <UART_SetConfig+0xb18>
 80087a6:	2306      	movs	r3, #6
 80087a8:	e004      	b.n	80087b4 <UART_SetConfig+0xb18>
 80087aa:	2304      	movs	r3, #4
 80087ac:	e002      	b.n	80087b4 <UART_SetConfig+0xb18>
 80087ae:	2302      	movs	r3, #2
 80087b0:	e000      	b.n	80087b4 <UART_SetConfig+0xb18>
 80087b2:	2301      	movs	r3, #1
 80087b4:	0019      	movs	r1, r3
 80087b6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80087b8:	f7f7 fcac 	bl	8000114 <__udivsi3>
 80087bc:	0003      	movs	r3, r0
 80087be:	005a      	lsls	r2, r3, #1
 80087c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	085b      	lsrs	r3, r3, #1
 80087c6:	18d2      	adds	r2, r2, r3
 80087c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	0019      	movs	r1, r3
 80087ce:	0010      	movs	r0, r2
 80087d0:	f7f7 fca0 	bl	8000114 <__udivsi3>
 80087d4:	0003      	movs	r3, r0
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80087da:	e121      	b.n	8008a20 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d043      	beq.n	800886c <UART_SetConfig+0xbd0>
 80087e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d03d      	beq.n	8008868 <UART_SetConfig+0xbcc>
 80087ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d037      	beq.n	8008864 <UART_SetConfig+0xbc8>
 80087f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d031      	beq.n	8008860 <UART_SetConfig+0xbc4>
 80087fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	2b04      	cmp	r3, #4
 8008802:	d02b      	beq.n	800885c <UART_SetConfig+0xbc0>
 8008804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	2b05      	cmp	r3, #5
 800880a:	d025      	beq.n	8008858 <UART_SetConfig+0xbbc>
 800880c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008810:	2b06      	cmp	r3, #6
 8008812:	d01f      	beq.n	8008854 <UART_SetConfig+0xbb8>
 8008814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	2b07      	cmp	r3, #7
 800881a:	d019      	beq.n	8008850 <UART_SetConfig+0xbb4>
 800881c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800881e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008820:	2b08      	cmp	r3, #8
 8008822:	d013      	beq.n	800884c <UART_SetConfig+0xbb0>
 8008824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	2b09      	cmp	r3, #9
 800882a:	d00d      	beq.n	8008848 <UART_SetConfig+0xbac>
 800882c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	2b0a      	cmp	r3, #10
 8008832:	d007      	beq.n	8008844 <UART_SetConfig+0xba8>
 8008834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	2b0b      	cmp	r3, #11
 800883a:	d101      	bne.n	8008840 <UART_SetConfig+0xba4>
 800883c:	4bba      	ldr	r3, [pc, #744]	; (8008b28 <UART_SetConfig+0xe8c>)
 800883e:	e016      	b.n	800886e <UART_SetConfig+0xbd2>
 8008840:	4bba      	ldr	r3, [pc, #744]	; (8008b2c <UART_SetConfig+0xe90>)
 8008842:	e014      	b.n	800886e <UART_SetConfig+0xbd2>
 8008844:	4bba      	ldr	r3, [pc, #744]	; (8008b30 <UART_SetConfig+0xe94>)
 8008846:	e012      	b.n	800886e <UART_SetConfig+0xbd2>
 8008848:	4bba      	ldr	r3, [pc, #744]	; (8008b34 <UART_SetConfig+0xe98>)
 800884a:	e010      	b.n	800886e <UART_SetConfig+0xbd2>
 800884c:	4bba      	ldr	r3, [pc, #744]	; (8008b38 <UART_SetConfig+0xe9c>)
 800884e:	e00e      	b.n	800886e <UART_SetConfig+0xbd2>
 8008850:	4bba      	ldr	r3, [pc, #744]	; (8008b3c <UART_SetConfig+0xea0>)
 8008852:	e00c      	b.n	800886e <UART_SetConfig+0xbd2>
 8008854:	4bba      	ldr	r3, [pc, #744]	; (8008b40 <UART_SetConfig+0xea4>)
 8008856:	e00a      	b.n	800886e <UART_SetConfig+0xbd2>
 8008858:	4bba      	ldr	r3, [pc, #744]	; (8008b44 <UART_SetConfig+0xea8>)
 800885a:	e008      	b.n	800886e <UART_SetConfig+0xbd2>
 800885c:	4bba      	ldr	r3, [pc, #744]	; (8008b48 <UART_SetConfig+0xeac>)
 800885e:	e006      	b.n	800886e <UART_SetConfig+0xbd2>
 8008860:	4bba      	ldr	r3, [pc, #744]	; (8008b4c <UART_SetConfig+0xeb0>)
 8008862:	e004      	b.n	800886e <UART_SetConfig+0xbd2>
 8008864:	4bba      	ldr	r3, [pc, #744]	; (8008b50 <UART_SetConfig+0xeb4>)
 8008866:	e002      	b.n	800886e <UART_SetConfig+0xbd2>
 8008868:	4bba      	ldr	r3, [pc, #744]	; (8008b54 <UART_SetConfig+0xeb8>)
 800886a:	e000      	b.n	800886e <UART_SetConfig+0xbd2>
 800886c:	4baf      	ldr	r3, [pc, #700]	; (8008b2c <UART_SetConfig+0xe90>)
 800886e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008870:	6852      	ldr	r2, [r2, #4]
 8008872:	0852      	lsrs	r2, r2, #1
 8008874:	189a      	adds	r2, r3, r2
 8008876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	0019      	movs	r1, r3
 800887c:	0010      	movs	r0, r2
 800887e:	f7f7 fc49 	bl	8000114 <__udivsi3>
 8008882:	0003      	movs	r3, r0
 8008884:	b29b      	uxth	r3, r3
 8008886:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8008888:	e0ca      	b.n	8008a20 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800888a:	f7fe feab 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 800888e:	0003      	movs	r3, r0
 8008890:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	2b00      	cmp	r3, #0
 8008898:	d044      	beq.n	8008924 <UART_SetConfig+0xc88>
 800889a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800889c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d03e      	beq.n	8008920 <UART_SetConfig+0xc84>
 80088a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d038      	beq.n	800891c <UART_SetConfig+0xc80>
 80088aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d032      	beq.n	8008918 <UART_SetConfig+0xc7c>
 80088b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d02c      	beq.n	8008914 <UART_SetConfig+0xc78>
 80088ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	2b05      	cmp	r3, #5
 80088c0:	d026      	beq.n	8008910 <UART_SetConfig+0xc74>
 80088c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	2b06      	cmp	r3, #6
 80088c8:	d020      	beq.n	800890c <UART_SetConfig+0xc70>
 80088ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	2b07      	cmp	r3, #7
 80088d0:	d01a      	beq.n	8008908 <UART_SetConfig+0xc6c>
 80088d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	2b08      	cmp	r3, #8
 80088d8:	d014      	beq.n	8008904 <UART_SetConfig+0xc68>
 80088da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	2b09      	cmp	r3, #9
 80088e0:	d00e      	beq.n	8008900 <UART_SetConfig+0xc64>
 80088e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	2b0a      	cmp	r3, #10
 80088e8:	d008      	beq.n	80088fc <UART_SetConfig+0xc60>
 80088ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	2b0b      	cmp	r3, #11
 80088f0:	d102      	bne.n	80088f8 <UART_SetConfig+0xc5c>
 80088f2:	2380      	movs	r3, #128	; 0x80
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	e016      	b.n	8008926 <UART_SetConfig+0xc8a>
 80088f8:	2301      	movs	r3, #1
 80088fa:	e014      	b.n	8008926 <UART_SetConfig+0xc8a>
 80088fc:	2380      	movs	r3, #128	; 0x80
 80088fe:	e012      	b.n	8008926 <UART_SetConfig+0xc8a>
 8008900:	2340      	movs	r3, #64	; 0x40
 8008902:	e010      	b.n	8008926 <UART_SetConfig+0xc8a>
 8008904:	2320      	movs	r3, #32
 8008906:	e00e      	b.n	8008926 <UART_SetConfig+0xc8a>
 8008908:	2310      	movs	r3, #16
 800890a:	e00c      	b.n	8008926 <UART_SetConfig+0xc8a>
 800890c:	230c      	movs	r3, #12
 800890e:	e00a      	b.n	8008926 <UART_SetConfig+0xc8a>
 8008910:	230a      	movs	r3, #10
 8008912:	e008      	b.n	8008926 <UART_SetConfig+0xc8a>
 8008914:	2308      	movs	r3, #8
 8008916:	e006      	b.n	8008926 <UART_SetConfig+0xc8a>
 8008918:	2306      	movs	r3, #6
 800891a:	e004      	b.n	8008926 <UART_SetConfig+0xc8a>
 800891c:	2304      	movs	r3, #4
 800891e:	e002      	b.n	8008926 <UART_SetConfig+0xc8a>
 8008920:	2302      	movs	r3, #2
 8008922:	e000      	b.n	8008926 <UART_SetConfig+0xc8a>
 8008924:	2301      	movs	r3, #1
 8008926:	0019      	movs	r1, r3
 8008928:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800892a:	f7f7 fbf3 	bl	8000114 <__udivsi3>
 800892e:	0003      	movs	r3, r0
 8008930:	005a      	lsls	r2, r3, #1
 8008932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	085b      	lsrs	r3, r3, #1
 8008938:	18d2      	adds	r2, r2, r3
 800893a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	0019      	movs	r1, r3
 8008940:	0010      	movs	r0, r2
 8008942:	f7f7 fbe7 	bl	8000114 <__udivsi3>
 8008946:	0003      	movs	r3, r0
 8008948:	b29b      	uxth	r3, r3
 800894a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800894c:	e068      	b.n	8008a20 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800894e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	2b00      	cmp	r3, #0
 8008954:	d04c      	beq.n	80089f0 <UART_SetConfig+0xd54>
 8008956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	2b01      	cmp	r3, #1
 800895c:	d045      	beq.n	80089ea <UART_SetConfig+0xd4e>
 800895e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	2b02      	cmp	r3, #2
 8008964:	d03e      	beq.n	80089e4 <UART_SetConfig+0xd48>
 8008966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	2b03      	cmp	r3, #3
 800896c:	d038      	beq.n	80089e0 <UART_SetConfig+0xd44>
 800896e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	2b04      	cmp	r3, #4
 8008974:	d031      	beq.n	80089da <UART_SetConfig+0xd3e>
 8008976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	2b05      	cmp	r3, #5
 800897c:	d02b      	beq.n	80089d6 <UART_SetConfig+0xd3a>
 800897e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	2b06      	cmp	r3, #6
 8008984:	d025      	beq.n	80089d2 <UART_SetConfig+0xd36>
 8008986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	2b07      	cmp	r3, #7
 800898c:	d01e      	beq.n	80089cc <UART_SetConfig+0xd30>
 800898e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	2b08      	cmp	r3, #8
 8008994:	d017      	beq.n	80089c6 <UART_SetConfig+0xd2a>
 8008996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	2b09      	cmp	r3, #9
 800899c:	d010      	beq.n	80089c0 <UART_SetConfig+0xd24>
 800899e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	2b0a      	cmp	r3, #10
 80089a4:	d009      	beq.n	80089ba <UART_SetConfig+0xd1e>
 80089a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	2b0b      	cmp	r3, #11
 80089ac:	d102      	bne.n	80089b4 <UART_SetConfig+0xd18>
 80089ae:	2380      	movs	r3, #128	; 0x80
 80089b0:	005b      	lsls	r3, r3, #1
 80089b2:	e01f      	b.n	80089f4 <UART_SetConfig+0xd58>
 80089b4:	2380      	movs	r3, #128	; 0x80
 80089b6:	025b      	lsls	r3, r3, #9
 80089b8:	e01c      	b.n	80089f4 <UART_SetConfig+0xd58>
 80089ba:	2380      	movs	r3, #128	; 0x80
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	e019      	b.n	80089f4 <UART_SetConfig+0xd58>
 80089c0:	2380      	movs	r3, #128	; 0x80
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	e016      	b.n	80089f4 <UART_SetConfig+0xd58>
 80089c6:	2380      	movs	r3, #128	; 0x80
 80089c8:	011b      	lsls	r3, r3, #4
 80089ca:	e013      	b.n	80089f4 <UART_SetConfig+0xd58>
 80089cc:	2380      	movs	r3, #128	; 0x80
 80089ce:	015b      	lsls	r3, r3, #5
 80089d0:	e010      	b.n	80089f4 <UART_SetConfig+0xd58>
 80089d2:	4b61      	ldr	r3, [pc, #388]	; (8008b58 <UART_SetConfig+0xebc>)
 80089d4:	e00e      	b.n	80089f4 <UART_SetConfig+0xd58>
 80089d6:	4b61      	ldr	r3, [pc, #388]	; (8008b5c <UART_SetConfig+0xec0>)
 80089d8:	e00c      	b.n	80089f4 <UART_SetConfig+0xd58>
 80089da:	2380      	movs	r3, #128	; 0x80
 80089dc:	019b      	lsls	r3, r3, #6
 80089de:	e009      	b.n	80089f4 <UART_SetConfig+0xd58>
 80089e0:	4b5f      	ldr	r3, [pc, #380]	; (8008b60 <UART_SetConfig+0xec4>)
 80089e2:	e007      	b.n	80089f4 <UART_SetConfig+0xd58>
 80089e4:	2380      	movs	r3, #128	; 0x80
 80089e6:	01db      	lsls	r3, r3, #7
 80089e8:	e004      	b.n	80089f4 <UART_SetConfig+0xd58>
 80089ea:	2380      	movs	r3, #128	; 0x80
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	e001      	b.n	80089f4 <UART_SetConfig+0xd58>
 80089f0:	2380      	movs	r3, #128	; 0x80
 80089f2:	025b      	lsls	r3, r3, #9
 80089f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089f6:	6852      	ldr	r2, [r2, #4]
 80089f8:	0852      	lsrs	r2, r2, #1
 80089fa:	189a      	adds	r2, r3, r2
 80089fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	0019      	movs	r1, r3
 8008a02:	0010      	movs	r0, r2
 8008a04:	f7f7 fb86 	bl	8000114 <__udivsi3>
 8008a08:	0003      	movs	r3, r0
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8008a0e:	e007      	b.n	8008a20 <UART_SetConfig+0xd84>
      default:
        ret = HAL_ERROR;
 8008a10:	231b      	movs	r3, #27
 8008a12:	2258      	movs	r2, #88	; 0x58
 8008a14:	4694      	mov	ip, r2
 8008a16:	44bc      	add	ip, r7
 8008a18:	4463      	add	r3, ip
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	701a      	strb	r2, [r3, #0]
        break;
 8008a1e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a22:	2b0f      	cmp	r3, #15
 8008a24:	d920      	bls.n	8008a68 <UART_SetConfig+0xdcc>
 8008a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a28:	4a4e      	ldr	r2, [pc, #312]	; (8008b64 <UART_SetConfig+0xec8>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d81c      	bhi.n	8008a68 <UART_SetConfig+0xdcc>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	200e      	movs	r0, #14
 8008a34:	2458      	movs	r4, #88	; 0x58
 8008a36:	193b      	adds	r3, r7, r4
 8008a38:	181b      	adds	r3, r3, r0
 8008a3a:	210f      	movs	r1, #15
 8008a3c:	438a      	bics	r2, r1
 8008a3e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a42:	085b      	lsrs	r3, r3, #1
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	2207      	movs	r2, #7
 8008a48:	4013      	ands	r3, r2
 8008a4a:	b299      	uxth	r1, r3
 8008a4c:	193b      	adds	r3, r7, r4
 8008a4e:	181b      	adds	r3, r3, r0
 8008a50:	193a      	adds	r2, r7, r4
 8008a52:	1812      	adds	r2, r2, r0
 8008a54:	8812      	ldrh	r2, [r2, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8008a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	193a      	adds	r2, r7, r4
 8008a60:	1812      	adds	r2, r2, r0
 8008a62:	8812      	ldrh	r2, [r2, #0]
 8008a64:	60da      	str	r2, [r3, #12]
 8008a66:	e1d4      	b.n	8008e12 <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8008a68:	231b      	movs	r3, #27
 8008a6a:	2258      	movs	r2, #88	; 0x58
 8008a6c:	4694      	mov	ip, r2
 8008a6e:	44bc      	add	ip, r7
 8008a70:	4463      	add	r3, ip
 8008a72:	2201      	movs	r2, #1
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	e1cc      	b.n	8008e12 <UART_SetConfig+0x1176>
    }
  }
  else
  {
    switch (clocksource)
 8008a78:	2323      	movs	r3, #35	; 0x23
 8008a7a:	2258      	movs	r2, #88	; 0x58
 8008a7c:	4694      	mov	ip, r2
 8008a7e:	44bc      	add	ip, r7
 8008a80:	4463      	add	r3, ip
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d100      	bne.n	8008a8a <UART_SetConfig+0xdee>
 8008a88:	e08f      	b.n	8008baa <UART_SetConfig+0xf0e>
 8008a8a:	dc02      	bgt.n	8008a92 <UART_SetConfig+0xdf6>
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d007      	beq.n	8008aa0 <UART_SetConfig+0xe04>
 8008a90:	e1a4      	b.n	8008ddc <UART_SetConfig+0x1140>
 8008a92:	2b04      	cmp	r3, #4
 8008a94:	d100      	bne.n	8008a98 <UART_SetConfig+0xdfc>
 8008a96:	e0df      	b.n	8008c58 <UART_SetConfig+0xfbc>
 8008a98:	2b08      	cmp	r3, #8
 8008a9a:	d100      	bne.n	8008a9e <UART_SetConfig+0xe02>
 8008a9c:	e13e      	b.n	8008d1c <UART_SetConfig+0x1080>
 8008a9e:	e19d      	b.n	8008ddc <UART_SetConfig+0x1140>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aa0:	f7fe fe2c 	bl	80076fc <HAL_RCC_GetPCLK1Freq>
 8008aa4:	0003      	movs	r3, r0
 8008aa6:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d100      	bne.n	8008ab2 <UART_SetConfig+0xe16>
 8008ab0:	e066      	b.n	8008b80 <UART_SetConfig+0xee4>
 8008ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d100      	bne.n	8008abc <UART_SetConfig+0xe20>
 8008aba:	e05f      	b.n	8008b7c <UART_SetConfig+0xee0>
 8008abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d059      	beq.n	8008b78 <UART_SetConfig+0xedc>
 8008ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d053      	beq.n	8008b74 <UART_SetConfig+0xed8>
 8008acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d04d      	beq.n	8008b70 <UART_SetConfig+0xed4>
 8008ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad8:	2b05      	cmp	r3, #5
 8008ada:	d047      	beq.n	8008b6c <UART_SetConfig+0xed0>
 8008adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae0:	2b06      	cmp	r3, #6
 8008ae2:	d041      	beq.n	8008b68 <UART_SetConfig+0xecc>
 8008ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	2b07      	cmp	r3, #7
 8008aea:	d01a      	beq.n	8008b22 <UART_SetConfig+0xe86>
 8008aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d014      	beq.n	8008b1e <UART_SetConfig+0xe82>
 8008af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af8:	2b09      	cmp	r3, #9
 8008afa:	d00e      	beq.n	8008b1a <UART_SetConfig+0xe7e>
 8008afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	2b0a      	cmp	r3, #10
 8008b02:	d008      	beq.n	8008b16 <UART_SetConfig+0xe7a>
 8008b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	2b0b      	cmp	r3, #11
 8008b0a:	d102      	bne.n	8008b12 <UART_SetConfig+0xe76>
 8008b0c:	2380      	movs	r3, #128	; 0x80
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	e037      	b.n	8008b82 <UART_SetConfig+0xee6>
 8008b12:	2301      	movs	r3, #1
 8008b14:	e035      	b.n	8008b82 <UART_SetConfig+0xee6>
 8008b16:	2380      	movs	r3, #128	; 0x80
 8008b18:	e033      	b.n	8008b82 <UART_SetConfig+0xee6>
 8008b1a:	2340      	movs	r3, #64	; 0x40
 8008b1c:	e031      	b.n	8008b82 <UART_SetConfig+0xee6>
 8008b1e:	2320      	movs	r3, #32
 8008b20:	e02f      	b.n	8008b82 <UART_SetConfig+0xee6>
 8008b22:	2310      	movs	r3, #16
 8008b24:	e02d      	b.n	8008b82 <UART_SetConfig+0xee6>
 8008b26:	46c0      	nop			; (mov r8, r8)
 8008b28:	0001e848 	.word	0x0001e848
 8008b2c:	01e84800 	.word	0x01e84800
 8008b30:	0003d090 	.word	0x0003d090
 8008b34:	0007a120 	.word	0x0007a120
 8008b38:	000f4240 	.word	0x000f4240
 8008b3c:	001e8480 	.word	0x001e8480
 8008b40:	0028b0aa 	.word	0x0028b0aa
 8008b44:	0030d400 	.word	0x0030d400
 8008b48:	003d0900 	.word	0x003d0900
 8008b4c:	00516154 	.word	0x00516154
 8008b50:	007a1200 	.word	0x007a1200
 8008b54:	00f42400 	.word	0x00f42400
 8008b58:	00001554 	.word	0x00001554
 8008b5c:	00001998 	.word	0x00001998
 8008b60:	00002aaa 	.word	0x00002aaa
 8008b64:	0000ffff 	.word	0x0000ffff
 8008b68:	230c      	movs	r3, #12
 8008b6a:	e00a      	b.n	8008b82 <UART_SetConfig+0xee6>
 8008b6c:	230a      	movs	r3, #10
 8008b6e:	e008      	b.n	8008b82 <UART_SetConfig+0xee6>
 8008b70:	2308      	movs	r3, #8
 8008b72:	e006      	b.n	8008b82 <UART_SetConfig+0xee6>
 8008b74:	2306      	movs	r3, #6
 8008b76:	e004      	b.n	8008b82 <UART_SetConfig+0xee6>
 8008b78:	2304      	movs	r3, #4
 8008b7a:	e002      	b.n	8008b82 <UART_SetConfig+0xee6>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e000      	b.n	8008b82 <UART_SetConfig+0xee6>
 8008b80:	2301      	movs	r3, #1
 8008b82:	0019      	movs	r1, r3
 8008b84:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008b86:	f7f7 fac5 	bl	8000114 <__udivsi3>
 8008b8a:	0003      	movs	r3, r0
 8008b8c:	001a      	movs	r2, r3
 8008b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	085b      	lsrs	r3, r3, #1
 8008b94:	18d2      	adds	r2, r2, r3
 8008b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	0019      	movs	r1, r3
 8008b9c:	0010      	movs	r0, r2
 8008b9e:	f7f7 fab9 	bl	8000114 <__udivsi3>
 8008ba2:	0003      	movs	r3, r0
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8008ba8:	e120      	b.n	8008dec <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d043      	beq.n	8008c3a <UART_SetConfig+0xf9e>
 8008bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d03d      	beq.n	8008c36 <UART_SetConfig+0xf9a>
 8008bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d037      	beq.n	8008c32 <UART_SetConfig+0xf96>
 8008bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d031      	beq.n	8008c2e <UART_SetConfig+0xf92>
 8008bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d02b      	beq.n	8008c2a <UART_SetConfig+0xf8e>
 8008bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	2b05      	cmp	r3, #5
 8008bd8:	d025      	beq.n	8008c26 <UART_SetConfig+0xf8a>
 8008bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	2b06      	cmp	r3, #6
 8008be0:	d01f      	beq.n	8008c22 <UART_SetConfig+0xf86>
 8008be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	2b07      	cmp	r3, #7
 8008be8:	d019      	beq.n	8008c1e <UART_SetConfig+0xf82>
 8008bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	2b08      	cmp	r3, #8
 8008bf0:	d013      	beq.n	8008c1a <UART_SetConfig+0xf7e>
 8008bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	2b09      	cmp	r3, #9
 8008bf8:	d00d      	beq.n	8008c16 <UART_SetConfig+0xf7a>
 8008bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfe:	2b0a      	cmp	r3, #10
 8008c00:	d007      	beq.n	8008c12 <UART_SetConfig+0xf76>
 8008c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c06:	2b0b      	cmp	r3, #11
 8008c08:	d101      	bne.n	8008c0e <UART_SetConfig+0xf72>
 8008c0a:	4b8e      	ldr	r3, [pc, #568]	; (8008e44 <UART_SetConfig+0x11a8>)
 8008c0c:	e016      	b.n	8008c3c <UART_SetConfig+0xfa0>
 8008c0e:	4b8e      	ldr	r3, [pc, #568]	; (8008e48 <UART_SetConfig+0x11ac>)
 8008c10:	e014      	b.n	8008c3c <UART_SetConfig+0xfa0>
 8008c12:	4b8e      	ldr	r3, [pc, #568]	; (8008e4c <UART_SetConfig+0x11b0>)
 8008c14:	e012      	b.n	8008c3c <UART_SetConfig+0xfa0>
 8008c16:	4b8e      	ldr	r3, [pc, #568]	; (8008e50 <UART_SetConfig+0x11b4>)
 8008c18:	e010      	b.n	8008c3c <UART_SetConfig+0xfa0>
 8008c1a:	4b8e      	ldr	r3, [pc, #568]	; (8008e54 <UART_SetConfig+0x11b8>)
 8008c1c:	e00e      	b.n	8008c3c <UART_SetConfig+0xfa0>
 8008c1e:	4b8e      	ldr	r3, [pc, #568]	; (8008e58 <UART_SetConfig+0x11bc>)
 8008c20:	e00c      	b.n	8008c3c <UART_SetConfig+0xfa0>
 8008c22:	4b8e      	ldr	r3, [pc, #568]	; (8008e5c <UART_SetConfig+0x11c0>)
 8008c24:	e00a      	b.n	8008c3c <UART_SetConfig+0xfa0>
 8008c26:	4b8e      	ldr	r3, [pc, #568]	; (8008e60 <UART_SetConfig+0x11c4>)
 8008c28:	e008      	b.n	8008c3c <UART_SetConfig+0xfa0>
 8008c2a:	4b8e      	ldr	r3, [pc, #568]	; (8008e64 <UART_SetConfig+0x11c8>)
 8008c2c:	e006      	b.n	8008c3c <UART_SetConfig+0xfa0>
 8008c2e:	4b8e      	ldr	r3, [pc, #568]	; (8008e68 <UART_SetConfig+0x11cc>)
 8008c30:	e004      	b.n	8008c3c <UART_SetConfig+0xfa0>
 8008c32:	4b8e      	ldr	r3, [pc, #568]	; (8008e6c <UART_SetConfig+0x11d0>)
 8008c34:	e002      	b.n	8008c3c <UART_SetConfig+0xfa0>
 8008c36:	4b8e      	ldr	r3, [pc, #568]	; (8008e70 <UART_SetConfig+0x11d4>)
 8008c38:	e000      	b.n	8008c3c <UART_SetConfig+0xfa0>
 8008c3a:	4b83      	ldr	r3, [pc, #524]	; (8008e48 <UART_SetConfig+0x11ac>)
 8008c3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c3e:	6852      	ldr	r2, [r2, #4]
 8008c40:	0852      	lsrs	r2, r2, #1
 8008c42:	189a      	adds	r2, r3, r2
 8008c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	0019      	movs	r1, r3
 8008c4a:	0010      	movs	r0, r2
 8008c4c:	f7f7 fa62 	bl	8000114 <__udivsi3>
 8008c50:	0003      	movs	r3, r0
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8008c56:	e0c9      	b.n	8008dec <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c58:	f7fe fcc4 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 8008c5c:	0003      	movs	r3, r0
 8008c5e:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d044      	beq.n	8008cf2 <UART_SetConfig+0x1056>
 8008c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d03e      	beq.n	8008cee <UART_SetConfig+0x1052>
 8008c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d038      	beq.n	8008cea <UART_SetConfig+0x104e>
 8008c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d032      	beq.n	8008ce6 <UART_SetConfig+0x104a>
 8008c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	d02c      	beq.n	8008ce2 <UART_SetConfig+0x1046>
 8008c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	2b05      	cmp	r3, #5
 8008c8e:	d026      	beq.n	8008cde <UART_SetConfig+0x1042>
 8008c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	2b06      	cmp	r3, #6
 8008c96:	d020      	beq.n	8008cda <UART_SetConfig+0x103e>
 8008c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b07      	cmp	r3, #7
 8008c9e:	d01a      	beq.n	8008cd6 <UART_SetConfig+0x103a>
 8008ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	2b08      	cmp	r3, #8
 8008ca6:	d014      	beq.n	8008cd2 <UART_SetConfig+0x1036>
 8008ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	2b09      	cmp	r3, #9
 8008cae:	d00e      	beq.n	8008cce <UART_SetConfig+0x1032>
 8008cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	2b0a      	cmp	r3, #10
 8008cb6:	d008      	beq.n	8008cca <UART_SetConfig+0x102e>
 8008cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	2b0b      	cmp	r3, #11
 8008cbe:	d102      	bne.n	8008cc6 <UART_SetConfig+0x102a>
 8008cc0:	2380      	movs	r3, #128	; 0x80
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	e016      	b.n	8008cf4 <UART_SetConfig+0x1058>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e014      	b.n	8008cf4 <UART_SetConfig+0x1058>
 8008cca:	2380      	movs	r3, #128	; 0x80
 8008ccc:	e012      	b.n	8008cf4 <UART_SetConfig+0x1058>
 8008cce:	2340      	movs	r3, #64	; 0x40
 8008cd0:	e010      	b.n	8008cf4 <UART_SetConfig+0x1058>
 8008cd2:	2320      	movs	r3, #32
 8008cd4:	e00e      	b.n	8008cf4 <UART_SetConfig+0x1058>
 8008cd6:	2310      	movs	r3, #16
 8008cd8:	e00c      	b.n	8008cf4 <UART_SetConfig+0x1058>
 8008cda:	230c      	movs	r3, #12
 8008cdc:	e00a      	b.n	8008cf4 <UART_SetConfig+0x1058>
 8008cde:	230a      	movs	r3, #10
 8008ce0:	e008      	b.n	8008cf4 <UART_SetConfig+0x1058>
 8008ce2:	2308      	movs	r3, #8
 8008ce4:	e006      	b.n	8008cf4 <UART_SetConfig+0x1058>
 8008ce6:	2306      	movs	r3, #6
 8008ce8:	e004      	b.n	8008cf4 <UART_SetConfig+0x1058>
 8008cea:	2304      	movs	r3, #4
 8008cec:	e002      	b.n	8008cf4 <UART_SetConfig+0x1058>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e000      	b.n	8008cf4 <UART_SetConfig+0x1058>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	0019      	movs	r1, r3
 8008cf6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008cf8:	f7f7 fa0c 	bl	8000114 <__udivsi3>
 8008cfc:	0003      	movs	r3, r0
 8008cfe:	001a      	movs	r2, r3
 8008d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	085b      	lsrs	r3, r3, #1
 8008d06:	18d2      	adds	r2, r2, r3
 8008d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	0019      	movs	r1, r3
 8008d0e:	0010      	movs	r0, r2
 8008d10:	f7f7 fa00 	bl	8000114 <__udivsi3>
 8008d14:	0003      	movs	r3, r0
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8008d1a:	e067      	b.n	8008dec <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d04b      	beq.n	8008dbc <UART_SetConfig+0x1120>
 8008d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d044      	beq.n	8008db6 <UART_SetConfig+0x111a>
 8008d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d03d      	beq.n	8008db0 <UART_SetConfig+0x1114>
 8008d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d037      	beq.n	8008dac <UART_SetConfig+0x1110>
 8008d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	2b04      	cmp	r3, #4
 8008d42:	d030      	beq.n	8008da6 <UART_SetConfig+0x110a>
 8008d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	2b05      	cmp	r3, #5
 8008d4a:	d02a      	beq.n	8008da2 <UART_SetConfig+0x1106>
 8008d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d50:	2b06      	cmp	r3, #6
 8008d52:	d024      	beq.n	8008d9e <UART_SetConfig+0x1102>
 8008d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	2b07      	cmp	r3, #7
 8008d5a:	d01d      	beq.n	8008d98 <UART_SetConfig+0x10fc>
 8008d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d016      	beq.n	8008d92 <UART_SetConfig+0x10f6>
 8008d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	2b09      	cmp	r3, #9
 8008d6a:	d00f      	beq.n	8008d8c <UART_SetConfig+0x10f0>
 8008d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	2b0a      	cmp	r3, #10
 8008d72:	d008      	beq.n	8008d86 <UART_SetConfig+0x10ea>
 8008d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	2b0b      	cmp	r3, #11
 8008d7a:	d101      	bne.n	8008d80 <UART_SetConfig+0x10e4>
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	e01f      	b.n	8008dc0 <UART_SetConfig+0x1124>
 8008d80:	2380      	movs	r3, #128	; 0x80
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	e01c      	b.n	8008dc0 <UART_SetConfig+0x1124>
 8008d86:	2380      	movs	r3, #128	; 0x80
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	e019      	b.n	8008dc0 <UART_SetConfig+0x1124>
 8008d8c:	2380      	movs	r3, #128	; 0x80
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	e016      	b.n	8008dc0 <UART_SetConfig+0x1124>
 8008d92:	2380      	movs	r3, #128	; 0x80
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	e013      	b.n	8008dc0 <UART_SetConfig+0x1124>
 8008d98:	2380      	movs	r3, #128	; 0x80
 8008d9a:	011b      	lsls	r3, r3, #4
 8008d9c:	e010      	b.n	8008dc0 <UART_SetConfig+0x1124>
 8008d9e:	4b35      	ldr	r3, [pc, #212]	; (8008e74 <UART_SetConfig+0x11d8>)
 8008da0:	e00e      	b.n	8008dc0 <UART_SetConfig+0x1124>
 8008da2:	4b35      	ldr	r3, [pc, #212]	; (8008e78 <UART_SetConfig+0x11dc>)
 8008da4:	e00c      	b.n	8008dc0 <UART_SetConfig+0x1124>
 8008da6:	2380      	movs	r3, #128	; 0x80
 8008da8:	015b      	lsls	r3, r3, #5
 8008daa:	e009      	b.n	8008dc0 <UART_SetConfig+0x1124>
 8008dac:	4b33      	ldr	r3, [pc, #204]	; (8008e7c <UART_SetConfig+0x11e0>)
 8008dae:	e007      	b.n	8008dc0 <UART_SetConfig+0x1124>
 8008db0:	2380      	movs	r3, #128	; 0x80
 8008db2:	019b      	lsls	r3, r3, #6
 8008db4:	e004      	b.n	8008dc0 <UART_SetConfig+0x1124>
 8008db6:	2380      	movs	r3, #128	; 0x80
 8008db8:	01db      	lsls	r3, r3, #7
 8008dba:	e001      	b.n	8008dc0 <UART_SetConfig+0x1124>
 8008dbc:	2380      	movs	r3, #128	; 0x80
 8008dbe:	021b      	lsls	r3, r3, #8
 8008dc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dc2:	6852      	ldr	r2, [r2, #4]
 8008dc4:	0852      	lsrs	r2, r2, #1
 8008dc6:	189a      	adds	r2, r3, r2
 8008dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	0019      	movs	r1, r3
 8008dce:	0010      	movs	r0, r2
 8008dd0:	f7f7 f9a0 	bl	8000114 <__udivsi3>
 8008dd4:	0003      	movs	r3, r0
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8008dda:	e007      	b.n	8008dec <UART_SetConfig+0x1150>
      default:
        ret = HAL_ERROR;
 8008ddc:	231b      	movs	r3, #27
 8008dde:	2258      	movs	r2, #88	; 0x58
 8008de0:	4694      	mov	ip, r2
 8008de2:	44bc      	add	ip, r7
 8008de4:	4463      	add	r3, ip
 8008de6:	2201      	movs	r2, #1
 8008de8:	701a      	strb	r2, [r3, #0]
        break;
 8008dea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dee:	2b0f      	cmp	r3, #15
 8008df0:	d908      	bls.n	8008e04 <UART_SetConfig+0x1168>
 8008df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008df4:	4a22      	ldr	r2, [pc, #136]	; (8008e80 <UART_SetConfig+0x11e4>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d804      	bhi.n	8008e04 <UART_SetConfig+0x1168>
    {
      huart->Instance->BRR = usartdiv;
 8008dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008e00:	60da      	str	r2, [r3, #12]
 8008e02:	e006      	b.n	8008e12 <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8008e04:	231b      	movs	r3, #27
 8008e06:	2258      	movs	r2, #88	; 0x58
 8008e08:	4694      	mov	ip, r2
 8008e0a:	44bc      	add	ip, r7
 8008e0c:	4463      	add	r3, ip
 8008e0e:	2201      	movs	r2, #1
 8008e10:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e14:	226a      	movs	r2, #106	; 0x6a
 8008e16:	2101      	movs	r1, #1
 8008e18:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e1c:	2268      	movs	r2, #104	; 0x68
 8008e1e:	2101      	movs	r1, #1
 8008e20:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e24:	2200      	movs	r2, #0
 8008e26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008e2e:	231b      	movs	r3, #27
 8008e30:	2258      	movs	r2, #88	; 0x58
 8008e32:	4694      	mov	ip, r2
 8008e34:	44bc      	add	ip, r7
 8008e36:	4463      	add	r3, ip
 8008e38:	781b      	ldrb	r3, [r3, #0]
}
 8008e3a:	0018      	movs	r0, r3
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	b021      	add	sp, #132	; 0x84
 8008e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e42:	46c0      	nop			; (mov r8, r8)
 8008e44:	0000f424 	.word	0x0000f424
 8008e48:	00f42400 	.word	0x00f42400
 8008e4c:	0001e848 	.word	0x0001e848
 8008e50:	0003d090 	.word	0x0003d090
 8008e54:	0007a120 	.word	0x0007a120
 8008e58:	000f4240 	.word	0x000f4240
 8008e5c:	00145855 	.word	0x00145855
 8008e60:	00186a00 	.word	0x00186a00
 8008e64:	001e8480 	.word	0x001e8480
 8008e68:	0028b0aa 	.word	0x0028b0aa
 8008e6c:	003d0900 	.word	0x003d0900
 8008e70:	007a1200 	.word	0x007a1200
 8008e74:	00000aaa 	.word	0x00000aaa
 8008e78:	00000ccc 	.word	0x00000ccc
 8008e7c:	00001555 	.word	0x00001555
 8008e80:	0000ffff 	.word	0x0000ffff

08008e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e90:	2201      	movs	r2, #1
 8008e92:	4013      	ands	r3, r2
 8008e94:	d00b      	beq.n	8008eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	4a4a      	ldr	r2, [pc, #296]	; (8008fc8 <UART_AdvFeatureConfig+0x144>)
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	0019      	movs	r1, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	d00b      	beq.n	8008ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	4a43      	ldr	r2, [pc, #268]	; (8008fcc <UART_AdvFeatureConfig+0x148>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	0019      	movs	r1, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed4:	2204      	movs	r2, #4
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	d00b      	beq.n	8008ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	4a3b      	ldr	r2, [pc, #236]	; (8008fd0 <UART_AdvFeatureConfig+0x14c>)
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	0019      	movs	r1, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef6:	2208      	movs	r2, #8
 8008ef8:	4013      	ands	r3, r2
 8008efa:	d00b      	beq.n	8008f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	4a34      	ldr	r2, [pc, #208]	; (8008fd4 <UART_AdvFeatureConfig+0x150>)
 8008f04:	4013      	ands	r3, r2
 8008f06:	0019      	movs	r1, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f18:	2210      	movs	r2, #16
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	d00b      	beq.n	8008f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	4a2c      	ldr	r2, [pc, #176]	; (8008fd8 <UART_AdvFeatureConfig+0x154>)
 8008f26:	4013      	ands	r3, r2
 8008f28:	0019      	movs	r1, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	d00b      	beq.n	8008f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	4a25      	ldr	r2, [pc, #148]	; (8008fdc <UART_AdvFeatureConfig+0x158>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	0019      	movs	r1, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5c:	2240      	movs	r2, #64	; 0x40
 8008f5e:	4013      	ands	r3, r2
 8008f60:	d01d      	beq.n	8008f9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a1d      	ldr	r2, [pc, #116]	; (8008fe0 <UART_AdvFeatureConfig+0x15c>)
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	0019      	movs	r1, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f7e:	2380      	movs	r3, #128	; 0x80
 8008f80:	035b      	lsls	r3, r3, #13
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d10b      	bne.n	8008f9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	4a15      	ldr	r2, [pc, #84]	; (8008fe4 <UART_AdvFeatureConfig+0x160>)
 8008f8e:	4013      	ands	r3, r2
 8008f90:	0019      	movs	r1, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa2:	2280      	movs	r2, #128	; 0x80
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	d00b      	beq.n	8008fc0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	4a0e      	ldr	r2, [pc, #56]	; (8008fe8 <UART_AdvFeatureConfig+0x164>)
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	0019      	movs	r1, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	605a      	str	r2, [r3, #4]
  }
}
 8008fc0:	46c0      	nop			; (mov r8, r8)
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	b002      	add	sp, #8
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	fffdffff 	.word	0xfffdffff
 8008fcc:	fffeffff 	.word	0xfffeffff
 8008fd0:	fffbffff 	.word	0xfffbffff
 8008fd4:	ffff7fff 	.word	0xffff7fff
 8008fd8:	ffffefff 	.word	0xffffefff
 8008fdc:	ffffdfff 	.word	0xffffdfff
 8008fe0:	ffefffff 	.word	0xffefffff
 8008fe4:	ff9fffff 	.word	0xff9fffff
 8008fe8:	fff7ffff 	.word	0xfff7ffff

08008fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2288      	movs	r2, #136	; 0x88
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008ffc:	f7fc fde0 	bl	8005bc0 <HAL_GetTick>
 8009000:	0003      	movs	r3, r0
 8009002:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2208      	movs	r2, #8
 800900c:	4013      	ands	r3, r2
 800900e:	2b08      	cmp	r3, #8
 8009010:	d10d      	bne.n	800902e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	2380      	movs	r3, #128	; 0x80
 8009016:	0399      	lsls	r1, r3, #14
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	4b18      	ldr	r3, [pc, #96]	; (800907c <UART_CheckIdleState+0x90>)
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	0013      	movs	r3, r2
 8009020:	2200      	movs	r2, #0
 8009022:	f000 f82d 	bl	8009080 <UART_WaitOnFlagUntilTimeout>
 8009026:	1e03      	subs	r3, r0, #0
 8009028:	d001      	beq.n	800902e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e021      	b.n	8009072 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2204      	movs	r2, #4
 8009036:	4013      	ands	r3, r2
 8009038:	2b04      	cmp	r3, #4
 800903a:	d10d      	bne.n	8009058 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	2380      	movs	r3, #128	; 0x80
 8009040:	03d9      	lsls	r1, r3, #15
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	4b0d      	ldr	r3, [pc, #52]	; (800907c <UART_CheckIdleState+0x90>)
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	0013      	movs	r3, r2
 800904a:	2200      	movs	r2, #0
 800904c:	f000 f818 	bl	8009080 <UART_WaitOnFlagUntilTimeout>
 8009050:	1e03      	subs	r3, r0, #0
 8009052:	d001      	beq.n	8009058 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e00c      	b.n	8009072 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2280      	movs	r2, #128	; 0x80
 800905c:	2120      	movs	r1, #32
 800905e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2284      	movs	r2, #132	; 0x84
 8009064:	2120      	movs	r1, #32
 8009066:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	227c      	movs	r2, #124	; 0x7c
 800906c:	2100      	movs	r1, #0
 800906e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	0018      	movs	r0, r3
 8009074:	46bd      	mov	sp, r7
 8009076:	b004      	add	sp, #16
 8009078:	bd80      	pop	{r7, pc}
 800907a:	46c0      	nop			; (mov r8, r8)
 800907c:	01ffffff 	.word	0x01ffffff

08009080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	603b      	str	r3, [r7, #0]
 800908c:	1dfb      	adds	r3, r7, #7
 800908e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009090:	e02b      	b.n	80090ea <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	3301      	adds	r3, #1
 8009096:	d028      	beq.n	80090ea <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009098:	f7fc fd92 	bl	8005bc0 <HAL_GetTick>
 800909c:	0002      	movs	r2, r0
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d302      	bcc.n	80090ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d11d      	bne.n	80090ea <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4916      	ldr	r1, [pc, #88]	; (8009114 <UART_WaitOnFlagUntilTimeout+0x94>)
 80090ba:	400a      	ands	r2, r1
 80090bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689a      	ldr	r2, [r3, #8]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2101      	movs	r1, #1
 80090ca:	438a      	bics	r2, r1
 80090cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2280      	movs	r2, #128	; 0x80
 80090d2:	2120      	movs	r1, #32
 80090d4:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2284      	movs	r2, #132	; 0x84
 80090da:	2120      	movs	r1, #32
 80090dc:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	227c      	movs	r2, #124	; 0x7c
 80090e2:	2100      	movs	r1, #0
 80090e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e00f      	b.n	800910a <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	4013      	ands	r3, r2
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	425a      	negs	r2, r3
 80090fa:	4153      	adcs	r3, r2
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	001a      	movs	r2, r3
 8009100:	1dfb      	adds	r3, r7, #7
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d0c4      	beq.n	8009092 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	0018      	movs	r0, r3
 800910c:	46bd      	mov	sp, r7
 800910e:	b004      	add	sp, #16
 8009110:	bd80      	pop	{r7, pc}
 8009112:	46c0      	nop			; (mov r8, r8)
 8009114:	fffffe5f 	.word	0xfffffe5f

08009118 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	227c      	movs	r2, #124	; 0x7c
 8009124:	5c9b      	ldrb	r3, [r3, r2]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d101      	bne.n	800912e <HAL_UARTEx_DisableFifoMode+0x16>
 800912a:	2302      	movs	r3, #2
 800912c:	e027      	b.n	800917e <HAL_UARTEx_DisableFifoMode+0x66>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	227c      	movs	r2, #124	; 0x7c
 8009132:	2101      	movs	r1, #1
 8009134:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2280      	movs	r2, #128	; 0x80
 800913a:	2124      	movs	r1, #36	; 0x24
 800913c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2101      	movs	r1, #1
 8009152:	438a      	bics	r2, r1
 8009154:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	4a0b      	ldr	r2, [pc, #44]	; (8009188 <HAL_UARTEx_DisableFifoMode+0x70>)
 800915a:	4013      	ands	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2280      	movs	r2, #128	; 0x80
 8009170:	2120      	movs	r1, #32
 8009172:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	227c      	movs	r2, #124	; 0x7c
 8009178:	2100      	movs	r1, #0
 800917a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	0018      	movs	r0, r3
 8009180:	46bd      	mov	sp, r7
 8009182:	b004      	add	sp, #16
 8009184:	bd80      	pop	{r7, pc}
 8009186:	46c0      	nop			; (mov r8, r8)
 8009188:	dfffffff 	.word	0xdfffffff

0800918c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	227c      	movs	r2, #124	; 0x7c
 800919a:	5c9b      	ldrb	r3, [r3, r2]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d101      	bne.n	80091a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e02e      	b.n	8009202 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	227c      	movs	r2, #124	; 0x7c
 80091a8:	2101      	movs	r1, #1
 80091aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2280      	movs	r2, #128	; 0x80
 80091b0:	2124      	movs	r1, #36	; 0x24
 80091b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2101      	movs	r1, #1
 80091c8:	438a      	bics	r2, r1
 80091ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	08d9      	lsrs	r1, r3, #3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	0018      	movs	r0, r3
 80091e4:	f000 f854 	bl	8009290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2280      	movs	r2, #128	; 0x80
 80091f4:	2120      	movs	r1, #32
 80091f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	227c      	movs	r2, #124	; 0x7c
 80091fc:	2100      	movs	r1, #0
 80091fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	0018      	movs	r0, r3
 8009204:	46bd      	mov	sp, r7
 8009206:	b004      	add	sp, #16
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	227c      	movs	r2, #124	; 0x7c
 800921a:	5c9b      	ldrb	r3, [r3, r2]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d101      	bne.n	8009224 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009220:	2302      	movs	r3, #2
 8009222:	e02f      	b.n	8009284 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	227c      	movs	r2, #124	; 0x7c
 8009228:	2101      	movs	r1, #1
 800922a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2280      	movs	r2, #128	; 0x80
 8009230:	2124      	movs	r1, #36	; 0x24
 8009232:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2101      	movs	r1, #1
 8009248:	438a      	bics	r2, r1
 800924a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	4a0e      	ldr	r2, [pc, #56]	; (800928c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009254:	4013      	ands	r3, r2
 8009256:	0019      	movs	r1, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	0018      	movs	r0, r3
 8009266:	f000 f813 	bl	8009290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2280      	movs	r2, #128	; 0x80
 8009276:	2120      	movs	r1, #32
 8009278:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	227c      	movs	r2, #124	; 0x7c
 800927e:	2100      	movs	r1, #0
 8009280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	0018      	movs	r0, r3
 8009286:	46bd      	mov	sp, r7
 8009288:	b004      	add	sp, #16
 800928a:	bd80      	pop	{r7, pc}
 800928c:	f1ffffff 	.word	0xf1ffffff

08009290 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009292:	b089      	sub	sp, #36	; 0x24
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009298:	2314      	movs	r3, #20
 800929a:	18fb      	adds	r3, r7, r3
 800929c:	4a2f      	ldr	r2, [pc, #188]	; (800935c <UARTEx_SetNbDataToProcess+0xcc>)
 800929e:	ca03      	ldmia	r2!, {r0, r1}
 80092a0:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80092a2:	230c      	movs	r3, #12
 80092a4:	18fb      	adds	r3, r7, r3
 80092a6:	4a2e      	ldr	r2, [pc, #184]	; (8009360 <UARTEx_SetNbDataToProcess+0xd0>)
 80092a8:	ca03      	ldmia	r2!, {r0, r1}
 80092aa:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d108      	bne.n	80092c6 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	226a      	movs	r2, #106	; 0x6a
 80092b8:	2101      	movs	r1, #1
 80092ba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2268      	movs	r2, #104	; 0x68
 80092c0:	2101      	movs	r1, #1
 80092c2:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092c4:	e046      	b.n	8009354 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092c6:	261f      	movs	r6, #31
 80092c8:	19bb      	adds	r3, r7, r6
 80092ca:	2208      	movs	r2, #8
 80092cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092ce:	201e      	movs	r0, #30
 80092d0:	183b      	adds	r3, r7, r0
 80092d2:	2208      	movs	r2, #8
 80092d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	0e5b      	lsrs	r3, r3, #25
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	241d      	movs	r4, #29
 80092e2:	193b      	adds	r3, r7, r4
 80092e4:	2107      	movs	r1, #7
 80092e6:	400a      	ands	r2, r1
 80092e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	0f5b      	lsrs	r3, r3, #29
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	251c      	movs	r5, #28
 80092f6:	197b      	adds	r3, r7, r5
 80092f8:	2107      	movs	r1, #7
 80092fa:	400a      	ands	r2, r1
 80092fc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80092fe:	183b      	adds	r3, r7, r0
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	197a      	adds	r2, r7, r5
 8009304:	7812      	ldrb	r2, [r2, #0]
 8009306:	2114      	movs	r1, #20
 8009308:	1879      	adds	r1, r7, r1
 800930a:	5c8a      	ldrb	r2, [r1, r2]
 800930c:	435a      	muls	r2, r3
 800930e:	0010      	movs	r0, r2
 8009310:	197b      	adds	r3, r7, r5
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	250c      	movs	r5, #12
 8009316:	197a      	adds	r2, r7, r5
 8009318:	5cd3      	ldrb	r3, [r2, r3]
 800931a:	0019      	movs	r1, r3
 800931c:	f7f6 ff84 	bl	8000228 <__divsi3>
 8009320:	0003      	movs	r3, r0
 8009322:	b299      	uxth	r1, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	226a      	movs	r2, #106	; 0x6a
 8009328:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800932a:	19bb      	adds	r3, r7, r6
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	193a      	adds	r2, r7, r4
 8009330:	7812      	ldrb	r2, [r2, #0]
 8009332:	2114      	movs	r1, #20
 8009334:	1879      	adds	r1, r7, r1
 8009336:	5c8a      	ldrb	r2, [r1, r2]
 8009338:	435a      	muls	r2, r3
 800933a:	0010      	movs	r0, r2
 800933c:	193b      	adds	r3, r7, r4
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	197a      	adds	r2, r7, r5
 8009342:	5cd3      	ldrb	r3, [r2, r3]
 8009344:	0019      	movs	r1, r3
 8009346:	f7f6 ff6f 	bl	8000228 <__divsi3>
 800934a:	0003      	movs	r3, r0
 800934c:	b299      	uxth	r1, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2268      	movs	r2, #104	; 0x68
 8009352:	5299      	strh	r1, [r3, r2]
}
 8009354:	46c0      	nop			; (mov r8, r8)
 8009356:	46bd      	mov	sp, r7
 8009358:	b009      	add	sp, #36	; 0x24
 800935a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800935c:	0800a174 	.word	0x0800a174
 8009360:	0800a17c 	.word	0x0800a17c

08009364 <__errno>:
 8009364:	4b01      	ldr	r3, [pc, #4]	; (800936c <__errno+0x8>)
 8009366:	6818      	ldr	r0, [r3, #0]
 8009368:	4770      	bx	lr
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	20000130 	.word	0x20000130

08009370 <__libc_init_array>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	2600      	movs	r6, #0
 8009374:	4d0c      	ldr	r5, [pc, #48]	; (80093a8 <__libc_init_array+0x38>)
 8009376:	4c0d      	ldr	r4, [pc, #52]	; (80093ac <__libc_init_array+0x3c>)
 8009378:	1b64      	subs	r4, r4, r5
 800937a:	10a4      	asrs	r4, r4, #2
 800937c:	42a6      	cmp	r6, r4
 800937e:	d109      	bne.n	8009394 <__libc_init_array+0x24>
 8009380:	2600      	movs	r6, #0
 8009382:	f000 fc3b 	bl	8009bfc <_init>
 8009386:	4d0a      	ldr	r5, [pc, #40]	; (80093b0 <__libc_init_array+0x40>)
 8009388:	4c0a      	ldr	r4, [pc, #40]	; (80093b4 <__libc_init_array+0x44>)
 800938a:	1b64      	subs	r4, r4, r5
 800938c:	10a4      	asrs	r4, r4, #2
 800938e:	42a6      	cmp	r6, r4
 8009390:	d105      	bne.n	800939e <__libc_init_array+0x2e>
 8009392:	bd70      	pop	{r4, r5, r6, pc}
 8009394:	00b3      	lsls	r3, r6, #2
 8009396:	58eb      	ldr	r3, [r5, r3]
 8009398:	4798      	blx	r3
 800939a:	3601      	adds	r6, #1
 800939c:	e7ee      	b.n	800937c <__libc_init_array+0xc>
 800939e:	00b3      	lsls	r3, r6, #2
 80093a0:	58eb      	ldr	r3, [r5, r3]
 80093a2:	4798      	blx	r3
 80093a4:	3601      	adds	r6, #1
 80093a6:	e7f2      	b.n	800938e <__libc_init_array+0x1e>
 80093a8:	0800a2a4 	.word	0x0800a2a4
 80093ac:	0800a2a4 	.word	0x0800a2a4
 80093b0:	0800a2a4 	.word	0x0800a2a4
 80093b4:	0800a2a8 	.word	0x0800a2a8

080093b8 <memcpy>:
 80093b8:	2300      	movs	r3, #0
 80093ba:	b510      	push	{r4, lr}
 80093bc:	429a      	cmp	r2, r3
 80093be:	d100      	bne.n	80093c2 <memcpy+0xa>
 80093c0:	bd10      	pop	{r4, pc}
 80093c2:	5ccc      	ldrb	r4, [r1, r3]
 80093c4:	54c4      	strb	r4, [r0, r3]
 80093c6:	3301      	adds	r3, #1
 80093c8:	e7f8      	b.n	80093bc <memcpy+0x4>

080093ca <memset>:
 80093ca:	0003      	movs	r3, r0
 80093cc:	1812      	adds	r2, r2, r0
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d100      	bne.n	80093d4 <memset+0xa>
 80093d2:	4770      	bx	lr
 80093d4:	7019      	strb	r1, [r3, #0]
 80093d6:	3301      	adds	r3, #1
 80093d8:	e7f9      	b.n	80093ce <memset+0x4>
	...

080093dc <sniprintf>:
 80093dc:	b40c      	push	{r2, r3}
 80093de:	b530      	push	{r4, r5, lr}
 80093e0:	4b16      	ldr	r3, [pc, #88]	; (800943c <sniprintf+0x60>)
 80093e2:	b09d      	sub	sp, #116	; 0x74
 80093e4:	1e0c      	subs	r4, r1, #0
 80093e6:	681d      	ldr	r5, [r3, #0]
 80093e8:	da08      	bge.n	80093fc <sniprintf+0x20>
 80093ea:	238b      	movs	r3, #139	; 0x8b
 80093ec:	2001      	movs	r0, #1
 80093ee:	602b      	str	r3, [r5, #0]
 80093f0:	4240      	negs	r0, r0
 80093f2:	b01d      	add	sp, #116	; 0x74
 80093f4:	bc30      	pop	{r4, r5}
 80093f6:	bc08      	pop	{r3}
 80093f8:	b002      	add	sp, #8
 80093fa:	4718      	bx	r3
 80093fc:	2382      	movs	r3, #130	; 0x82
 80093fe:	a902      	add	r1, sp, #8
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	818b      	strh	r3, [r1, #12]
 8009404:	2300      	movs	r3, #0
 8009406:	9002      	str	r0, [sp, #8]
 8009408:	6108      	str	r0, [r1, #16]
 800940a:	429c      	cmp	r4, r3
 800940c:	d000      	beq.n	8009410 <sniprintf+0x34>
 800940e:	1e63      	subs	r3, r4, #1
 8009410:	608b      	str	r3, [r1, #8]
 8009412:	614b      	str	r3, [r1, #20]
 8009414:	2301      	movs	r3, #1
 8009416:	425b      	negs	r3, r3
 8009418:	81cb      	strh	r3, [r1, #14]
 800941a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800941c:	ab21      	add	r3, sp, #132	; 0x84
 800941e:	0028      	movs	r0, r5
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	f000 f86f 	bl	8009504 <_svfiprintf_r>
 8009426:	1c43      	adds	r3, r0, #1
 8009428:	da01      	bge.n	800942e <sniprintf+0x52>
 800942a:	238b      	movs	r3, #139	; 0x8b
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	2c00      	cmp	r4, #0
 8009430:	d0df      	beq.n	80093f2 <sniprintf+0x16>
 8009432:	2300      	movs	r3, #0
 8009434:	9a02      	ldr	r2, [sp, #8]
 8009436:	7013      	strb	r3, [r2, #0]
 8009438:	e7db      	b.n	80093f2 <sniprintf+0x16>
 800943a:	46c0      	nop			; (mov r8, r8)
 800943c:	20000130 	.word	0x20000130

08009440 <__ssputs_r>:
 8009440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009442:	688e      	ldr	r6, [r1, #8]
 8009444:	b085      	sub	sp, #20
 8009446:	0007      	movs	r7, r0
 8009448:	000c      	movs	r4, r1
 800944a:	9203      	str	r2, [sp, #12]
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	429e      	cmp	r6, r3
 8009450:	d83c      	bhi.n	80094cc <__ssputs_r+0x8c>
 8009452:	2390      	movs	r3, #144	; 0x90
 8009454:	898a      	ldrh	r2, [r1, #12]
 8009456:	00db      	lsls	r3, r3, #3
 8009458:	421a      	tst	r2, r3
 800945a:	d034      	beq.n	80094c6 <__ssputs_r+0x86>
 800945c:	2503      	movs	r5, #3
 800945e:	6909      	ldr	r1, [r1, #16]
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	1a5b      	subs	r3, r3, r1
 8009464:	9302      	str	r3, [sp, #8]
 8009466:	6963      	ldr	r3, [r4, #20]
 8009468:	9802      	ldr	r0, [sp, #8]
 800946a:	435d      	muls	r5, r3
 800946c:	0feb      	lsrs	r3, r5, #31
 800946e:	195d      	adds	r5, r3, r5
 8009470:	9b01      	ldr	r3, [sp, #4]
 8009472:	106d      	asrs	r5, r5, #1
 8009474:	3301      	adds	r3, #1
 8009476:	181b      	adds	r3, r3, r0
 8009478:	42ab      	cmp	r3, r5
 800947a:	d900      	bls.n	800947e <__ssputs_r+0x3e>
 800947c:	001d      	movs	r5, r3
 800947e:	0553      	lsls	r3, r2, #21
 8009480:	d532      	bpl.n	80094e8 <__ssputs_r+0xa8>
 8009482:	0029      	movs	r1, r5
 8009484:	0038      	movs	r0, r7
 8009486:	f000 fb19 	bl	8009abc <_malloc_r>
 800948a:	1e06      	subs	r6, r0, #0
 800948c:	d109      	bne.n	80094a2 <__ssputs_r+0x62>
 800948e:	230c      	movs	r3, #12
 8009490:	603b      	str	r3, [r7, #0]
 8009492:	2340      	movs	r3, #64	; 0x40
 8009494:	2001      	movs	r0, #1
 8009496:	89a2      	ldrh	r2, [r4, #12]
 8009498:	4240      	negs	r0, r0
 800949a:	4313      	orrs	r3, r2
 800949c:	81a3      	strh	r3, [r4, #12]
 800949e:	b005      	add	sp, #20
 80094a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a2:	9a02      	ldr	r2, [sp, #8]
 80094a4:	6921      	ldr	r1, [r4, #16]
 80094a6:	f7ff ff87 	bl	80093b8 <memcpy>
 80094aa:	89a3      	ldrh	r3, [r4, #12]
 80094ac:	4a14      	ldr	r2, [pc, #80]	; (8009500 <__ssputs_r+0xc0>)
 80094ae:	401a      	ands	r2, r3
 80094b0:	2380      	movs	r3, #128	; 0x80
 80094b2:	4313      	orrs	r3, r2
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	9b02      	ldr	r3, [sp, #8]
 80094b8:	6126      	str	r6, [r4, #16]
 80094ba:	18f6      	adds	r6, r6, r3
 80094bc:	6026      	str	r6, [r4, #0]
 80094be:	6165      	str	r5, [r4, #20]
 80094c0:	9e01      	ldr	r6, [sp, #4]
 80094c2:	1aed      	subs	r5, r5, r3
 80094c4:	60a5      	str	r5, [r4, #8]
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	429e      	cmp	r6, r3
 80094ca:	d900      	bls.n	80094ce <__ssputs_r+0x8e>
 80094cc:	9e01      	ldr	r6, [sp, #4]
 80094ce:	0032      	movs	r2, r6
 80094d0:	9903      	ldr	r1, [sp, #12]
 80094d2:	6820      	ldr	r0, [r4, #0]
 80094d4:	f000 fa95 	bl	8009a02 <memmove>
 80094d8:	68a3      	ldr	r3, [r4, #8]
 80094da:	2000      	movs	r0, #0
 80094dc:	1b9b      	subs	r3, r3, r6
 80094de:	60a3      	str	r3, [r4, #8]
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	199e      	adds	r6, r3, r6
 80094e4:	6026      	str	r6, [r4, #0]
 80094e6:	e7da      	b.n	800949e <__ssputs_r+0x5e>
 80094e8:	002a      	movs	r2, r5
 80094ea:	0038      	movs	r0, r7
 80094ec:	f000 fb44 	bl	8009b78 <_realloc_r>
 80094f0:	1e06      	subs	r6, r0, #0
 80094f2:	d1e0      	bne.n	80094b6 <__ssputs_r+0x76>
 80094f4:	6921      	ldr	r1, [r4, #16]
 80094f6:	0038      	movs	r0, r7
 80094f8:	f000 fa96 	bl	8009a28 <_free_r>
 80094fc:	e7c7      	b.n	800948e <__ssputs_r+0x4e>
 80094fe:	46c0      	nop			; (mov r8, r8)
 8009500:	fffffb7f 	.word	0xfffffb7f

08009504 <_svfiprintf_r>:
 8009504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009506:	b0a1      	sub	sp, #132	; 0x84
 8009508:	9003      	str	r0, [sp, #12]
 800950a:	001d      	movs	r5, r3
 800950c:	898b      	ldrh	r3, [r1, #12]
 800950e:	000f      	movs	r7, r1
 8009510:	0016      	movs	r6, r2
 8009512:	061b      	lsls	r3, r3, #24
 8009514:	d511      	bpl.n	800953a <_svfiprintf_r+0x36>
 8009516:	690b      	ldr	r3, [r1, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10e      	bne.n	800953a <_svfiprintf_r+0x36>
 800951c:	2140      	movs	r1, #64	; 0x40
 800951e:	f000 facd 	bl	8009abc <_malloc_r>
 8009522:	6038      	str	r0, [r7, #0]
 8009524:	6138      	str	r0, [r7, #16]
 8009526:	2800      	cmp	r0, #0
 8009528:	d105      	bne.n	8009536 <_svfiprintf_r+0x32>
 800952a:	230c      	movs	r3, #12
 800952c:	9a03      	ldr	r2, [sp, #12]
 800952e:	3801      	subs	r0, #1
 8009530:	6013      	str	r3, [r2, #0]
 8009532:	b021      	add	sp, #132	; 0x84
 8009534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009536:	2340      	movs	r3, #64	; 0x40
 8009538:	617b      	str	r3, [r7, #20]
 800953a:	2300      	movs	r3, #0
 800953c:	ac08      	add	r4, sp, #32
 800953e:	6163      	str	r3, [r4, #20]
 8009540:	3320      	adds	r3, #32
 8009542:	7663      	strb	r3, [r4, #25]
 8009544:	3310      	adds	r3, #16
 8009546:	76a3      	strb	r3, [r4, #26]
 8009548:	9507      	str	r5, [sp, #28]
 800954a:	0035      	movs	r5, r6
 800954c:	782b      	ldrb	r3, [r5, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <_svfiprintf_r+0x52>
 8009552:	2b25      	cmp	r3, #37	; 0x25
 8009554:	d146      	bne.n	80095e4 <_svfiprintf_r+0xe0>
 8009556:	1bab      	subs	r3, r5, r6
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	d00c      	beq.n	8009576 <_svfiprintf_r+0x72>
 800955c:	0032      	movs	r2, r6
 800955e:	0039      	movs	r1, r7
 8009560:	9803      	ldr	r0, [sp, #12]
 8009562:	f7ff ff6d 	bl	8009440 <__ssputs_r>
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	d100      	bne.n	800956c <_svfiprintf_r+0x68>
 800956a:	e0ae      	b.n	80096ca <_svfiprintf_r+0x1c6>
 800956c:	6962      	ldr	r2, [r4, #20]
 800956e:	9b05      	ldr	r3, [sp, #20]
 8009570:	4694      	mov	ip, r2
 8009572:	4463      	add	r3, ip
 8009574:	6163      	str	r3, [r4, #20]
 8009576:	782b      	ldrb	r3, [r5, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d100      	bne.n	800957e <_svfiprintf_r+0x7a>
 800957c:	e0a5      	b.n	80096ca <_svfiprintf_r+0x1c6>
 800957e:	2201      	movs	r2, #1
 8009580:	2300      	movs	r3, #0
 8009582:	4252      	negs	r2, r2
 8009584:	6062      	str	r2, [r4, #4]
 8009586:	a904      	add	r1, sp, #16
 8009588:	3254      	adds	r2, #84	; 0x54
 800958a:	1852      	adds	r2, r2, r1
 800958c:	1c6e      	adds	r6, r5, #1
 800958e:	6023      	str	r3, [r4, #0]
 8009590:	60e3      	str	r3, [r4, #12]
 8009592:	60a3      	str	r3, [r4, #8]
 8009594:	7013      	strb	r3, [r2, #0]
 8009596:	65a3      	str	r3, [r4, #88]	; 0x58
 8009598:	7831      	ldrb	r1, [r6, #0]
 800959a:	2205      	movs	r2, #5
 800959c:	4853      	ldr	r0, [pc, #332]	; (80096ec <_svfiprintf_r+0x1e8>)
 800959e:	f000 fa25 	bl	80099ec <memchr>
 80095a2:	1c75      	adds	r5, r6, #1
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d11f      	bne.n	80095e8 <_svfiprintf_r+0xe4>
 80095a8:	6822      	ldr	r2, [r4, #0]
 80095aa:	06d3      	lsls	r3, r2, #27
 80095ac:	d504      	bpl.n	80095b8 <_svfiprintf_r+0xb4>
 80095ae:	2353      	movs	r3, #83	; 0x53
 80095b0:	a904      	add	r1, sp, #16
 80095b2:	185b      	adds	r3, r3, r1
 80095b4:	2120      	movs	r1, #32
 80095b6:	7019      	strb	r1, [r3, #0]
 80095b8:	0713      	lsls	r3, r2, #28
 80095ba:	d504      	bpl.n	80095c6 <_svfiprintf_r+0xc2>
 80095bc:	2353      	movs	r3, #83	; 0x53
 80095be:	a904      	add	r1, sp, #16
 80095c0:	185b      	adds	r3, r3, r1
 80095c2:	212b      	movs	r1, #43	; 0x2b
 80095c4:	7019      	strb	r1, [r3, #0]
 80095c6:	7833      	ldrb	r3, [r6, #0]
 80095c8:	2b2a      	cmp	r3, #42	; 0x2a
 80095ca:	d016      	beq.n	80095fa <_svfiprintf_r+0xf6>
 80095cc:	0035      	movs	r5, r6
 80095ce:	2100      	movs	r1, #0
 80095d0:	200a      	movs	r0, #10
 80095d2:	68e3      	ldr	r3, [r4, #12]
 80095d4:	782a      	ldrb	r2, [r5, #0]
 80095d6:	1c6e      	adds	r6, r5, #1
 80095d8:	3a30      	subs	r2, #48	; 0x30
 80095da:	2a09      	cmp	r2, #9
 80095dc:	d94e      	bls.n	800967c <_svfiprintf_r+0x178>
 80095de:	2900      	cmp	r1, #0
 80095e0:	d018      	beq.n	8009614 <_svfiprintf_r+0x110>
 80095e2:	e010      	b.n	8009606 <_svfiprintf_r+0x102>
 80095e4:	3501      	adds	r5, #1
 80095e6:	e7b1      	b.n	800954c <_svfiprintf_r+0x48>
 80095e8:	4b40      	ldr	r3, [pc, #256]	; (80096ec <_svfiprintf_r+0x1e8>)
 80095ea:	6822      	ldr	r2, [r4, #0]
 80095ec:	1ac0      	subs	r0, r0, r3
 80095ee:	2301      	movs	r3, #1
 80095f0:	4083      	lsls	r3, r0
 80095f2:	4313      	orrs	r3, r2
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	002e      	movs	r6, r5
 80095f8:	e7ce      	b.n	8009598 <_svfiprintf_r+0x94>
 80095fa:	9b07      	ldr	r3, [sp, #28]
 80095fc:	1d19      	adds	r1, r3, #4
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	9107      	str	r1, [sp, #28]
 8009602:	2b00      	cmp	r3, #0
 8009604:	db01      	blt.n	800960a <_svfiprintf_r+0x106>
 8009606:	930b      	str	r3, [sp, #44]	; 0x2c
 8009608:	e004      	b.n	8009614 <_svfiprintf_r+0x110>
 800960a:	425b      	negs	r3, r3
 800960c:	60e3      	str	r3, [r4, #12]
 800960e:	2302      	movs	r3, #2
 8009610:	4313      	orrs	r3, r2
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	782b      	ldrb	r3, [r5, #0]
 8009616:	2b2e      	cmp	r3, #46	; 0x2e
 8009618:	d10a      	bne.n	8009630 <_svfiprintf_r+0x12c>
 800961a:	786b      	ldrb	r3, [r5, #1]
 800961c:	2b2a      	cmp	r3, #42	; 0x2a
 800961e:	d135      	bne.n	800968c <_svfiprintf_r+0x188>
 8009620:	9b07      	ldr	r3, [sp, #28]
 8009622:	3502      	adds	r5, #2
 8009624:	1d1a      	adds	r2, r3, #4
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	9207      	str	r2, [sp, #28]
 800962a:	2b00      	cmp	r3, #0
 800962c:	db2b      	blt.n	8009686 <_svfiprintf_r+0x182>
 800962e:	9309      	str	r3, [sp, #36]	; 0x24
 8009630:	4e2f      	ldr	r6, [pc, #188]	; (80096f0 <_svfiprintf_r+0x1ec>)
 8009632:	7829      	ldrb	r1, [r5, #0]
 8009634:	2203      	movs	r2, #3
 8009636:	0030      	movs	r0, r6
 8009638:	f000 f9d8 	bl	80099ec <memchr>
 800963c:	2800      	cmp	r0, #0
 800963e:	d006      	beq.n	800964e <_svfiprintf_r+0x14a>
 8009640:	2340      	movs	r3, #64	; 0x40
 8009642:	1b80      	subs	r0, r0, r6
 8009644:	4083      	lsls	r3, r0
 8009646:	6822      	ldr	r2, [r4, #0]
 8009648:	3501      	adds	r5, #1
 800964a:	4313      	orrs	r3, r2
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	7829      	ldrb	r1, [r5, #0]
 8009650:	2206      	movs	r2, #6
 8009652:	4828      	ldr	r0, [pc, #160]	; (80096f4 <_svfiprintf_r+0x1f0>)
 8009654:	1c6e      	adds	r6, r5, #1
 8009656:	7621      	strb	r1, [r4, #24]
 8009658:	f000 f9c8 	bl	80099ec <memchr>
 800965c:	2800      	cmp	r0, #0
 800965e:	d03c      	beq.n	80096da <_svfiprintf_r+0x1d6>
 8009660:	4b25      	ldr	r3, [pc, #148]	; (80096f8 <_svfiprintf_r+0x1f4>)
 8009662:	2b00      	cmp	r3, #0
 8009664:	d125      	bne.n	80096b2 <_svfiprintf_r+0x1ae>
 8009666:	2207      	movs	r2, #7
 8009668:	9b07      	ldr	r3, [sp, #28]
 800966a:	3307      	adds	r3, #7
 800966c:	4393      	bics	r3, r2
 800966e:	3308      	adds	r3, #8
 8009670:	9307      	str	r3, [sp, #28]
 8009672:	6963      	ldr	r3, [r4, #20]
 8009674:	9a04      	ldr	r2, [sp, #16]
 8009676:	189b      	adds	r3, r3, r2
 8009678:	6163      	str	r3, [r4, #20]
 800967a:	e766      	b.n	800954a <_svfiprintf_r+0x46>
 800967c:	4343      	muls	r3, r0
 800967e:	2101      	movs	r1, #1
 8009680:	189b      	adds	r3, r3, r2
 8009682:	0035      	movs	r5, r6
 8009684:	e7a6      	b.n	80095d4 <_svfiprintf_r+0xd0>
 8009686:	2301      	movs	r3, #1
 8009688:	425b      	negs	r3, r3
 800968a:	e7d0      	b.n	800962e <_svfiprintf_r+0x12a>
 800968c:	2300      	movs	r3, #0
 800968e:	200a      	movs	r0, #10
 8009690:	001a      	movs	r2, r3
 8009692:	3501      	adds	r5, #1
 8009694:	6063      	str	r3, [r4, #4]
 8009696:	7829      	ldrb	r1, [r5, #0]
 8009698:	1c6e      	adds	r6, r5, #1
 800969a:	3930      	subs	r1, #48	; 0x30
 800969c:	2909      	cmp	r1, #9
 800969e:	d903      	bls.n	80096a8 <_svfiprintf_r+0x1a4>
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d0c5      	beq.n	8009630 <_svfiprintf_r+0x12c>
 80096a4:	9209      	str	r2, [sp, #36]	; 0x24
 80096a6:	e7c3      	b.n	8009630 <_svfiprintf_r+0x12c>
 80096a8:	4342      	muls	r2, r0
 80096aa:	2301      	movs	r3, #1
 80096ac:	1852      	adds	r2, r2, r1
 80096ae:	0035      	movs	r5, r6
 80096b0:	e7f1      	b.n	8009696 <_svfiprintf_r+0x192>
 80096b2:	ab07      	add	r3, sp, #28
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	003a      	movs	r2, r7
 80096b8:	4b10      	ldr	r3, [pc, #64]	; (80096fc <_svfiprintf_r+0x1f8>)
 80096ba:	0021      	movs	r1, r4
 80096bc:	9803      	ldr	r0, [sp, #12]
 80096be:	e000      	b.n	80096c2 <_svfiprintf_r+0x1be>
 80096c0:	bf00      	nop
 80096c2:	9004      	str	r0, [sp, #16]
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	3301      	adds	r3, #1
 80096c8:	d1d3      	bne.n	8009672 <_svfiprintf_r+0x16e>
 80096ca:	89bb      	ldrh	r3, [r7, #12]
 80096cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80096ce:	065b      	lsls	r3, r3, #25
 80096d0:	d400      	bmi.n	80096d4 <_svfiprintf_r+0x1d0>
 80096d2:	e72e      	b.n	8009532 <_svfiprintf_r+0x2e>
 80096d4:	2001      	movs	r0, #1
 80096d6:	4240      	negs	r0, r0
 80096d8:	e72b      	b.n	8009532 <_svfiprintf_r+0x2e>
 80096da:	ab07      	add	r3, sp, #28
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	003a      	movs	r2, r7
 80096e0:	4b06      	ldr	r3, [pc, #24]	; (80096fc <_svfiprintf_r+0x1f8>)
 80096e2:	0021      	movs	r1, r4
 80096e4:	9803      	ldr	r0, [sp, #12]
 80096e6:	f000 f879 	bl	80097dc <_printf_i>
 80096ea:	e7ea      	b.n	80096c2 <_svfiprintf_r+0x1be>
 80096ec:	0800a268 	.word	0x0800a268
 80096f0:	0800a26e 	.word	0x0800a26e
 80096f4:	0800a272 	.word	0x0800a272
 80096f8:	00000000 	.word	0x00000000
 80096fc:	08009441 	.word	0x08009441

08009700 <_printf_common>:
 8009700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009702:	0015      	movs	r5, r2
 8009704:	9301      	str	r3, [sp, #4]
 8009706:	688a      	ldr	r2, [r1, #8]
 8009708:	690b      	ldr	r3, [r1, #16]
 800970a:	9000      	str	r0, [sp, #0]
 800970c:	000c      	movs	r4, r1
 800970e:	4293      	cmp	r3, r2
 8009710:	da00      	bge.n	8009714 <_printf_common+0x14>
 8009712:	0013      	movs	r3, r2
 8009714:	0022      	movs	r2, r4
 8009716:	602b      	str	r3, [r5, #0]
 8009718:	3243      	adds	r2, #67	; 0x43
 800971a:	7812      	ldrb	r2, [r2, #0]
 800971c:	2a00      	cmp	r2, #0
 800971e:	d001      	beq.n	8009724 <_printf_common+0x24>
 8009720:	3301      	adds	r3, #1
 8009722:	602b      	str	r3, [r5, #0]
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	069b      	lsls	r3, r3, #26
 8009728:	d502      	bpl.n	8009730 <_printf_common+0x30>
 800972a:	682b      	ldr	r3, [r5, #0]
 800972c:	3302      	adds	r3, #2
 800972e:	602b      	str	r3, [r5, #0]
 8009730:	2706      	movs	r7, #6
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	401f      	ands	r7, r3
 8009736:	d027      	beq.n	8009788 <_printf_common+0x88>
 8009738:	0023      	movs	r3, r4
 800973a:	3343      	adds	r3, #67	; 0x43
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	1e5a      	subs	r2, r3, #1
 8009740:	4193      	sbcs	r3, r2
 8009742:	6822      	ldr	r2, [r4, #0]
 8009744:	0692      	lsls	r2, r2, #26
 8009746:	d430      	bmi.n	80097aa <_printf_common+0xaa>
 8009748:	0022      	movs	r2, r4
 800974a:	9901      	ldr	r1, [sp, #4]
 800974c:	3243      	adds	r2, #67	; 0x43
 800974e:	9800      	ldr	r0, [sp, #0]
 8009750:	9e08      	ldr	r6, [sp, #32]
 8009752:	47b0      	blx	r6
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d025      	beq.n	80097a4 <_printf_common+0xa4>
 8009758:	2306      	movs	r3, #6
 800975a:	6820      	ldr	r0, [r4, #0]
 800975c:	682a      	ldr	r2, [r5, #0]
 800975e:	68e1      	ldr	r1, [r4, #12]
 8009760:	4003      	ands	r3, r0
 8009762:	2500      	movs	r5, #0
 8009764:	2b04      	cmp	r3, #4
 8009766:	d103      	bne.n	8009770 <_printf_common+0x70>
 8009768:	1a8d      	subs	r5, r1, r2
 800976a:	43eb      	mvns	r3, r5
 800976c:	17db      	asrs	r3, r3, #31
 800976e:	401d      	ands	r5, r3
 8009770:	68a3      	ldr	r3, [r4, #8]
 8009772:	6922      	ldr	r2, [r4, #16]
 8009774:	4293      	cmp	r3, r2
 8009776:	dd01      	ble.n	800977c <_printf_common+0x7c>
 8009778:	1a9b      	subs	r3, r3, r2
 800977a:	18ed      	adds	r5, r5, r3
 800977c:	2700      	movs	r7, #0
 800977e:	42bd      	cmp	r5, r7
 8009780:	d120      	bne.n	80097c4 <_printf_common+0xc4>
 8009782:	2000      	movs	r0, #0
 8009784:	e010      	b.n	80097a8 <_printf_common+0xa8>
 8009786:	3701      	adds	r7, #1
 8009788:	68e3      	ldr	r3, [r4, #12]
 800978a:	682a      	ldr	r2, [r5, #0]
 800978c:	1a9b      	subs	r3, r3, r2
 800978e:	42bb      	cmp	r3, r7
 8009790:	ddd2      	ble.n	8009738 <_printf_common+0x38>
 8009792:	0022      	movs	r2, r4
 8009794:	2301      	movs	r3, #1
 8009796:	3219      	adds	r2, #25
 8009798:	9901      	ldr	r1, [sp, #4]
 800979a:	9800      	ldr	r0, [sp, #0]
 800979c:	9e08      	ldr	r6, [sp, #32]
 800979e:	47b0      	blx	r6
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d1f0      	bne.n	8009786 <_printf_common+0x86>
 80097a4:	2001      	movs	r0, #1
 80097a6:	4240      	negs	r0, r0
 80097a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097aa:	2030      	movs	r0, #48	; 0x30
 80097ac:	18e1      	adds	r1, r4, r3
 80097ae:	3143      	adds	r1, #67	; 0x43
 80097b0:	7008      	strb	r0, [r1, #0]
 80097b2:	0021      	movs	r1, r4
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	3145      	adds	r1, #69	; 0x45
 80097b8:	7809      	ldrb	r1, [r1, #0]
 80097ba:	18a2      	adds	r2, r4, r2
 80097bc:	3243      	adds	r2, #67	; 0x43
 80097be:	3302      	adds	r3, #2
 80097c0:	7011      	strb	r1, [r2, #0]
 80097c2:	e7c1      	b.n	8009748 <_printf_common+0x48>
 80097c4:	0022      	movs	r2, r4
 80097c6:	2301      	movs	r3, #1
 80097c8:	321a      	adds	r2, #26
 80097ca:	9901      	ldr	r1, [sp, #4]
 80097cc:	9800      	ldr	r0, [sp, #0]
 80097ce:	9e08      	ldr	r6, [sp, #32]
 80097d0:	47b0      	blx	r6
 80097d2:	1c43      	adds	r3, r0, #1
 80097d4:	d0e6      	beq.n	80097a4 <_printf_common+0xa4>
 80097d6:	3701      	adds	r7, #1
 80097d8:	e7d1      	b.n	800977e <_printf_common+0x7e>
	...

080097dc <_printf_i>:
 80097dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097de:	b089      	sub	sp, #36	; 0x24
 80097e0:	9204      	str	r2, [sp, #16]
 80097e2:	000a      	movs	r2, r1
 80097e4:	3243      	adds	r2, #67	; 0x43
 80097e6:	9305      	str	r3, [sp, #20]
 80097e8:	9003      	str	r0, [sp, #12]
 80097ea:	9202      	str	r2, [sp, #8]
 80097ec:	7e0a      	ldrb	r2, [r1, #24]
 80097ee:	000c      	movs	r4, r1
 80097f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097f2:	2a6e      	cmp	r2, #110	; 0x6e
 80097f4:	d100      	bne.n	80097f8 <_printf_i+0x1c>
 80097f6:	e086      	b.n	8009906 <_printf_i+0x12a>
 80097f8:	d81f      	bhi.n	800983a <_printf_i+0x5e>
 80097fa:	2a63      	cmp	r2, #99	; 0x63
 80097fc:	d033      	beq.n	8009866 <_printf_i+0x8a>
 80097fe:	d808      	bhi.n	8009812 <_printf_i+0x36>
 8009800:	2a00      	cmp	r2, #0
 8009802:	d100      	bne.n	8009806 <_printf_i+0x2a>
 8009804:	e08c      	b.n	8009920 <_printf_i+0x144>
 8009806:	2a58      	cmp	r2, #88	; 0x58
 8009808:	d04d      	beq.n	80098a6 <_printf_i+0xca>
 800980a:	0025      	movs	r5, r4
 800980c:	3542      	adds	r5, #66	; 0x42
 800980e:	702a      	strb	r2, [r5, #0]
 8009810:	e030      	b.n	8009874 <_printf_i+0x98>
 8009812:	2a64      	cmp	r2, #100	; 0x64
 8009814:	d001      	beq.n	800981a <_printf_i+0x3e>
 8009816:	2a69      	cmp	r2, #105	; 0x69
 8009818:	d1f7      	bne.n	800980a <_printf_i+0x2e>
 800981a:	6819      	ldr	r1, [r3, #0]
 800981c:	6825      	ldr	r5, [r4, #0]
 800981e:	1d0a      	adds	r2, r1, #4
 8009820:	0628      	lsls	r0, r5, #24
 8009822:	d529      	bpl.n	8009878 <_printf_i+0x9c>
 8009824:	6808      	ldr	r0, [r1, #0]
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	2800      	cmp	r0, #0
 800982a:	da03      	bge.n	8009834 <_printf_i+0x58>
 800982c:	232d      	movs	r3, #45	; 0x2d
 800982e:	9a02      	ldr	r2, [sp, #8]
 8009830:	4240      	negs	r0, r0
 8009832:	7013      	strb	r3, [r2, #0]
 8009834:	4e6b      	ldr	r6, [pc, #428]	; (80099e4 <_printf_i+0x208>)
 8009836:	270a      	movs	r7, #10
 8009838:	e04f      	b.n	80098da <_printf_i+0xfe>
 800983a:	2a73      	cmp	r2, #115	; 0x73
 800983c:	d074      	beq.n	8009928 <_printf_i+0x14c>
 800983e:	d808      	bhi.n	8009852 <_printf_i+0x76>
 8009840:	2a6f      	cmp	r2, #111	; 0x6f
 8009842:	d01f      	beq.n	8009884 <_printf_i+0xa8>
 8009844:	2a70      	cmp	r2, #112	; 0x70
 8009846:	d1e0      	bne.n	800980a <_printf_i+0x2e>
 8009848:	2220      	movs	r2, #32
 800984a:	6809      	ldr	r1, [r1, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	6022      	str	r2, [r4, #0]
 8009850:	e003      	b.n	800985a <_printf_i+0x7e>
 8009852:	2a75      	cmp	r2, #117	; 0x75
 8009854:	d016      	beq.n	8009884 <_printf_i+0xa8>
 8009856:	2a78      	cmp	r2, #120	; 0x78
 8009858:	d1d7      	bne.n	800980a <_printf_i+0x2e>
 800985a:	0022      	movs	r2, r4
 800985c:	2178      	movs	r1, #120	; 0x78
 800985e:	3245      	adds	r2, #69	; 0x45
 8009860:	7011      	strb	r1, [r2, #0]
 8009862:	4e61      	ldr	r6, [pc, #388]	; (80099e8 <_printf_i+0x20c>)
 8009864:	e022      	b.n	80098ac <_printf_i+0xd0>
 8009866:	0025      	movs	r5, r4
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	3542      	adds	r5, #66	; 0x42
 800986c:	1d11      	adds	r1, r2, #4
 800986e:	6019      	str	r1, [r3, #0]
 8009870:	6813      	ldr	r3, [r2, #0]
 8009872:	702b      	strb	r3, [r5, #0]
 8009874:	2301      	movs	r3, #1
 8009876:	e065      	b.n	8009944 <_printf_i+0x168>
 8009878:	6808      	ldr	r0, [r1, #0]
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	0669      	lsls	r1, r5, #25
 800987e:	d5d3      	bpl.n	8009828 <_printf_i+0x4c>
 8009880:	b200      	sxth	r0, r0
 8009882:	e7d1      	b.n	8009828 <_printf_i+0x4c>
 8009884:	6819      	ldr	r1, [r3, #0]
 8009886:	6825      	ldr	r5, [r4, #0]
 8009888:	1d08      	adds	r0, r1, #4
 800988a:	6018      	str	r0, [r3, #0]
 800988c:	6808      	ldr	r0, [r1, #0]
 800988e:	062e      	lsls	r6, r5, #24
 8009890:	d505      	bpl.n	800989e <_printf_i+0xc2>
 8009892:	4e54      	ldr	r6, [pc, #336]	; (80099e4 <_printf_i+0x208>)
 8009894:	2708      	movs	r7, #8
 8009896:	2a6f      	cmp	r2, #111	; 0x6f
 8009898:	d01b      	beq.n	80098d2 <_printf_i+0xf6>
 800989a:	270a      	movs	r7, #10
 800989c:	e019      	b.n	80098d2 <_printf_i+0xf6>
 800989e:	066d      	lsls	r5, r5, #25
 80098a0:	d5f7      	bpl.n	8009892 <_printf_i+0xb6>
 80098a2:	b280      	uxth	r0, r0
 80098a4:	e7f5      	b.n	8009892 <_printf_i+0xb6>
 80098a6:	3145      	adds	r1, #69	; 0x45
 80098a8:	4e4e      	ldr	r6, [pc, #312]	; (80099e4 <_printf_i+0x208>)
 80098aa:	700a      	strb	r2, [r1, #0]
 80098ac:	6818      	ldr	r0, [r3, #0]
 80098ae:	6822      	ldr	r2, [r4, #0]
 80098b0:	1d01      	adds	r1, r0, #4
 80098b2:	6800      	ldr	r0, [r0, #0]
 80098b4:	6019      	str	r1, [r3, #0]
 80098b6:	0615      	lsls	r5, r2, #24
 80098b8:	d521      	bpl.n	80098fe <_printf_i+0x122>
 80098ba:	07d3      	lsls	r3, r2, #31
 80098bc:	d502      	bpl.n	80098c4 <_printf_i+0xe8>
 80098be:	2320      	movs	r3, #32
 80098c0:	431a      	orrs	r2, r3
 80098c2:	6022      	str	r2, [r4, #0]
 80098c4:	2710      	movs	r7, #16
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d103      	bne.n	80098d2 <_printf_i+0xf6>
 80098ca:	2320      	movs	r3, #32
 80098cc:	6822      	ldr	r2, [r4, #0]
 80098ce:	439a      	bics	r2, r3
 80098d0:	6022      	str	r2, [r4, #0]
 80098d2:	0023      	movs	r3, r4
 80098d4:	2200      	movs	r2, #0
 80098d6:	3343      	adds	r3, #67	; 0x43
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	6863      	ldr	r3, [r4, #4]
 80098dc:	60a3      	str	r3, [r4, #8]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	db58      	blt.n	8009994 <_printf_i+0x1b8>
 80098e2:	2204      	movs	r2, #4
 80098e4:	6821      	ldr	r1, [r4, #0]
 80098e6:	4391      	bics	r1, r2
 80098e8:	6021      	str	r1, [r4, #0]
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d154      	bne.n	8009998 <_printf_i+0x1bc>
 80098ee:	9d02      	ldr	r5, [sp, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d05a      	beq.n	80099aa <_printf_i+0x1ce>
 80098f4:	0025      	movs	r5, r4
 80098f6:	7833      	ldrb	r3, [r6, #0]
 80098f8:	3542      	adds	r5, #66	; 0x42
 80098fa:	702b      	strb	r3, [r5, #0]
 80098fc:	e055      	b.n	80099aa <_printf_i+0x1ce>
 80098fe:	0655      	lsls	r5, r2, #25
 8009900:	d5db      	bpl.n	80098ba <_printf_i+0xde>
 8009902:	b280      	uxth	r0, r0
 8009904:	e7d9      	b.n	80098ba <_printf_i+0xde>
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	680d      	ldr	r5, [r1, #0]
 800990a:	1d10      	adds	r0, r2, #4
 800990c:	6949      	ldr	r1, [r1, #20]
 800990e:	6018      	str	r0, [r3, #0]
 8009910:	6813      	ldr	r3, [r2, #0]
 8009912:	062e      	lsls	r6, r5, #24
 8009914:	d501      	bpl.n	800991a <_printf_i+0x13e>
 8009916:	6019      	str	r1, [r3, #0]
 8009918:	e002      	b.n	8009920 <_printf_i+0x144>
 800991a:	066d      	lsls	r5, r5, #25
 800991c:	d5fb      	bpl.n	8009916 <_printf_i+0x13a>
 800991e:	8019      	strh	r1, [r3, #0]
 8009920:	2300      	movs	r3, #0
 8009922:	9d02      	ldr	r5, [sp, #8]
 8009924:	6123      	str	r3, [r4, #16]
 8009926:	e04f      	b.n	80099c8 <_printf_i+0x1ec>
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	1d11      	adds	r1, r2, #4
 800992c:	6019      	str	r1, [r3, #0]
 800992e:	6815      	ldr	r5, [r2, #0]
 8009930:	2100      	movs	r1, #0
 8009932:	6862      	ldr	r2, [r4, #4]
 8009934:	0028      	movs	r0, r5
 8009936:	f000 f859 	bl	80099ec <memchr>
 800993a:	2800      	cmp	r0, #0
 800993c:	d001      	beq.n	8009942 <_printf_i+0x166>
 800993e:	1b40      	subs	r0, r0, r5
 8009940:	6060      	str	r0, [r4, #4]
 8009942:	6863      	ldr	r3, [r4, #4]
 8009944:	6123      	str	r3, [r4, #16]
 8009946:	2300      	movs	r3, #0
 8009948:	9a02      	ldr	r2, [sp, #8]
 800994a:	7013      	strb	r3, [r2, #0]
 800994c:	e03c      	b.n	80099c8 <_printf_i+0x1ec>
 800994e:	6923      	ldr	r3, [r4, #16]
 8009950:	002a      	movs	r2, r5
 8009952:	9904      	ldr	r1, [sp, #16]
 8009954:	9803      	ldr	r0, [sp, #12]
 8009956:	9d05      	ldr	r5, [sp, #20]
 8009958:	47a8      	blx	r5
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	d03e      	beq.n	80099dc <_printf_i+0x200>
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	079b      	lsls	r3, r3, #30
 8009962:	d415      	bmi.n	8009990 <_printf_i+0x1b4>
 8009964:	9b07      	ldr	r3, [sp, #28]
 8009966:	68e0      	ldr	r0, [r4, #12]
 8009968:	4298      	cmp	r0, r3
 800996a:	da39      	bge.n	80099e0 <_printf_i+0x204>
 800996c:	0018      	movs	r0, r3
 800996e:	e037      	b.n	80099e0 <_printf_i+0x204>
 8009970:	0022      	movs	r2, r4
 8009972:	2301      	movs	r3, #1
 8009974:	3219      	adds	r2, #25
 8009976:	9904      	ldr	r1, [sp, #16]
 8009978:	9803      	ldr	r0, [sp, #12]
 800997a:	9e05      	ldr	r6, [sp, #20]
 800997c:	47b0      	blx	r6
 800997e:	1c43      	adds	r3, r0, #1
 8009980:	d02c      	beq.n	80099dc <_printf_i+0x200>
 8009982:	3501      	adds	r5, #1
 8009984:	68e3      	ldr	r3, [r4, #12]
 8009986:	9a07      	ldr	r2, [sp, #28]
 8009988:	1a9b      	subs	r3, r3, r2
 800998a:	42ab      	cmp	r3, r5
 800998c:	dcf0      	bgt.n	8009970 <_printf_i+0x194>
 800998e:	e7e9      	b.n	8009964 <_printf_i+0x188>
 8009990:	2500      	movs	r5, #0
 8009992:	e7f7      	b.n	8009984 <_printf_i+0x1a8>
 8009994:	2800      	cmp	r0, #0
 8009996:	d0ad      	beq.n	80098f4 <_printf_i+0x118>
 8009998:	9d02      	ldr	r5, [sp, #8]
 800999a:	0039      	movs	r1, r7
 800999c:	f7f6 fc40 	bl	8000220 <__aeabi_uidivmod>
 80099a0:	5c73      	ldrb	r3, [r6, r1]
 80099a2:	3d01      	subs	r5, #1
 80099a4:	702b      	strb	r3, [r5, #0]
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d1f7      	bne.n	800999a <_printf_i+0x1be>
 80099aa:	2f08      	cmp	r7, #8
 80099ac:	d109      	bne.n	80099c2 <_printf_i+0x1e6>
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	07db      	lsls	r3, r3, #31
 80099b2:	d506      	bpl.n	80099c2 <_printf_i+0x1e6>
 80099b4:	6863      	ldr	r3, [r4, #4]
 80099b6:	6922      	ldr	r2, [r4, #16]
 80099b8:	4293      	cmp	r3, r2
 80099ba:	dc02      	bgt.n	80099c2 <_printf_i+0x1e6>
 80099bc:	2330      	movs	r3, #48	; 0x30
 80099be:	3d01      	subs	r5, #1
 80099c0:	702b      	strb	r3, [r5, #0]
 80099c2:	9b02      	ldr	r3, [sp, #8]
 80099c4:	1b5b      	subs	r3, r3, r5
 80099c6:	6123      	str	r3, [r4, #16]
 80099c8:	9b05      	ldr	r3, [sp, #20]
 80099ca:	aa07      	add	r2, sp, #28
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	0021      	movs	r1, r4
 80099d0:	9b04      	ldr	r3, [sp, #16]
 80099d2:	9803      	ldr	r0, [sp, #12]
 80099d4:	f7ff fe94 	bl	8009700 <_printf_common>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d1b8      	bne.n	800994e <_printf_i+0x172>
 80099dc:	2001      	movs	r0, #1
 80099de:	4240      	negs	r0, r0
 80099e0:	b009      	add	sp, #36	; 0x24
 80099e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e4:	0800a279 	.word	0x0800a279
 80099e8:	0800a28a 	.word	0x0800a28a

080099ec <memchr>:
 80099ec:	b2c9      	uxtb	r1, r1
 80099ee:	1882      	adds	r2, r0, r2
 80099f0:	4290      	cmp	r0, r2
 80099f2:	d101      	bne.n	80099f8 <memchr+0xc>
 80099f4:	2000      	movs	r0, #0
 80099f6:	4770      	bx	lr
 80099f8:	7803      	ldrb	r3, [r0, #0]
 80099fa:	428b      	cmp	r3, r1
 80099fc:	d0fb      	beq.n	80099f6 <memchr+0xa>
 80099fe:	3001      	adds	r0, #1
 8009a00:	e7f6      	b.n	80099f0 <memchr+0x4>

08009a02 <memmove>:
 8009a02:	b510      	push	{r4, lr}
 8009a04:	4288      	cmp	r0, r1
 8009a06:	d902      	bls.n	8009a0e <memmove+0xc>
 8009a08:	188b      	adds	r3, r1, r2
 8009a0a:	4298      	cmp	r0, r3
 8009a0c:	d303      	bcc.n	8009a16 <memmove+0x14>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e007      	b.n	8009a22 <memmove+0x20>
 8009a12:	5c8b      	ldrb	r3, [r1, r2]
 8009a14:	5483      	strb	r3, [r0, r2]
 8009a16:	3a01      	subs	r2, #1
 8009a18:	d2fb      	bcs.n	8009a12 <memmove+0x10>
 8009a1a:	bd10      	pop	{r4, pc}
 8009a1c:	5ccc      	ldrb	r4, [r1, r3]
 8009a1e:	54c4      	strb	r4, [r0, r3]
 8009a20:	3301      	adds	r3, #1
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d1fa      	bne.n	8009a1c <memmove+0x1a>
 8009a26:	e7f8      	b.n	8009a1a <memmove+0x18>

08009a28 <_free_r>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	0005      	movs	r5, r0
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	d010      	beq.n	8009a52 <_free_r+0x2a>
 8009a30:	1f0c      	subs	r4, r1, #4
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	da00      	bge.n	8009a3a <_free_r+0x12>
 8009a38:	18e4      	adds	r4, r4, r3
 8009a3a:	0028      	movs	r0, r5
 8009a3c:	f000 f8d4 	bl	8009be8 <__malloc_lock>
 8009a40:	4a1d      	ldr	r2, [pc, #116]	; (8009ab8 <_free_r+0x90>)
 8009a42:	6813      	ldr	r3, [r2, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d105      	bne.n	8009a54 <_free_r+0x2c>
 8009a48:	6063      	str	r3, [r4, #4]
 8009a4a:	6014      	str	r4, [r2, #0]
 8009a4c:	0028      	movs	r0, r5
 8009a4e:	f000 f8cc 	bl	8009bea <__malloc_unlock>
 8009a52:	bd70      	pop	{r4, r5, r6, pc}
 8009a54:	42a3      	cmp	r3, r4
 8009a56:	d909      	bls.n	8009a6c <_free_r+0x44>
 8009a58:	6821      	ldr	r1, [r4, #0]
 8009a5a:	1860      	adds	r0, r4, r1
 8009a5c:	4283      	cmp	r3, r0
 8009a5e:	d1f3      	bne.n	8009a48 <_free_r+0x20>
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	1841      	adds	r1, r0, r1
 8009a66:	6021      	str	r1, [r4, #0]
 8009a68:	e7ee      	b.n	8009a48 <_free_r+0x20>
 8009a6a:	0013      	movs	r3, r2
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	2a00      	cmp	r2, #0
 8009a70:	d001      	beq.n	8009a76 <_free_r+0x4e>
 8009a72:	42a2      	cmp	r2, r4
 8009a74:	d9f9      	bls.n	8009a6a <_free_r+0x42>
 8009a76:	6819      	ldr	r1, [r3, #0]
 8009a78:	1858      	adds	r0, r3, r1
 8009a7a:	42a0      	cmp	r0, r4
 8009a7c:	d10b      	bne.n	8009a96 <_free_r+0x6e>
 8009a7e:	6820      	ldr	r0, [r4, #0]
 8009a80:	1809      	adds	r1, r1, r0
 8009a82:	1858      	adds	r0, r3, r1
 8009a84:	6019      	str	r1, [r3, #0]
 8009a86:	4282      	cmp	r2, r0
 8009a88:	d1e0      	bne.n	8009a4c <_free_r+0x24>
 8009a8a:	6810      	ldr	r0, [r2, #0]
 8009a8c:	6852      	ldr	r2, [r2, #4]
 8009a8e:	1841      	adds	r1, r0, r1
 8009a90:	6019      	str	r1, [r3, #0]
 8009a92:	605a      	str	r2, [r3, #4]
 8009a94:	e7da      	b.n	8009a4c <_free_r+0x24>
 8009a96:	42a0      	cmp	r0, r4
 8009a98:	d902      	bls.n	8009aa0 <_free_r+0x78>
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	602b      	str	r3, [r5, #0]
 8009a9e:	e7d5      	b.n	8009a4c <_free_r+0x24>
 8009aa0:	6821      	ldr	r1, [r4, #0]
 8009aa2:	1860      	adds	r0, r4, r1
 8009aa4:	4282      	cmp	r2, r0
 8009aa6:	d103      	bne.n	8009ab0 <_free_r+0x88>
 8009aa8:	6810      	ldr	r0, [r2, #0]
 8009aaa:	6852      	ldr	r2, [r2, #4]
 8009aac:	1841      	adds	r1, r0, r1
 8009aae:	6021      	str	r1, [r4, #0]
 8009ab0:	6062      	str	r2, [r4, #4]
 8009ab2:	605c      	str	r4, [r3, #4]
 8009ab4:	e7ca      	b.n	8009a4c <_free_r+0x24>
 8009ab6:	46c0      	nop			; (mov r8, r8)
 8009ab8:	200003a0 	.word	0x200003a0

08009abc <_malloc_r>:
 8009abc:	2303      	movs	r3, #3
 8009abe:	b570      	push	{r4, r5, r6, lr}
 8009ac0:	1ccd      	adds	r5, r1, #3
 8009ac2:	439d      	bics	r5, r3
 8009ac4:	3508      	adds	r5, #8
 8009ac6:	0006      	movs	r6, r0
 8009ac8:	2d0c      	cmp	r5, #12
 8009aca:	d21e      	bcs.n	8009b0a <_malloc_r+0x4e>
 8009acc:	250c      	movs	r5, #12
 8009ace:	42a9      	cmp	r1, r5
 8009ad0:	d81d      	bhi.n	8009b0e <_malloc_r+0x52>
 8009ad2:	0030      	movs	r0, r6
 8009ad4:	f000 f888 	bl	8009be8 <__malloc_lock>
 8009ad8:	4a25      	ldr	r2, [pc, #148]	; (8009b70 <_malloc_r+0xb4>)
 8009ada:	6814      	ldr	r4, [r2, #0]
 8009adc:	0021      	movs	r1, r4
 8009ade:	2900      	cmp	r1, #0
 8009ae0:	d119      	bne.n	8009b16 <_malloc_r+0x5a>
 8009ae2:	4c24      	ldr	r4, [pc, #144]	; (8009b74 <_malloc_r+0xb8>)
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d103      	bne.n	8009af2 <_malloc_r+0x36>
 8009aea:	0030      	movs	r0, r6
 8009aec:	f000 f86a 	bl	8009bc4 <_sbrk_r>
 8009af0:	6020      	str	r0, [r4, #0]
 8009af2:	0029      	movs	r1, r5
 8009af4:	0030      	movs	r0, r6
 8009af6:	f000 f865 	bl	8009bc4 <_sbrk_r>
 8009afa:	1c43      	adds	r3, r0, #1
 8009afc:	d12b      	bne.n	8009b56 <_malloc_r+0x9a>
 8009afe:	230c      	movs	r3, #12
 8009b00:	0030      	movs	r0, r6
 8009b02:	6033      	str	r3, [r6, #0]
 8009b04:	f000 f871 	bl	8009bea <__malloc_unlock>
 8009b08:	e003      	b.n	8009b12 <_malloc_r+0x56>
 8009b0a:	2d00      	cmp	r5, #0
 8009b0c:	dadf      	bge.n	8009ace <_malloc_r+0x12>
 8009b0e:	230c      	movs	r3, #12
 8009b10:	6033      	str	r3, [r6, #0]
 8009b12:	2000      	movs	r0, #0
 8009b14:	bd70      	pop	{r4, r5, r6, pc}
 8009b16:	680b      	ldr	r3, [r1, #0]
 8009b18:	1b5b      	subs	r3, r3, r5
 8009b1a:	d419      	bmi.n	8009b50 <_malloc_r+0x94>
 8009b1c:	2b0b      	cmp	r3, #11
 8009b1e:	d903      	bls.n	8009b28 <_malloc_r+0x6c>
 8009b20:	600b      	str	r3, [r1, #0]
 8009b22:	18cc      	adds	r4, r1, r3
 8009b24:	6025      	str	r5, [r4, #0]
 8009b26:	e003      	b.n	8009b30 <_malloc_r+0x74>
 8009b28:	684b      	ldr	r3, [r1, #4]
 8009b2a:	428c      	cmp	r4, r1
 8009b2c:	d10d      	bne.n	8009b4a <_malloc_r+0x8e>
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	0030      	movs	r0, r6
 8009b32:	f000 f85a 	bl	8009bea <__malloc_unlock>
 8009b36:	0020      	movs	r0, r4
 8009b38:	2207      	movs	r2, #7
 8009b3a:	300b      	adds	r0, #11
 8009b3c:	1d23      	adds	r3, r4, #4
 8009b3e:	4390      	bics	r0, r2
 8009b40:	1ac3      	subs	r3, r0, r3
 8009b42:	d0e7      	beq.n	8009b14 <_malloc_r+0x58>
 8009b44:	425a      	negs	r2, r3
 8009b46:	50e2      	str	r2, [r4, r3]
 8009b48:	e7e4      	b.n	8009b14 <_malloc_r+0x58>
 8009b4a:	6063      	str	r3, [r4, #4]
 8009b4c:	000c      	movs	r4, r1
 8009b4e:	e7ef      	b.n	8009b30 <_malloc_r+0x74>
 8009b50:	000c      	movs	r4, r1
 8009b52:	6849      	ldr	r1, [r1, #4]
 8009b54:	e7c3      	b.n	8009ade <_malloc_r+0x22>
 8009b56:	2303      	movs	r3, #3
 8009b58:	1cc4      	adds	r4, r0, #3
 8009b5a:	439c      	bics	r4, r3
 8009b5c:	42a0      	cmp	r0, r4
 8009b5e:	d0e1      	beq.n	8009b24 <_malloc_r+0x68>
 8009b60:	1a21      	subs	r1, r4, r0
 8009b62:	0030      	movs	r0, r6
 8009b64:	f000 f82e 	bl	8009bc4 <_sbrk_r>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	d1db      	bne.n	8009b24 <_malloc_r+0x68>
 8009b6c:	e7c7      	b.n	8009afe <_malloc_r+0x42>
 8009b6e:	46c0      	nop			; (mov r8, r8)
 8009b70:	200003a0 	.word	0x200003a0
 8009b74:	200003a4 	.word	0x200003a4

08009b78 <_realloc_r>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	0007      	movs	r7, r0
 8009b7c:	000d      	movs	r5, r1
 8009b7e:	0016      	movs	r6, r2
 8009b80:	2900      	cmp	r1, #0
 8009b82:	d105      	bne.n	8009b90 <_realloc_r+0x18>
 8009b84:	0011      	movs	r1, r2
 8009b86:	f7ff ff99 	bl	8009abc <_malloc_r>
 8009b8a:	0004      	movs	r4, r0
 8009b8c:	0020      	movs	r0, r4
 8009b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b90:	2a00      	cmp	r2, #0
 8009b92:	d103      	bne.n	8009b9c <_realloc_r+0x24>
 8009b94:	f7ff ff48 	bl	8009a28 <_free_r>
 8009b98:	0034      	movs	r4, r6
 8009b9a:	e7f7      	b.n	8009b8c <_realloc_r+0x14>
 8009b9c:	f000 f826 	bl	8009bec <_malloc_usable_size_r>
 8009ba0:	002c      	movs	r4, r5
 8009ba2:	42b0      	cmp	r0, r6
 8009ba4:	d2f2      	bcs.n	8009b8c <_realloc_r+0x14>
 8009ba6:	0031      	movs	r1, r6
 8009ba8:	0038      	movs	r0, r7
 8009baa:	f7ff ff87 	bl	8009abc <_malloc_r>
 8009bae:	1e04      	subs	r4, r0, #0
 8009bb0:	d0ec      	beq.n	8009b8c <_realloc_r+0x14>
 8009bb2:	0029      	movs	r1, r5
 8009bb4:	0032      	movs	r2, r6
 8009bb6:	f7ff fbff 	bl	80093b8 <memcpy>
 8009bba:	0029      	movs	r1, r5
 8009bbc:	0038      	movs	r0, r7
 8009bbe:	f7ff ff33 	bl	8009a28 <_free_r>
 8009bc2:	e7e3      	b.n	8009b8c <_realloc_r+0x14>

08009bc4 <_sbrk_r>:
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	b570      	push	{r4, r5, r6, lr}
 8009bc8:	4c06      	ldr	r4, [pc, #24]	; (8009be4 <_sbrk_r+0x20>)
 8009bca:	0005      	movs	r5, r0
 8009bcc:	0008      	movs	r0, r1
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	f7fb ff1a 	bl	8005a08 <_sbrk>
 8009bd4:	1c43      	adds	r3, r0, #1
 8009bd6:	d103      	bne.n	8009be0 <_sbrk_r+0x1c>
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d000      	beq.n	8009be0 <_sbrk_r+0x1c>
 8009bde:	602b      	str	r3, [r5, #0]
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
 8009be2:	46c0      	nop			; (mov r8, r8)
 8009be4:	20000484 	.word	0x20000484

08009be8 <__malloc_lock>:
 8009be8:	4770      	bx	lr

08009bea <__malloc_unlock>:
 8009bea:	4770      	bx	lr

08009bec <_malloc_usable_size_r>:
 8009bec:	1f0b      	subs	r3, r1, #4
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	1f18      	subs	r0, r3, #4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	da01      	bge.n	8009bfa <_malloc_usable_size_r+0xe>
 8009bf6:	580b      	ldr	r3, [r1, r0]
 8009bf8:	18c0      	adds	r0, r0, r3
 8009bfa:	4770      	bx	lr

08009bfc <_init>:
 8009bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfe:	46c0      	nop			; (mov r8, r8)
 8009c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c02:	bc08      	pop	{r3}
 8009c04:	469e      	mov	lr, r3
 8009c06:	4770      	bx	lr

08009c08 <_fini>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	46c0      	nop			; (mov r8, r8)
 8009c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0e:	bc08      	pop	{r3}
 8009c10:	469e      	mov	lr, r3
 8009c12:	4770      	bx	lr
